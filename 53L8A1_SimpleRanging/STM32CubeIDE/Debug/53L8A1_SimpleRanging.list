
53L8A1_SimpleRanging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015a60  0800a0ec  0800a0ec  0000b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb4c  0801fb4c  000210b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801fb4c  0801fb4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb54  0801fb54  000210b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb54  0801fb54  00020b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fb58  0801fb58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0801fb5c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000308c  200000b0  0801fc0c  000210b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000313c  0801fc0c  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001a7f3  00000000  00000000  000210e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000a4  00000000  00000000  0003b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000162a3  00000000  00000000  0003b977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039a7  00000000  00000000  00051c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001248  00000000  00000000  000555c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f1d65  00000000  00000000  00056810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000de2  00000000  00000000  00148575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e93  00000000  00000000  00149357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001731ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005254  00000000  00000000  00173230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0d4 	.word	0x0800a0d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800a0d4 	.word	0x0800a0d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f004 fdf4 	bl	800519c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	@ (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f008 fe63 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f000 fcd7 	bl	8000f90 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80005f0:	0801fb5c 	.word	0x0801fb5c
  ldr r2, =_sbss
 80005f4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80005f8:	2000313c 	.word	0x2000313c

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>

080005fe <ROI_Init>:
#define BR_NEARER_GAP_MM     180          /* row7 mean must be this much nearer than row6 mean */

/* ------------------------------------------------------------------------ */

void ROI_Init(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
    // nothing yet; placeholder if you want state
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <ROI_Compute>:

ROI_Result_t ROI_Compute(const RANGING_SENSOR_Result_t *res)
{
 800060c:	b490      	push	{r4, r7}
 800060e:	b0b0      	sub	sp, #192	@ 0xc0
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
    ROI_Result_t out = (ROI_Result_t){ .valid = 0, .row = 0, .col = 0, .avg_distance = -1 };
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800061a:	2300      	movs	r3, #0
 800061c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000620:	2300      	movs	r3, #0
 8000622:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!res) return out;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d108      	bne.n	8000644 <ROI_Compute+0x38>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	461c      	mov	r4, r3
 8000636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000642:	e299      	b.n	8000b78 <ROI_Compute+0x56c>

    const uint8_t rows = 8, cols = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800064a:	2308      	movs	r3, #8
 800064c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    /* --- Analyze bottom row (row 7) and row 6 to decide if row 7 is a flat surface --- */
    int br_good = 0, r6_good = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    int32_t br_min = INT_MAX, br_max = INT_MIN, br_sum = 0;
 800065c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000664:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t r6_min = INT_MAX, r6_max = INT_MIN, r6_sum = 0;
 8000672:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000676:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800067a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800067e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    /* row 7 indices: 56..63; row 6 indices: 48..55 */
    for (uint8_t z = 56; z <= 63; z++) {
 8000688:	2338      	movs	r3, #56	@ 0x38
 800068a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800068e:	e042      	b.n	8000716 <ROI_Compute+0x10a>
        if (res->ZoneResult[z].NumberOfTargets > 0 && ROI_STATUS_GOOD(res->ZoneResult[z].Status[0])) {
 8000690:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	440b      	add	r3, r1
 80006a0:	3304      	adds	r3, #4
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d031      	beq.n	800070c <ROI_Compute+0x100>
 80006a8:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	330c      	adds	r3, #12
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d125      	bne.n	800070c <ROI_Compute+0x100>
            int32_t d = (int32_t)res->ZoneResult[z].Distance[0];
 80006c0:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80006c4:	6839      	ldr	r1, [r7, #0]
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	3308      	adds	r3, #8
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
            if (d < br_min) br_min = d;
 80006d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80006dc:	429a      	cmp	r2, r3
 80006de:	da02      	bge.n	80006e6 <ROI_Compute+0xda>
 80006e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (d > br_max) br_max = d;
 80006e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dd02      	ble.n	80006f6 <ROI_Compute+0xea>
 80006f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            br_sum += d;
 80006f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80006fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006fc:	4413      	add	r3, r2
 80006fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            br_good++;
 8000702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000706:	3301      	adds	r3, #1
 8000708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    for (uint8_t z = 56; z <= 63; z++) {
 800070c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000710:	3301      	adds	r3, #1
 8000712:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000716:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800071a:	2b3f      	cmp	r3, #63	@ 0x3f
 800071c:	d9b8      	bls.n	8000690 <ROI_Compute+0x84>
        }
    }
    for (uint8_t z = 48; z <= 55; z++) {
 800071e:	2330      	movs	r3, #48	@ 0x30
 8000720:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000724:	e042      	b.n	80007ac <ROI_Compute+0x1a0>
        if (res->ZoneResult[z].NumberOfTargets > 0 && ROI_STATUS_GOOD(res->ZoneResult[z].Status[0])) {
 8000726:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	3304      	adds	r3, #4
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d031      	beq.n	80007a2 <ROI_Compute+0x196>
 800073e:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	330c      	adds	r3, #12
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d125      	bne.n	80007a2 <ROI_Compute+0x196>
            int32_t d = (int32_t)res->ZoneResult[z].Distance[0];
 8000756:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	3308      	adds	r3, #8
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (d < r6_min) r6_min = d;
 800076c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800076e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000772:	429a      	cmp	r2, r3
 8000774:	da02      	bge.n	800077c <ROI_Compute+0x170>
 8000776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            if (d > r6_max) r6_max = d;
 800077c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800077e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000782:	429a      	cmp	r2, r3
 8000784:	dd02      	ble.n	800078c <ROI_Compute+0x180>
 8000786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            r6_sum += d;
 800078c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000792:	4413      	add	r3, r2
 8000794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            r6_good++;
 8000798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    for (uint8_t z = 48; z <= 55; z++) {
 80007a2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80007a6:	3301      	adds	r3, #1
 80007a8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80007ac:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80007b0:	2b37      	cmp	r3, #55	@ 0x37
 80007b2:	d9b8      	bls.n	8000726 <ROI_Compute+0x11a>
        }
    }

    int skip_bottom_in_min = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (br_good >= BR_MIN_GOOD_CELLS) {
 80007ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80007be:	2b05      	cmp	r3, #5
 80007c0:	dd39      	ble.n	8000836 <ROI_Compute+0x22a>
        int32_t br_spread = (br_max > br_min) ? (br_max - br_min) : 0;
 80007c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80007c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dd05      	ble.n	80007da <ROI_Compute+0x1ce>
 80007ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80007d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	e000      	b.n	80007dc <ROI_Compute+0x1d0>
 80007da:	2300      	movs	r3, #0
 80007dc:	66bb      	str	r3, [r7, #104]	@ 0x68
        int32_t br_mean   = (br_good > 0) ? (br_sum / br_good) : INT_MAX;
 80007de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd06      	ble.n	80007f4 <ROI_Compute+0x1e8>
 80007e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80007ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80007ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80007f2:	e001      	b.n	80007f8 <ROI_Compute+0x1ec>
 80007f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80007f8:	667b      	str	r3, [r7, #100]	@ 0x64
        int32_t r6_mean   = (r6_good > 0) ? (r6_sum / r6_good) : INT_MAX;
 80007fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dd06      	ble.n	8000810 <ROI_Compute+0x204>
 8000802:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800080a:	fb92 f3f3 	sdiv	r3, r2, r3
 800080e:	e001      	b.n	8000814 <ROI_Compute+0x208>
 8000810:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000814:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Treat row7 as a flat surface only if:
           - many good cells,
           - very uniform,
           - clearly nearer than the next row (edge strip effect). */
        if (br_spread <= BR_SPREAD_MAX_MM &&
 8000816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000818:	2b64      	cmp	r3, #100	@ 0x64
 800081a:	dc0c      	bgt.n	8000836 <ROI_Compute+0x22a>
 800081c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800081e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d007      	beq.n	8000836 <ROI_Compute+0x22a>
            r6_mean != INT_MAX &&
            (r6_mean - br_mean) >= BR_NEARER_GAP_MM) {
 8000826:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800082a:	1ad3      	subs	r3, r2, r3
            r6_mean != INT_MAX &&
 800082c:	2bb3      	cmp	r3, #179	@ 0xb3
 800082e:	dd02      	ble.n	8000836 <ROI_Compute+0x22a>
            skip_bottom_in_min = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }
    }

    /* --- Find global minimum among "good" cells only (optionally skipping flat bottom row) --- */
    int32_t global_min = INT_MAX;
 8000836:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800083a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t start_z = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint8_t end_z   = rows*cols - 1;
 8000844:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000848:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800084c:	fb12 f303 	smulbb	r3, r2, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3b01      	subs	r3, #1
 8000854:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

    for (uint8_t z = start_z; z <= end_z; z++) {
 8000858:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800085c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8000860:	e03f      	b.n	80008e2 <ROI_Compute+0x2d6>
        /* If we flagged a flat bottom surface, exclude row7 (z 56..63) from *min* calculation only */
        if (skip_bottom_in_min && z >= 56 && z <= 63) continue;
 8000862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <ROI_Compute+0x26e>
 800086a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800086e:	2b37      	cmp	r3, #55	@ 0x37
 8000870:	d903      	bls.n	800087a <ROI_Compute+0x26e>
 8000872:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000876:	2b3f      	cmp	r3, #63	@ 0x3f
 8000878:	d92d      	bls.n	80008d6 <ROI_Compute+0x2ca>

        if (res->ZoneResult[z].NumberOfTargets > 0) {
 800087a:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 800087e:	6839      	ldr	r1, [r7, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	3304      	adds	r3, #4
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <ROI_Compute+0x2cc>
            int32_t st = (int32_t)res->ZoneResult[z].Status[0];
 8000892:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000896:	6839      	ldr	r1, [r7, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	330c      	adds	r3, #12
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
            if (ROI_STATUS_GOOD(st)) {
 80008a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d114      	bne.n	80008d8 <ROI_Compute+0x2cc>
                int32_t d = (int32_t)res->ZoneResult[z].Distance[0];
 80008ae:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	3308      	adds	r3, #8
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (d < global_min) global_min = d;
 80008c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80008c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008ca:	429a      	cmp	r2, r3
 80008cc:	da04      	bge.n	80008d8 <ROI_Compute+0x2cc>
 80008ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80008d4:	e000      	b.n	80008d8 <ROI_Compute+0x2cc>
        if (skip_bottom_in_min && z >= 56 && z <= 63) continue;
 80008d6:	bf00      	nop
    for (uint8_t z = start_z; z <= end_z; z++) {
 80008d8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80008dc:	3301      	adds	r3, #1
 80008de:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80008e2:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80008e6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d9b9      	bls.n	8000862 <ROI_Compute+0x256>
            }
        }
    }
    if (global_min == INT_MAX) return out; /* no good cells at all */
 80008ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d108      	bne.n	800090c <ROI_Compute+0x300>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	461c      	mov	r4, r3
 80008fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800090a:	e135      	b.n	8000b78 <ROI_Compute+0x56c>

    float bestJ = 1e9f;
 800090c:	4b9d      	ldr	r3, [pc, #628]	@ (8000b84 <ROI_Compute+0x578>)
 800090e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    /* --- Slide 2x2 window across 8x8 --- */
    for (uint8_t r = 0; r < rows - 1; r++) {
 8000912:	2300      	movs	r3, #0
 8000914:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8000918:	e11e      	b.n	8000b58 <ROI_Compute+0x54c>
        for (uint8_t c = 0; c < cols - 1; c++) {
 800091a:	2300      	movs	r3, #0
 800091c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8000920:	e10d      	b.n	8000b3e <ROI_Compute+0x532>

            uint8_t idxs[4] = {
                (uint8_t)(r*cols + c),
 8000922:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8000926:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800092a:	fb12 f303 	smulbb	r3, r2, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
            uint8_t idxs[4] = {
 8000938:	763b      	strb	r3, [r7, #24]
                (uint8_t)(r*cols + (c+1)),
 800093a:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800093e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000942:	fb12 f303 	smulbb	r3, r2, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800094c:	4413      	add	r3, r2
 800094e:	b2db      	uxtb	r3, r3
 8000950:	3301      	adds	r3, #1
 8000952:	b2db      	uxtb	r3, r3
            uint8_t idxs[4] = {
 8000954:	767b      	strb	r3, [r7, #25]
                (uint8_t)((r+1)*cols + c),
 8000956:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800095a:	3301      	adds	r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8000962:	fb12 f303 	smulbb	r3, r2, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
            uint8_t idxs[4] = {
 8000970:	76bb      	strb	r3, [r7, #26]
                (uint8_t)((r+1)*cols + (c+1))
 8000972:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000976:	3301      	adds	r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800097e:	fb12 f303 	smulbb	r3, r2, r3
 8000982:	b2da      	uxtb	r2, r3
 8000984:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000988:	4413      	add	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	b2db      	uxtb	r3, r3
            uint8_t idxs[4] = {
 8000990:	76fb      	strb	r3, [r7, #27]
            };

            /* Collect only the cells that are "good" AND within Δ of global min */
            int32_t gd[4];
            int good_count = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (int k = 0; k < 4; k++) {
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800099e:	e042      	b.n	8000a26 <ROI_Compute+0x41a>
                const uint32_t z = idxs[k];
 80009a0:	f107 0218 	add.w	r2, r7, #24
 80009a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (res->ZoneResult[z].NumberOfTargets == 0) continue;
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3304      	adds	r3, #4
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d028      	beq.n	8000a16 <ROI_Compute+0x40a>

                int32_t st = (int32_t)res->ZoneResult[z].Status[0];
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	330c      	adds	r3, #12
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!ROI_STATUS_GOOD(st)) continue;
 80009d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d11d      	bne.n	8000a1a <ROI_Compute+0x40e>

                int32_t d = (int32_t)res->ZoneResult[z].Distance[0];
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	3308      	adds	r3, #8
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	647b      	str	r3, [r7, #68]	@ 0x44
                if (d <= global_min + ROI_DELTA_MM) {
 80009f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009f6:	33b4      	adds	r3, #180	@ 0xb4
 80009f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dc0e      	bgt.n	8000a1c <ROI_Compute+0x410>
                    gd[good_count++] = d;
 80009fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	33c0      	adds	r3, #192	@ 0xc0
 8000a0c:	443b      	add	r3, r7
 8000a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a10:	f843 2cb8 	str.w	r2, [r3, #-184]
 8000a14:	e002      	b.n	8000a1c <ROI_Compute+0x410>
                if (res->ZoneResult[z].NumberOfTargets == 0) continue;
 8000a16:	bf00      	nop
 8000a18:	e000      	b.n	8000a1c <ROI_Compute+0x410>
                if (!ROI_STATUS_GOOD(st)) continue;
 8000a1a:	bf00      	nop
            for (int k = 0; k < 4; k++) {
 8000a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a20:	3301      	adds	r3, #1
 8000a22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	ddb8      	ble.n	80009a0 <ROI_Compute+0x394>
                }
            }

            /* Relaxed rule: require at least 3 cells passing; enforce spread cap */
            if (good_count < ROI_MIN_GOOD_CELLS) continue;
 8000a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	dd7b      	ble.n	8000b2e <ROI_Compute+0x522>

            /* Compute mean & spread on the accepted cells */
            int32_t minv = gd[0], maxv = gd[0], sum = gd[0];
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	677b      	str	r3, [r7, #116]	@ 0x74
            for (int i = 1; i < good_count; i++) {
 8000a42:	2301      	movs	r3, #1
 8000a44:	673b      	str	r3, [r7, #112]	@ 0x70
 8000a46:	e02b      	b.n	8000aa0 <ROI_Compute+0x494>
                if (gd[i] < minv) minv = gd[i];
 8000a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	33c0      	adds	r3, #192	@ 0xc0
 8000a4e:	443b      	add	r3, r7
 8000a50:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dd06      	ble.n	8000a68 <ROI_Compute+0x45c>
 8000a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	33c0      	adds	r3, #192	@ 0xc0
 8000a60:	443b      	add	r3, r7
 8000a62:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
                if (gd[i] > maxv) maxv = gd[i];
 8000a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	33c0      	adds	r3, #192	@ 0xc0
 8000a6e:	443b      	add	r3, r7
 8000a70:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a74:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da06      	bge.n	8000a88 <ROI_Compute+0x47c>
 8000a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	33c0      	adds	r3, #192	@ 0xc0
 8000a80:	443b      	add	r3, r7
 8000a82:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a86:	67bb      	str	r3, [r7, #120]	@ 0x78
                sum += gd[i];
 8000a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	33c0      	adds	r3, #192	@ 0xc0
 8000a8e:	443b      	add	r3, r7
 8000a90:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a94:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000a96:	4413      	add	r3, r2
 8000a98:	677b      	str	r3, [r7, #116]	@ 0x74
            for (int i = 1; i < good_count; i++) {
 8000a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000aa0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbce      	blt.n	8000a48 <ROI_Compute+0x43c>
            }
            int32_t spread = maxv - minv;
 8000aaa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (spread > ROI_SPREAD_MAX_MM) continue;
 8000ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ab4:	2b78      	cmp	r3, #120	@ 0x78
 8000ab6:	dc3c      	bgt.n	8000b32 <ROI_Compute+0x526>

            float mean = (float)sum / (float)good_count;
 8000ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ad2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
            float J = mean + ROI_LAMBDA * (float)spread;
 8000ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ad8:	ee07 3a90 	vmov	s15, r3
 8000adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

            if (J < bestJ) {
 8000af4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000af8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b04:	d516      	bpl.n	8000b34 <ROI_Compute+0x528>
                bestJ = J;
 8000b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                out.valid = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
                out.row = r;
 8000b10:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000b14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                out.col = c;
 8000b18:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000b1c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                out.avg_distance = sum / good_count;  /* average of the good cells */
 8000b20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b2c:	e002      	b.n	8000b34 <ROI_Compute+0x528>
            if (good_count < ROI_MIN_GOOD_CELLS) continue;
 8000b2e:	bf00      	nop
 8000b30:	e000      	b.n	8000b34 <ROI_Compute+0x528>
            if (spread > ROI_SPREAD_MAX_MM) continue;
 8000b32:	bf00      	nop
        for (uint8_t c = 0; c < cols - 1; c++) {
 8000b34:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000b38:	3301      	adds	r3, #1
 8000b3a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8000b3e:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8000b42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b46:	3b01      	subs	r3, #1
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	f6ff aeea 	blt.w	8000922 <ROI_Compute+0x316>
    for (uint8_t r = 0; r < rows - 1; r++) {
 8000b4e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8000b58:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8000b5c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b60:	3b01      	subs	r3, #1
 8000b62:	429a      	cmp	r2, r3
 8000b64:	f6ff aed9 	blt.w	800091a <ROI_Compute+0x30e>
            }
        }
    }

    return out;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	37c0      	adds	r7, #192	@ 0xc0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc90      	pop	{r4, r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	4e6e6b28 	.word	0x4e6e6b28

08000b88 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2b10      	cmp	r3, #16
 8000b96:	d102      	bne.n	8000b9e <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x24>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000cc 	.word	0x200000cc

08000bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a41      	ldr	r2, [pc, #260]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a35      	ldr	r2, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Red_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f004 ff46 	bl	8005ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	@ 0x80
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f004 ff40 	bl	8005ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Green_LED_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f240 4121 	movw	r1, #1057	@ 0x421
 8000c46:	4823      	ldr	r0, [pc, #140]	@ (8000cd4 <MX_GPIO_Init+0x124>)
 8000c48:	f004 ff3a 	bl	8005ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f004 fc8e 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 Red_LED_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|Red_LED_Pin|Buzzer_Pin;
 8000c68:	f44f 7368 	mov.w	r3, #928	@ 0x3a0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f004 fc7e 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Green_LED_Pin Yellow_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Green_LED_Pin|Yellow_LED_Pin;
 8000c88:	f240 4321 	movw	r3, #1057	@ 0x421
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_GPIO_Init+0x124>)
 8000ca2:	f004 fc6f 	bl	8005584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200a      	movs	r0, #10
 8000cac:	f004 fc03 	bl	80054b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f004 fc1c 	bl	80054ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2028      	movs	r0, #40	@ 0x28
 8000cbc:	f004 fbfb 	bl	80054b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc0:	2028      	movs	r0, #40	@ 0x28
 8000cc2:	f004 fc14 	bl	80054ee <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <PowerOnSelfTest>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
static void PowerOnSelfTest(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  // LEDs off first
  HAL_GPIO_WritePin(Red_LED_GPIO_Port,    Red_LED_Pin,    GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce6:	f004 feeb 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	482e      	ldr	r0, [pc, #184]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000cf0:	f004 fee6 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port,  Green_LED_Pin,  GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cfa:	482b      	ldr	r0, [pc, #172]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000cfc:	f004 fee0 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port,     Buzzer_Pin,     GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f004 fed9 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000d0e:	2032      	movs	r0, #50	@ 0x32
 8000d10:	f004 fad2 	bl	80052b8 <HAL_Delay>

  // Blink R -> Y -> G
  HAL_GPIO_WritePin(Red_LED_GPIO_Port,   Red_LED_Pin,   GPIO_PIN_SET); HAL_Delay(200);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f004 fecf 	bl	8005ac0 <HAL_GPIO_WritePin>
 8000d22:	20c8      	movs	r0, #200	@ 0xc8
 8000d24:	f004 fac8 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(Red_LED_GPIO_Port,   Red_LED_Pin,   GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d32:	f004 fec5 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port,Yellow_LED_Pin,GPIO_PIN_SET); HAL_Delay(200);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2120      	movs	r1, #32
 8000d3a:	481b      	ldr	r0, [pc, #108]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000d3c:	f004 fec0 	bl	8005ac0 <HAL_GPIO_WritePin>
 8000d40:	20c8      	movs	r0, #200	@ 0xc8
 8000d42:	f004 fab9 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port,Yellow_LED_Pin,GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4817      	ldr	r0, [pc, #92]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000d4c:	f004 feb8 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET); HAL_Delay(200);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d56:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000d58:	f004 feb2 	bl	8005ac0 <HAL_GPIO_WritePin>
 8000d5c:	20c8      	movs	r0, #200	@ 0xc8
 8000d5e:	f004 faab 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d68:	480f      	ldr	r0, [pc, #60]	@ (8000da8 <PowerOnSelfTest+0xd0>)
 8000d6a:	f004 fea9 	bl	8005ac0 <HAL_GPIO_WritePin>

  // Short beep
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);  HAL_Delay(120);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d78:	f004 fea2 	bl	8005ac0 <HAL_GPIO_WritePin>
 8000d7c:	2078      	movs	r0, #120	@ 0x78
 8000d7e:	f004 fa9b 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f004 fe98 	bl	8005ac0 <HAL_GPIO_WritePin>

  // === OLED splash ===
  OLED_Init(&oled);
 8000d90:	4806      	ldr	r0, [pc, #24]	@ (8000dac <PowerOnSelfTest+0xd4>)
 8000d92:	f000 f9f1 	bl	8001178 <OLED_Init>
  OLED_Splash(&oled);
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <PowerOnSelfTest+0xd4>)
 8000d98:	f000 fb8c 	bl	80014b4 <OLED_Splash>
  HAL_Delay(800); // visible pause; tune as you like
 8000d9c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000da0:	f004 fa8a 	bl	80052b8 <HAL_Delay>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48000400 	.word	0x48000400
 8000dac:	200000d0 	.word	0x200000d0

08000db0 <ROI_OnUpdate>:

// zone: 0=NEAR, 1=MID, 2=FAR
void ROI_OnUpdate(const ROI_Result_t *roi)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b092      	sub	sp, #72	@ 0x48
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
  static uint8_t zone = 2; // 0=NEAR, 1=MID, 2=FAR

  if (!roi || !roi->valid) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <ROI_OnUpdate+0x16>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d124      	bne.n	8000e10 <ROI_OnUpdate+0x60>
    /* No target -> treat as FAR */
    zone = 2;
 8000dc6:	4b69      	ldr	r3, [pc, #420]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(Buzzer_GPIO_Port,     Buzzer_Pin,     GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd6:	f004 fe73 	bl	8005ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Red_LED_GPIO_Port,    Red_LED_Pin,    GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f004 fe6c 	bl	8005ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2120      	movs	r1, #32
 8000dec:	4860      	ldr	r0, [pc, #384]	@ (8000f70 <ROI_OnUpdate+0x1c0>)
 8000dee:	f004 fe67 	bl	8005ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Green_LED_GPIO_Port,  Green_LED_Pin,  GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df8:	485d      	ldr	r0, [pc, #372]	@ (8000f70 <ROI_OnUpdate+0x1c0>)
 8000dfa:	f004 fe61 	bl	8005ac0 <HAL_GPIO_WritePin>

    OLED_Clear(&oled);
 8000dfe:	485d      	ldr	r0, [pc, #372]	@ (8000f74 <ROI_OnUpdate+0x1c4>)
 8000e00:	f000 fa49 	bl	8001296 <OLED_Clear>
    OLED_DrawCentered(&oled, 3, "No target");
 8000e04:	4a5c      	ldr	r2, [pc, #368]	@ (8000f78 <ROI_OnUpdate+0x1c8>)
 8000e06:	2103      	movs	r1, #3
 8000e08:	485a      	ldr	r0, [pc, #360]	@ (8000f74 <ROI_OnUpdate+0x1c4>)
 8000e0a:	f000 fb2b 	bl	8001464 <OLED_DrawCentered>
 8000e0e:	e0aa      	b.n	8000f66 <ROI_OnUpdate+0x1b6>
    return;
  }

  int d = roi->avg_distance;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* --- hysteresis state machine --- */
  switch (zone) {
 8000e16:	4b55      	ldr	r3, [pc, #340]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d024      	beq.n	8000e68 <ROI_OnUpdate+0xb8>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	dc38      	bgt.n	8000e94 <ROI_OnUpdate+0xe4>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <ROI_OnUpdate+0x7c>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00e      	beq.n	8000e48 <ROI_OnUpdate+0x98>
 8000e2a:	e033      	b.n	8000e94 <ROI_OnUpdate+0xe4>
    case 0: /* NEAR */
      if (d > NEAR_OFF_MM) zone = (d > MID_OFF_MM) ? 2 : 1;
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e2e:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000e32:	dd2a      	ble.n	8000e8a <ROI_OnUpdate+0xda>
 8000e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e36:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000e3a:	dd01      	ble.n	8000e40 <ROI_OnUpdate+0x90>
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	e000      	b.n	8000e42 <ROI_OnUpdate+0x92>
 8000e40:	2201      	movs	r2, #1
 8000e42:	4b4a      	ldr	r3, [pc, #296]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e44:	701a      	strb	r2, [r3, #0]
      break;
 8000e46:	e020      	b.n	8000e8a <ROI_OnUpdate+0xda>

    case 1: /* MID */
      if (d < NEAR_ON_MM) zone = 0;
 8000e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e4a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e4e:	da03      	bge.n	8000e58 <ROI_OnUpdate+0xa8>
 8000e50:	4b46      	ldr	r3, [pc, #280]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
      else if (d > MID_OFF_MM) zone = 2;
      break;
 8000e56:	e01a      	b.n	8000e8e <ROI_OnUpdate+0xde>
      else if (d > MID_OFF_MM) zone = 2;
 8000e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e5a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000e5e:	dd16      	ble.n	8000e8e <ROI_OnUpdate+0xde>
 8000e60:	4b42      	ldr	r3, [pc, #264]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
      break;
 8000e66:	e012      	b.n	8000e8e <ROI_OnUpdate+0xde>

    case 2: /* FAR */
      if (d < MID_ON_MM) zone = (d < NEAR_ON_MM) ? 0 : 1;
 8000e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e6a:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	dc0f      	bgt.n	8000e92 <ROI_OnUpdate+0xe2>
 8000e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e74:	f240 122b 	movw	r2, #299	@ 0x12b
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	bfcc      	ite	gt
 8000e7c:	2301      	movgt	r3, #1
 8000e7e:	2300      	movle	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e86:	701a      	strb	r2, [r3, #0]
      break;
 8000e88:	e003      	b.n	8000e92 <ROI_OnUpdate+0xe2>
      break;
 8000e8a:	bf00      	nop
 8000e8c:	e002      	b.n	8000e94 <ROI_OnUpdate+0xe4>
      break;
 8000e8e:	bf00      	nop
 8000e90:	e000      	b.n	8000e94 <ROI_OnUpdate+0xe4>
      break;
 8000e92:	bf00      	nop
  }

  /* --- Drive outputs according to zone --- */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port,     Buzzer_Pin,     (zone==0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000e94:	4b35      	ldr	r3, [pc, #212]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f004 fe08 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Red_LED_GPIO_Port,    Red_LED_Pin,    (zone==0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f004 fdfa 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, (zone==1)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2120      	movs	r1, #32
 8000ede:	4824      	ldr	r0, [pc, #144]	@ (8000f70 <ROI_OnUpdate+0x1c0>)
 8000ee0:	f004 fdee 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port,  Green_LED_Pin,  (zone==2)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000ee4:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	bf0c      	ite	eq
 8000eec:	2301      	moveq	r3, #1
 8000eee:	2300      	movne	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef8:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <ROI_OnUpdate+0x1c0>)
 8000efa:	f004 fde1 	bl	8005ac0 <HAL_GPIO_WritePin>

  /* --- OLED text --- */
  char line1[22], line2[22];
  OLED_Clear(&oled);
 8000efe:	481d      	ldr	r0, [pc, #116]	@ (8000f74 <ROI_OnUpdate+0x1c4>)
 8000f00:	f000 f9c9 	bl	8001296 <OLED_Clear>
  snprintf(line1, sizeof line1, "ROI(%u,%u) %dmm", roi->row, roi->col, d);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	795b      	ldrb	r3, [r3, #5]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4a17      	ldr	r2, [pc, #92]	@ (8000f7c <ROI_OnUpdate+0x1cc>)
 8000f1e:	2116      	movs	r1, #22
 8000f20:	f008 f85e 	bl	8008fe0 <sniprintf>
  snprintf(line2, sizeof line2, "Zone: %s", (zone==0)?"NEAR":(zone==1)?"MID":"FAR");
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <ROI_OnUpdate+0x18c>
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <ROI_OnUpdate+0x1bc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <ROI_OnUpdate+0x188>
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <ROI_OnUpdate+0x1d0>)
 8000f36:	e002      	b.n	8000f3e <ROI_OnUpdate+0x18e>
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <ROI_OnUpdate+0x1d4>)
 8000f3a:	e000      	b.n	8000f3e <ROI_OnUpdate+0x18e>
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <ROI_OnUpdate+0x1d8>)
 8000f3e:	f107 000c 	add.w	r0, r7, #12
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <ROI_OnUpdate+0x1dc>)
 8000f44:	2116      	movs	r1, #22
 8000f46:	f008 f84b 	bl	8008fe0 <sniprintf>
  OLED_DrawString(&oled, 0, 2, line1);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	2202      	movs	r2, #2
 8000f50:	2100      	movs	r1, #0
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <ROI_OnUpdate+0x1c4>)
 8000f54:	f000 f9cc 	bl	80012f0 <OLED_DrawString>
  OLED_DrawString(&oled, 0, 4, line2);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <ROI_OnUpdate+0x1c4>)
 8000f62:	f000 f9c5 	bl	80012f0 <OLED_DrawString>
}
 8000f66:	3740      	adds	r7, #64	@ 0x40
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	200000d0 	.word	0x200000d0
 8000f78:	0800a0ec 	.word	0x0800a0ec
 8000f7c:	0800a0f8 	.word	0x0800a0f8
 8000f80:	0800a108 	.word	0x0800a108
 8000f84:	0800a10c 	.word	0x0800a10c
 8000f88:	0800a110 	.word	0x0800a110
 8000f8c:	0800a118 	.word	0x0800a118

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f004 f914 	bl	80051c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f81a 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f7ff fe08 	bl	8000bb0 <MX_GPIO_Init>
  //MX_TOF_Init();
  /* USER CODE BEGIN 2 */
  /* BSP I2C for VL53L8CX + OLED (make sure BUS_I2C1_FREQUENCY = 400000U) */
  BSP_I2C1_Init();
 8000fa0:	f000 fd40 	bl	8001a24 <BSP_I2C1_Init>

  /* OLED context */
  extern I2C_HandleTypeDef hi2c1;   // provided by stm32l4xx_nucleo_bus.h/.c
  oled.hi2c     = &hi2c1;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <main+0x38>)
 8000fa6:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <main+0x3c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  oled.addr     = (0x3C << 1);      // 0x3C typical SSD1306, use 0x3D<<1 if needed
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <main+0x38>)
 8000fac:	2278      	movs	r2, #120	@ 0x78
 8000fae:	711a      	strb	r2, [r3, #4]
  oled.x_offset = 0;                // set 2 if your module is SH1106 with 2-col shift
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <main+0x38>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	715a      	strb	r2, [r3, #5]

  PowerOnSelfTest();                // will show splash on OLED
 8000fb6:	f7ff fe8f 	bl	8000cd8 <PowerOnSelfTest>
  /*to print my version of serial monitor*/
  MX_SERIALMON_Init();
 8000fba:	f000 fa9b 	bl	80014f4 <MX_SERIALMON_Init>
  ROI_Init();
 8000fbe:	f7ff fb1e 	bl	80005fe <ROI_Init>

  while (1)
  {
	  MX_SERIALMON_Process();
 8000fc2:	f000 fabd 	bl	8001540 <MX_SERIALMON_Process>
 8000fc6:	e7fc      	b.n	8000fc2 <main+0x32>
 8000fc8:	200000d0 	.word	0x200000d0
 8000fcc:	20000680 	.word	0x20000680

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	@ 0x58
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2244      	movs	r2, #68	@ 0x44
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 f90c 	bl	80091fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ff2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ff6:	f005 fd2f 	bl	8006a58 <HAL_PWREx_ControlVoltageScaling>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001000:	f000 f837 	bl	8001072 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001016:	2302      	movs	r3, #2
 8001018:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800101e:	230a      	movs	r3, #10
 8001020:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001022:	2307      	movs	r3, #7
 8001024:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fd66 	bl	8006b04 <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800103e:	f000 f818 	bl	8001072 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2303      	movs	r3, #3
 8001048:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	2104      	movs	r1, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f006 f92e 	bl	80072bc <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001066:	f000 f804 	bl	8001072 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3758      	adds	r7, #88	@ 0x58
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001076:	b672      	cpsid	i
}
 8001078:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107a:	bf00      	nop
 800107c:	e7fd      	b.n	800107a <Error_Handler+0x8>

0800107e <wr_cmd>:
#include "main.h"                    /* for HAL headers */
#include "string.h"

/* ---- Low-level helpers -------------------------------------------------- */
static void wr_cmd (OLED_t *d, uint8_t c)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af02      	add	r7, sp, #8
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
  uint8_t buf[2] = {0x00, c};        /* 0x00 = control byte for command */
 800108a:	2300      	movs	r3, #0
 800108c:	733b      	strb	r3, [r7, #12]
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(d->hi2c, d->addr, buf, 2, HAL_MAX_DELAY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	4619      	mov	r1, r3
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	f004 fe18 	bl	8005cdc <HAL_I2C_Master_Transmit>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <wr_cmd2>:

static void wr_cmd2(OLED_t *d, uint8_t a, uint8_t b)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	4613      	mov	r3, r2
 80010c2:	70bb      	strb	r3, [r7, #2]
  uint8_t buf[3] = {0x00, a, b};
 80010c4:	2300      	movs	r3, #0
 80010c6:	733b      	strb	r3, [r7, #12]
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	737b      	strb	r3, [r7, #13]
 80010cc:	78bb      	ldrb	r3, [r7, #2]
 80010ce:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Master_Transmit(d->hi2c, d->addr, buf, 3, HAL_MAX_DELAY);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	4619      	mov	r1, r3
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2303      	movs	r3, #3
 80010e6:	f004 fdf9 	bl	8005cdc <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <wr_data>:

static void wr_data(OLED_t *d, const uint8_t *data, uint16_t len)
{
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b08d      	sub	sp, #52	@ 0x34
 80010f6:	af02      	add	r7, sp, #8
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	4613      	mov	r3, r2
 80010fe:	80fb      	strh	r3, [r7, #6]
  while (len) {
 8001100:	e032      	b.n	8001168 <wr_data+0x76>
    uint16_t chunk = (len > 16) ? 16 : len;     // small, safe stack buffer
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	2b10      	cmp	r3, #16
 8001106:	bf28      	it	cs
 8001108:	2310      	movcs	r3, #16
 800110a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t  buf[1 + 16];
    buf[0] = 0x40;                              // data control byte
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	743b      	strb	r3, [r7, #16]
    for (uint16_t i = 0; i < chunk; ++i) buf[1 + i] = data[i];
 8001110:	2300      	movs	r3, #0
 8001112:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001114:	e00c      	b.n	8001130 <wr_data+0x3e>
 8001116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	441a      	add	r2, r3
 800111c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800111e:	3301      	adds	r3, #1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	3328      	adds	r3, #40	@ 0x28
 8001124:	443b      	add	r3, r7
 8001126:	f803 2c18 	strb.w	r2, [r3, #-24]
 800112a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800112c:	3301      	adds	r3, #1
 800112e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001130:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ee      	bcc.n	8001116 <wr_data+0x24>
    HAL_I2C_Master_Transmit(d->hi2c, d->addr, buf, 1 + chunk, HAL_MAX_DELAY);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	461c      	mov	r4, r3
 8001142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	f107 0210 	add.w	r2, r7, #16
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	9100      	str	r1, [sp, #0]
 8001152:	4621      	mov	r1, r4
 8001154:	f004 fdc2 	bl	8005cdc <HAL_I2C_Master_Transmit>
    data += chunk;
 8001158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
    len  -= chunk;
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	80fb      	strh	r3, [r7, #6]
  while (len) {
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1c9      	bne.n	8001102 <wr_data+0x10>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	372c      	adds	r7, #44	@ 0x2c
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <OLED_Init>:

/* ---- Public API --------------------------------------------------------- */
void OLED_Init(OLED_t *d)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f004 f899 	bl	80052b8 <HAL_Delay>
  wr_cmd (d, 0xAE);                /* display off */
 8001186:	21ae      	movs	r1, #174	@ 0xae
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff78 	bl	800107e <wr_cmd>
  wr_cmd2(d, 0xD5, 0x80);          /* clock */
 800118e:	2280      	movs	r2, #128	@ 0x80
 8001190:	21d5      	movs	r1, #213	@ 0xd5
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff8e 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0xA8, 0x3F);          /* multiplex (64) */
 8001198:	223f      	movs	r2, #63	@ 0x3f
 800119a:	21a8      	movs	r1, #168	@ 0xa8
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff89 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0xD3, 0x00);          /* offset */
 80011a2:	2200      	movs	r2, #0
 80011a4:	21d3      	movs	r1, #211	@ 0xd3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff84 	bl	80010b4 <wr_cmd2>
  wr_cmd (d, 0x40);                /* start line = 0 */
 80011ac:	2140      	movs	r1, #64	@ 0x40
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff65 	bl	800107e <wr_cmd>
  wr_cmd2(d, 0x8D, 0x14);          /* charge pump on */
 80011b4:	2214      	movs	r2, #20
 80011b6:	218d      	movs	r1, #141	@ 0x8d
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff7b 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0x20, 0x00);          /* horizontal addressing */
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff76 	bl	80010b4 <wr_cmd2>
  wr_cmd (d, 0xA1);                /* seg remap */
 80011c8:	21a1      	movs	r1, #161	@ 0xa1
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff57 	bl	800107e <wr_cmd>
  wr_cmd (d, 0xC8);                /* com scan dec */
 80011d0:	21c8      	movs	r1, #200	@ 0xc8
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff53 	bl	800107e <wr_cmd>
  wr_cmd2(d, 0xDA, 0x12);          /* com pins */
 80011d8:	2212      	movs	r2, #18
 80011da:	21da      	movs	r1, #218	@ 0xda
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff69 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0x81, 0x7F);          /* contrast */
 80011e2:	227f      	movs	r2, #127	@ 0x7f
 80011e4:	2181      	movs	r1, #129	@ 0x81
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff64 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0xD9, 0xF1);          /* precharge */
 80011ec:	22f1      	movs	r2, #241	@ 0xf1
 80011ee:	21d9      	movs	r1, #217	@ 0xd9
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff5f 	bl	80010b4 <wr_cmd2>
  wr_cmd2(d, 0xDB, 0x40);          /* VCOMH */
 80011f6:	2240      	movs	r2, #64	@ 0x40
 80011f8:	21db      	movs	r1, #219	@ 0xdb
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff5a 	bl	80010b4 <wr_cmd2>
  wr_cmd (d, 0xA4);                /* resume RAM */
 8001200:	21a4      	movs	r1, #164	@ 0xa4
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff3b 	bl	800107e <wr_cmd>
  wr_cmd (d, 0xA6);                /* normal display */
 8001208:	21a6      	movs	r1, #166	@ 0xa6
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff37 	bl	800107e <wr_cmd>
  wr_cmd (d, 0x2E);                /* stop scroll */
 8001210:	212e      	movs	r1, #46	@ 0x2e
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff33 	bl	800107e <wr_cmd>
  wr_cmd (d, 0xAF);                /* display on */
 8001218:	21af      	movs	r1, #175	@ 0xaf
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff2f 	bl	800107e <wr_cmd>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <OLED_SetWindow>:

void OLED_SetWindow(OLED_t *d, uint8_t x0, uint8_t x1, uint8_t page0, uint8_t page1)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4603      	mov	r3, r0
 8001238:	70fb      	strb	r3, [r7, #3]
 800123a:	460b      	mov	r3, r1
 800123c:	70bb      	strb	r3, [r7, #2]
 800123e:	4613      	mov	r3, r2
 8001240:	707b      	strb	r3, [r7, #1]
  x0 += d->x_offset; x1 += d->x_offset;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	795a      	ldrb	r2, [r3, #5]
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4413      	add	r3, r2
 800124a:	70fb      	strb	r3, [r7, #3]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	795a      	ldrb	r2, [r3, #5]
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	4413      	add	r3, r2
 8001254:	70bb      	strb	r3, [r7, #2]
  wr_cmd (d, 0x21); wr_cmd(d, x0); wr_cmd(d, x1);         /* columns */
 8001256:	2121      	movs	r1, #33	@ 0x21
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff10 	bl	800107e <wr_cmd>
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff0b 	bl	800107e <wr_cmd>
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff06 	bl	800107e <wr_cmd>
  wr_cmd (d, 0x22); wr_cmd(d, page0); wr_cmd(d, page1);   /* pages   */
 8001272:	2122      	movs	r1, #34	@ 0x22
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff02 	bl	800107e <wr_cmd>
 800127a:	787b      	ldrb	r3, [r7, #1]
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fefd 	bl	800107e <wr_cmd>
 8001284:	7c3b      	ldrb	r3, [r7, #16]
 8001286:	4619      	mov	r1, r3
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fef8 	bl	800107e <wr_cmd>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <OLED_Clear>:

void OLED_Clear(OLED_t *d)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b0a6      	sub	sp, #152	@ 0x98
 800129a:	af02      	add	r7, sp, #8
 800129c:	6078      	str	r0, [r7, #4]
  OLED_SetWindow(d, 0, 127, 0, 7);
 800129e:	2307      	movs	r3, #7
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	227f      	movs	r2, #127	@ 0x7f
 80012a6:	2100      	movs	r1, #0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffbd 	bl	8001228 <OLED_SetWindow>
  uint8_t zeros[128] = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 ffa0 	bl	80091fc <memset>
  for (int p = 0; p < 8; ++p) wr_data(d, zeros, sizeof(zeros));
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012c2:	e00b      	b.n	80012dc <OLED_Clear+0x46>
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff10 	bl	80010f2 <wr_data>
 80012d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	ddef      	ble.n	80012c4 <OLED_Clear+0x2e>
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3790      	adds	r7, #144	@ 0x90
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <OLED_DrawString>:

void OLED_DrawString(OLED_t *d, uint8_t x, uint8_t page, const char *s)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ac      	sub	sp, #176	@ 0xb0
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	72fb      	strb	r3, [r7, #11]
 80012fe:	4613      	mov	r3, r2
 8001300:	72bb      	strb	r3, [r7, #10]
  uint8_t line[128] = {0};                       /* up to 21 chars (21*6=126) */
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 ff76 	bl	80091fc <memset>
  size_t n = strlen(s);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7fe ff5d 	bl	80001d0 <strlen>
 8001316:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  if (n > 21) n = 21;
 800131a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800131e:	2b15      	cmp	r3, #21
 8001320:	d902      	bls.n	8001328 <OLED_DrawString+0x38>
 8001322:	2315      	movs	r3, #21
 8001324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  for (size_t i = 0; i < n; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800132e:	e067      	b.n	8001400 <OLED_DrawString+0x110>
    uint8_t c = (uint8_t)s[i];
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (c < 32 || c > 127) c = 32;               /* replace with space */
 800133e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001342:	2b1f      	cmp	r3, #31
 8001344:	d903      	bls.n	800134e <OLED_DrawString+0x5e>
 8001346:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800134a:	2b00      	cmp	r3, #0
 800134c:	da02      	bge.n	8001354 <OLED_DrawString+0x64>
 800134e:	2320      	movs	r3, #32
 8001350:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    const uint8_t *g = Font5x8[c - 32];
 8001354:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001358:	f1a3 0220 	sub.w	r2, r3, #32
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	4a3f      	ldr	r2, [pc, #252]	@ (8001460 <OLED_DrawString+0x170>)
 8001364:	4413      	add	r3, r2
 8001366:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    size_t off = i * 6;
 800136a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    line[off + 0] = g[0];
 800137a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f107 0214 	add.w	r2, r7, #20
 8001384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001388:	4413      	add	r3, r2
 800138a:	460a      	mov	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
    line[off + 1] = g[1];
 800138e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001398:	3301      	adds	r3, #1
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	33a8      	adds	r3, #168	@ 0xa8
 800139e:	443b      	add	r3, r7
 80013a0:	f803 2c94 	strb.w	r2, [r3, #-148]
    line[off + 2] = g[2];
 80013a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013a8:	1c9a      	adds	r2, r3, #2
 80013aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013ae:	3302      	adds	r3, #2
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	33a8      	adds	r3, #168	@ 0xa8
 80013b4:	443b      	add	r3, r7
 80013b6:	f803 2c94 	strb.w	r2, [r3, #-148]
    line[off + 3] = g[3];
 80013ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013be:	1cda      	adds	r2, r3, #3
 80013c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013c4:	3303      	adds	r3, #3
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	33a8      	adds	r3, #168	@ 0xa8
 80013ca:	443b      	add	r3, r7
 80013cc:	f803 2c94 	strb.w	r2, [r3, #-148]
    line[off + 4] = g[4];
 80013d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013d4:	1d1a      	adds	r2, r3, #4
 80013d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013da:	3304      	adds	r3, #4
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	33a8      	adds	r3, #168	@ 0xa8
 80013e0:	443b      	add	r3, r7
 80013e2:	f803 2c94 	strb.w	r2, [r3, #-148]
    line[off + 5] = 0x00;                         /* spacing column */
 80013e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013ea:	3305      	adds	r3, #5
 80013ec:	33a8      	adds	r3, #168	@ 0xa8
 80013ee:	443b      	add	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	f803 2c94 	strb.w	r2, [r3, #-148]
  for (size_t i = 0; i < n; ++i) {
 80013f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013fa:	3301      	adds	r3, #1
 80013fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001400:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001408:	429a      	cmp	r2, r3
 800140a:	d391      	bcc.n	8001330 <OLED_DrawString+0x40>
  }

  uint8_t width = (uint8_t)(n * 6);
 800140c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  if (width == 0) return;
 800141e:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001422:	2b00      	cmp	r3, #0
 8001424:	d018      	beq.n	8001458 <OLED_DrawString+0x168>

  OLED_SetWindow(d, x, (uint8_t)(x + width - 1), page, page);
 8001426:	7afa      	ldrb	r2, [r7, #11]
 8001428:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800142c:	4413      	add	r3, r2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7ab8      	ldrb	r0, [r7, #10]
 8001436:	7af9      	ldrb	r1, [r7, #11]
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4603      	mov	r3, r0
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fef2 	bl	8001228 <OLED_SetWindow>
  wr_data(d, line, width);
 8001444:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001448:	b29a      	uxth	r2, r3
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff fe4e 	bl	80010f2 <wr_data>
 8001456:	e000      	b.n	800145a <OLED_DrawString+0x16a>
  if (width == 0) return;
 8001458:	bf00      	nop
}
 800145a:	37a8      	adds	r7, #168	@ 0xa8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800a1f4 	.word	0x0800a1f4

08001464 <OLED_DrawCentered>:

void OLED_DrawCentered(OLED_t *d, uint8_t page, const char *s)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	460b      	mov	r3, r1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	72fb      	strb	r3, [r7, #11]
  size_t n = strlen(s); if (n > 21) n = 21;
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe feac 	bl	80001d0 <strlen>
 8001478:	6178      	str	r0, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b15      	cmp	r3, #21
 800147e:	d901      	bls.n	8001484 <OLED_DrawCentered+0x20>
 8001480:	2315      	movs	r3, #21
 8001482:	617b      	str	r3, [r7, #20]
  uint8_t width = (uint8_t)(n * 6);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	0052      	lsls	r2, r2, #1
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	74fb      	strb	r3, [r7, #19]
  uint8_t x = (uint8_t)((128 - width) / 2);
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001498:	0fda      	lsrs	r2, r3, #31
 800149a:	4413      	add	r3, r2
 800149c:	105b      	asrs	r3, r3, #1
 800149e:	74bb      	strb	r3, [r7, #18]
  OLED_DrawString(d, x, page, s);
 80014a0:	7afa      	ldrb	r2, [r7, #11]
 80014a2:	7cb9      	ldrb	r1, [r7, #18]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff ff22 	bl	80012f0 <OLED_DrawString>
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <OLED_Splash>:

void OLED_Splash(OLED_t *d)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  OLED_Clear(d);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff feea 	bl	8001296 <OLED_Clear>
  OLED_DrawCentered(d, 2, "real-time");
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <OLED_Splash+0x34>)
 80014c4:	2102      	movs	r1, #2
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffcc 	bl	8001464 <OLED_DrawCentered>
  OLED_DrawCentered(d, 3, "monitoring");
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <OLED_Splash+0x38>)
 80014ce:	2103      	movs	r1, #3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffc7 	bl	8001464 <OLED_DrawCentered>
  OLED_DrawCentered(d, 4, "start");
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <OLED_Splash+0x3c>)
 80014d8:	2104      	movs	r1, #4
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffc2 	bl	8001464 <OLED_DrawCentered>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800a124 	.word	0x0800a124
 80014ec:	0800a130 	.word	0x0800a130
 80014f0:	0800a13c 	.word	0x0800a13c

080014f4 <MX_SERIALMON_Init>:
static uint8_t SM_GetKeyNonBlocking(uint8_t *out);
static void SM_ClearScreen(void);

/* Public functions -----------------------------------------------------------*/
void MX_SERIALMON_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Init VCOM (UART over STLink) */
  BSP_COM_Init(COM1);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f9a7 	bl	800184c <BSP_COM_Init>

  /* Optional: clear screen once at startup */
  printf(SM_ESC_CLEAR);
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_SERIALMON_Init+0x40>)
 8001500:	f007 fcf6 	bl	8008ef0 <iprintf>

  /* Power-cycle / bring up the sensor as in the reference example */
  SM_SensorResetSequence();
 8001504:	f000 f84e 	bl	80015a4 <SM_SensorResetSequence>

  /* Init driver */
  smStatus = VL53L8A1_RANGING_SENSOR_Init(VL53L8A1_DEV_CENTER);
 8001508:	2001      	movs	r0, #1
 800150a:	f000 fcc1 	bl	8001e90 <VL53L8A1_RANGING_SENSOR_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <MX_SERIALMON_Init+0x44>)
 8001512:	6013      	str	r3, [r2, #0]
  if (smStatus != BSP_ERROR_NONE)
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <MX_SERIALMON_Init+0x44>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <MX_SERIALMON_Init+0x32>
  {
    printf("ERR:init\n");
 800151c:	4807      	ldr	r0, [pc, #28]	@ (800153c <MX_SERIALMON_Init+0x48>)
 800151e:	f007 fd57 	bl	8008fd0 <puts>
    while (1) { /* Trap */ }
 8001522:	bf00      	nop
 8001524:	e7fd      	b.n	8001522 <MX_SERIALMON_Init+0x2e>
  }

  /* Configure 8x8 continuous profile and start */
  SM_ConfigAndStart();
 8001526:	f000 f865 	bl	80015f4 <SM_ConfigAndStart>

  ROI_Init();
 800152a:	f7ff f868 	bl	80005fe <ROI_Init>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0800a144 	.word	0x0800a144
 8001538:	200005f0 	.word	0x200005f0
 800153c:	0800a14c 	.word	0x0800a14c

08001540 <MX_SERIALMON_Process>:

void MX_SERIALMON_Process(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
  /* Blocking continuous read (polling) + optional key handler */
  while (1)
  {
    /* Handle single-key command (non-blocking) */
    uint8_t key;
    if (SM_GetKeyNonBlocking(&key))
 8001546:	f107 030f 	add.w	r3, r7, #15
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f8f6 	bl	800173c <SM_GetKeyNonBlocking>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <MX_SERIALMON_Process+0x26>
    {
      if (key == 'c' || key == 'C')
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b63      	cmp	r3, #99	@ 0x63
 800155a:	d002      	beq.n	8001562 <MX_SERIALMON_Process+0x22>
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b43      	cmp	r3, #67	@ 0x43
 8001560:	d101      	bne.n	8001566 <MX_SERIALMON_Process+0x26>
      {
        SM_ClearScreen();
 8001562:	f000 f905 	bl	8001770 <SM_ClearScreen>
      }
    }

    /* Fetch distances (blocking call in continuous mode) */
    smStatus = VL53L8A1_RANGING_SENSOR_GetDistance(VL53L8A1_DEV_CENTER, &smResult);
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <MX_SERIALMON_Process+0x5c>)
 8001568:	2001      	movs	r0, #1
 800156a:	f000 fccd 	bl	8001f08 <VL53L8A1_RANGING_SENSOR_GetDistance>
 800156e:	4603      	mov	r3, r0
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <MX_SERIALMON_Process+0x60>)
 8001572:	6013      	str	r3, [r2, #0]
    if (smStatus == BSP_ERROR_NONE)
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <MX_SERIALMON_Process+0x60>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <MX_SERIALMON_Process+0x54>
    {
      SM_PrintFrame(&smResult);
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_SERIALMON_Process+0x5c>)
 800157e:	f000 f875 	bl	800166c <SM_PrintFrame>
      ROI_Result_t roi = ROI_Compute(&smResult);
 8001582:	463b      	mov	r3, r7
 8001584:	4905      	ldr	r1, [pc, #20]	@ (800159c <MX_SERIALMON_Process+0x5c>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f840 	bl	800060c <ROI_Compute>
      ROI_OnUpdate(&roi); // delegates to main.c
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fc0e 	bl	8000db0 <ROI_OnUpdate>
    }

    HAL_Delay(SM_POLLING_DELAY_MS);
 8001594:	2001      	movs	r0, #1
 8001596:	f003 fe8f 	bl	80052b8 <HAL_Delay>
  {
 800159a:	e7d4      	b.n	8001546 <MX_SERIALMON_Process+0x6>
 800159c:	200000ec 	.word	0x200000ec
 80015a0:	200005f0 	.word	0x200005f0

080015a4 <SM_SensorResetSequence>:
  }
}

/* Private helpers ------------------------------------------------------------*/
static void SM_SensorResetSequence(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Match pin names from app_tof_pin_conf.h */
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f004 fa86 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f003 fe7f 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_PWR_EN_C_PORT, VL53L8A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c2:	f004 fa7d 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015c6:	2002      	movs	r0, #2
 80015c8:	f003 fe76 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <SM_SensorResetSequence+0x4c>)
 80015d2:	f004 fa75 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015d6:	2002      	movs	r0, #2
 80015d8:	f003 fe6e 	bl	80052b8 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L8A1_LPn_C_PORT, VL53L8A1_LPn_C_PIN, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2101      	movs	r1, #1
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <SM_SensorResetSequence+0x4c>)
 80015e2:	f004 fa6d 	bl	8005ac0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015e6:	2002      	movs	r0, #2
 80015e8:	f003 fe66 	bl	80052b8 <HAL_Delay>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	48000400 	.word	0x48000400

080015f4 <SM_ConfigAndStart>:

static void SM_ConfigAndStart(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* 8x8 CONTINUOUS only; no signal/ambient to keep output compact */
  smProfile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <SM_ConfigAndStart+0x68>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	601a      	str	r2, [r3, #0]
  smProfile.TimingBudget   = SM_TIMING_BUDGET_MS;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <SM_ConfigAndStart+0x68>)
 8001600:	221e      	movs	r2, #30
 8001602:	605a      	str	r2, [r3, #4]
  smProfile.Frequency      = SM_RANGING_FREQ_HZ;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <SM_ConfigAndStart+0x68>)
 8001606:	220a      	movs	r2, #10
 8001608:	609a      	str	r2, [r3, #8]
  smProfile.EnableAmbient  = 0U;
 800160a:	4b14      	ldr	r3, [pc, #80]	@ (800165c <SM_ConfigAndStart+0x68>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  smProfile.EnableSignal   = 0U;
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <SM_ConfigAndStart+0x68>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]

  smStatus = VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &smProfile);
 8001616:	4911      	ldr	r1, [pc, #68]	@ (800165c <SM_ConfigAndStart+0x68>)
 8001618:	2001      	movs	r0, #1
 800161a:	f000 fc4d 	bl	8001eb8 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <SM_ConfigAndStart+0x6c>)
 8001622:	6013      	str	r3, [r2, #0]
  if (smStatus != BSP_ERROR_NONE)
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <SM_ConfigAndStart+0x6c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <SM_ConfigAndStart+0x42>
  {
    printf("ERR:cfg\n");
 800162c:	480d      	ldr	r0, [pc, #52]	@ (8001664 <SM_ConfigAndStart+0x70>)
 800162e:	f007 fccf 	bl	8008fd0 <puts>
    while (1) { /* Trap */ }
 8001632:	bf00      	nop
 8001634:	e7fd      	b.n	8001632 <SM_ConfigAndStart+0x3e>
  }

  smStatus = VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8001636:	2101      	movs	r1, #1
 8001638:	2001      	movs	r0, #1
 800163a:	f000 fc8d 	bl	8001f58 <VL53L8A1_RANGING_SENSOR_Start>
 800163e:	4603      	mov	r3, r0
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <SM_ConfigAndStart+0x6c>)
 8001642:	6013      	str	r3, [r2, #0]
  if (smStatus != BSP_ERROR_NONE)
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SM_ConfigAndStart+0x6c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <SM_ConfigAndStart+0x62>
  {
    printf("ERR:start\n");
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <SM_ConfigAndStart+0x74>)
 800164e:	f007 fcbf 	bl	8008fd0 <puts>
    while (1) { /* Trap */ }
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <SM_ConfigAndStart+0x5e>
  }
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000d8 	.word	0x200000d8
 8001660:	200005f0 	.word	0x200005f0
 8001664:	0800a158 	.word	0x0800a158
 8001668:	0800a160 	.word	0x0800a160

0800166c <SM_PrintFrame>:

static void SM_PrintFrame(const RANGING_SENSOR_Result_t *res)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Expect 64 zones in 8x8 mode. We print 8 lines; each has 8 "distance:status" pairs.
     Order matches ST demo's left/right orientation (k from 7 -> 0). */
  const uint8_t zones_per_line = 8;
 8001674:	2308      	movs	r3, #8
 8001676:	767b      	strb	r3, [r7, #25]
  const uint8_t targets_per_zone = RANGING_SENSOR_NB_TARGET_PER_ZONE; /* usually 1 */
 8001678:	2301      	movs	r3, #1
 800167a:	763b      	strb	r3, [r7, #24]

  uint32_t zone_index = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]

  for (uint8_t row = 0; row < 8; row++)
 8001680:	2300      	movs	r3, #0
 8001682:	76fb      	strb	r3, [r7, #27]
 8001684:	e04c      	b.n	8001720 <SM_PrintFrame+0xb4>
  {
    /* Build one row */
    for (int8_t k = zones_per_line - 1; k >= 0; k--)
 8001686:	7e7b      	ldrb	r3, [r7, #25]
 8001688:	3b01      	subs	r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	76bb      	strb	r3, [r7, #26]
 800168e:	e039      	b.n	8001704 <SM_PrintFrame+0x98>
    {
      uint32_t z = zone_index + (uint32_t)k;
 8001690:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

      if (res->ZoneResult[z].NumberOfTargets > 0)
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d019      	beq.n	80016e4 <SM_PrintFrame+0x78>
      {
        /* Use first target (l = 0) */
        long dist   = (long)res->ZoneResult[z].Distance[0];
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3308      	adds	r3, #8
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	613b      	str	r3, [r7, #16]
        long status = (long)res->ZoneResult[z].Status[0];
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	330c      	adds	r3, #12
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
        /* Space-separated, compact, machine-friendly */
        /* Width on distance helps visual alignment, still easy to parse */
        printf("%5ld:%ld", dist, status);
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	6939      	ldr	r1, [r7, #16]
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <SM_PrintFrame+0xc8>)
 80016de:	f007 fc07 	bl	8008ef0 <iprintf>
 80016e2:	e002      	b.n	80016ea <SM_PrintFrame+0x7e>
      }
      else
      {
        /* If no target, print X:X (parser can skip non-numeric if desired) */
        printf("    X:X");
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <SM_PrintFrame+0xcc>)
 80016e6:	f007 fc03 	bl	8008ef0 <iprintf>
      }

      if (k > 0) putchar(' ');
 80016ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd02      	ble.n	80016f8 <SM_PrintFrame+0x8c>
 80016f2:	2020      	movs	r0, #32
 80016f4:	f007 fc0e 	bl	8008f14 <putchar>
    for (int8_t k = zones_per_line - 1; k >= 0; k--)
 80016f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	76bb      	strb	r3, [r7, #26]
 8001704:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dac1      	bge.n	8001690 <SM_PrintFrame+0x24>
    }

    putchar('\n');
 800170c:	200a      	movs	r0, #10
 800170e:	f007 fc01 	bl	8008f14 <putchar>
    zone_index += zones_per_line;
 8001712:	7e7b      	ldrb	r3, [r7, #25]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	61fb      	str	r3, [r7, #28]
  for (uint8_t row = 0; row < 8; row++)
 800171a:	7efb      	ldrb	r3, [r7, #27]
 800171c:	3301      	adds	r3, #1
 800171e:	76fb      	strb	r3, [r7, #27]
 8001720:	7efb      	ldrb	r3, [r7, #27]
 8001722:	2b07      	cmp	r3, #7
 8001724:	d9af      	bls.n	8001686 <SM_PrintFrame+0x1a>
  }

  /* Blank line separates frames (easy to detect frame boundaries) */
  putchar('\n');
 8001726:	200a      	movs	r0, #10
 8001728:	f007 fbf4 	bl	8008f14 <putchar>
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	0800a16c 	.word	0x0800a16c
 8001738:	0800a178 	.word	0x0800a178

0800173c <SM_GetKeyNonBlocking>:

static uint8_t SM_GetKeyNonBlocking(uint8_t *out)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Non-blocking check for a single byte on COM1 */
  if (__HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE))
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <SM_GetKeyNonBlocking+0x30>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b20      	cmp	r3, #32
 8001750:	d107      	bne.n	8001762 <SM_GetKeyNonBlocking+0x26>
  {
    HAL_UART_Receive(&hcom_uart[COM1], out, 1, 0);
 8001752:	2300      	movs	r3, #0
 8001754:	2201      	movs	r2, #1
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <SM_GetKeyNonBlocking+0x30>)
 800175a:	f006 fd70 	bl	800823e <HAL_UART_Receive>
    return 1U;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <SM_GetKeyNonBlocking+0x28>
  }
  return 0U;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200005f4 	.word	0x200005f4

08001770 <SM_ClearScreen>:

static void SM_ClearScreen(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* No banners/instructions — just clear */
  printf(SM_ESC_CLEAR);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <SM_ClearScreen+0x10>)
 8001776:	f007 fbbb 	bl	8008ef0 <iprintf>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800a144 	.word	0x0800a144

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6613      	str	r3, [r2, #96]	@ 0x60
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f003 fd29 	bl	8005278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800182e:	2010      	movs	r0, #16
 8001830:	f004 f95e 	bl	8005af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <EXTI15_10_IRQHandler+0x10>)
 800183e:	f003 fe71 	bl	8005524 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000004 	.word	0x20000004

0800184c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d903      	bls.n	8001868 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001860:	f06f 0301 	mvn.w	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e025      	b.n	80018b4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4914      	ldr	r1, [pc, #80]	@ (80018c0 <BSP_COM_Init+0x74>)
 800186e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <BSP_COM_Init+0x78>)
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4403      	add	r3, r0
 800187e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <BSP_COM_Init+0x78>)
 800188c:	4413      	add	r3, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f86a 	bl	8001968 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001894:	79fa      	ldrb	r2, [r7, #7]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <BSP_COM_Init+0x78>)
 80018a0:	4413      	add	r3, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f810 	bl	80018c8 <MX_USART2_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018ae:	f06f 0303 	mvn.w	r3, #3
 80018b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	200005f4 	.word	0x200005f4

080018c8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a15      	ldr	r2, [pc, #84]	@ (800192c <MX_USART2_UART_Init+0x64>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80018e0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f006 fbb2 	bl	800807c <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004400 	.word	0x40004400

08001930 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <__io_putchar+0x30>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <__io_putchar+0x34>)
 8001948:	1898      	adds	r0, r3, r2
 800194a:	1d39      	adds	r1, r7, #4
 800194c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001950:	2201      	movs	r2, #1
 8001952:	f006 fbeb 	bl	800812c <HAL_UART_Transmit>
  return ch;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000067c 	.word	0x2000067c
 8001964:	200005f4 	.word	0x200005f4

08001968 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ac      	sub	sp, #176	@ 0xb0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2288      	movs	r2, #136	@ 0x88
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f007 fc3f 	bl	80091fc <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001982:	2300      	movs	r3, #0
 8001984:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4618      	mov	r0, r3
 800198c:	f005 feba 	bl	8007704 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <USART2_MspInit+0xb8>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	4a22      	ldr	r2, [pc, #136]	@ (8001a20 <USART2_MspInit+0xb8>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199a:	6593      	str	r3, [r2, #88]	@ 0x58
 800199c:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <USART2_MspInit+0xb8>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <USART2_MspInit+0xb8>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <USART2_MspInit+0xb8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <USART2_MspInit+0xb8>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80019c0:	2304      	movs	r3, #4
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80019d8:	2307      	movs	r3, #7
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80019de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e8:	f003 fdcc 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80019ec:	2308      	movs	r3, #8
 80019ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001a04:	2307      	movs	r3, #7
 8001a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001a0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a14:	f003 fdb6 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	37b0      	adds	r7, #176	@ 0xb0
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000

08001a24 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <BSP_I2C1_Init+0x70>)
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <BSP_I2C1_Init+0x74>)
 8001a32:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <BSP_I2C1_Init+0x78>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	4918      	ldr	r1, [pc, #96]	@ (8001a9c <BSP_I2C1_Init+0x78>)
 8001a3c:	600a      	str	r2, [r1, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d122      	bne.n	8001a88 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001a42:	4814      	ldr	r0, [pc, #80]	@ (8001a94 <BSP_I2C1_Init+0x70>)
 8001a44:	f004 fc90 	bl	8006368 <HAL_I2C_GetState>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11c      	bne.n	8001a88 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001a4e:	4811      	ldr	r0, [pc, #68]	@ (8001a94 <BSP_I2C1_Init+0x70>)
 8001a50:	f000 f8fe 	bl	8001c50 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001a5a:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <BSP_I2C1_Init+0x70>)
 8001a5c:	f000 f8b4 	bl	8001bc8 <MX_I2C1_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a66:	f06f 0307 	mvn.w	r3, #7
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	e00c      	b.n	8001a88 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4808      	ldr	r0, [pc, #32]	@ (8001a94 <BSP_I2C1_Init+0x70>)
 8001a72:	f004 ff4b 	bl	800690c <HAL_I2CEx_ConfigAnalogFilter>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a7c:	f06f 0307 	mvn.w	r3, #7
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	e001      	b.n	8001a88 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000680 	.word	0x20000680
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	200006d4 	.word	0x200006d4

08001aa0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <BSP_I2C1_DeInit+0x48>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d014      	beq.n	8001adc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <BSP_I2C1_DeInit+0x48>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <BSP_I2C1_DeInit+0x48>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <BSP_I2C1_DeInit+0x48>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001ac4:	4809      	ldr	r0, [pc, #36]	@ (8001aec <BSP_I2C1_DeInit+0x4c>)
 8001ac6:	f000 f923 	bl	8001d10 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001aca:	4808      	ldr	r0, [pc, #32]	@ (8001aec <BSP_I2C1_DeInit+0x4c>)
 8001acc:	f004 f8c3 	bl	8005c56 <HAL_I2C_DeInit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001ad6:	f06f 0307 	mvn.w	r3, #7
 8001ada:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200006d4 	.word	0x200006d4
 8001aec:	20000680 	.word	0x20000680

08001af0 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	81fb      	strh	r3, [r7, #14]
 8001afe:	460b      	mov	r3, r1
 8001b00:	81bb      	strh	r3, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b0a:	89ba      	ldrh	r2, [r7, #12]
 8001b0c:	89f9      	ldrh	r1, [r7, #14]
 8001b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <BSP_I2C1_WriteReg16+0x60>)
 8001b20:	f004 f9f4 	bl	8005f0c <HAL_I2C_Mem_Write>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b2a:	4809      	ldr	r0, [pc, #36]	@ (8001b50 <BSP_I2C1_WriteReg16+0x60>)
 8001b2c:	f004 fc2a 	bl	8006384 <HAL_I2C_GetError>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d103      	bne.n	8001b3e <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b36:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e002      	b.n	8001b44 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b3e:	f06f 0303 	mvn.w	r3, #3
 8001b42:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b44:	697b      	ldr	r3, [r7, #20]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000680 	.word	0x20000680

08001b54 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af04      	add	r7, sp, #16
 8001b5a:	60ba      	str	r2, [r7, #8]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	81fb      	strh	r3, [r7, #14]
 8001b62:	460b      	mov	r3, r1
 8001b64:	81bb      	strh	r3, [r7, #12]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b6e:	89ba      	ldrh	r2, [r7, #12]
 8001b70:	89f9      	ldrh	r1, [r7, #14]
 8001b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2302      	movs	r3, #2
 8001b82:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <BSP_I2C1_ReadReg16+0x60>)
 8001b84:	f004 fad6 	bl	8006134 <HAL_I2C_Mem_Read>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001b8e:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <BSP_I2C1_ReadReg16+0x60>)
 8001b90:	f004 fbf8 	bl	8006384 <HAL_I2C_GetError>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d003      	beq.n	8001ba2 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b9a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e002      	b.n	8001ba8 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ba2:	f06f 0303 	mvn.w	r3, #3
 8001ba6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ba8:	697b      	ldr	r3, [r7, #20]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000680 	.word	0x20000680

08001bb8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001bbc:	f003 fb70 	bl	80052a0 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <MX_I2C1_Init+0x80>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c4c <MX_I2C1_Init+0x84>)
 8001bde:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f003 ff88 	bl	8005b20 <HAL_I2C_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f004 fe75 	bl	800690c <HAL_I2CEx_ConfigAnalogFilter>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 feb7 	bl	80069a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	00f12981 	.word	0x00f12981

08001c50 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ac      	sub	sp, #176	@ 0xb0
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2288      	movs	r2, #136	@ 0x88
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 facb 	bl	80091fc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c66:	2340      	movs	r3, #64	@ 0x40
 8001c68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 fd46 	bl	8007704 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c84:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001caa:	2304      	movs	r3, #4
 8001cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001cb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4815      	ldr	r0, [pc, #84]	@ (8001d0c <I2C1_MspInit+0xbc>)
 8001cb8:	f003 fc64 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001cdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <I2C1_MspInit+0xbc>)
 8001ce4:	f003 fc4e 	bl	8005584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001cee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <I2C1_MspInit+0xb8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001d00:	bf00      	nop
 8001d02:	37b0      	adds	r7, #176	@ 0xb0
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <I2C1_MspDeInit+0x30>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <I2C1_MspDeInit+0x30>)
 8001d1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d22:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d28:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <I2C1_MspDeInit+0x34>)
 8001d2a:	f003 fdd5 	bl	80058d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001d2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d32:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <I2C1_MspDeInit+0x34>)
 8001d34:	f003 fdd0 	bl	80058d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48000400 	.word	0x48000400

08001d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
  }

  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e009      	b.n	8001da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fdc7 	bl	8001930 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf1      	blt.n	8001d94 <_write+0x12>
  }
  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_close>:

int _close(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
  return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_isatty>:

int _isatty(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f007 fa20 	bl	8009298 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20018000 	.word	0x20018000
 8001e84:	00000800 	.word	0x00000800
 8001e88:	200006d8 	.word	0x200006d8
 8001e8c:	20003140 	.word	0x20003140

08001e90 <VL53L8A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d903      	bls.n	8001ea6 <VL53L8A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e9e:	f06f 0301 	mvn.w	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e003      	b.n	8001eae <VL53L8A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L8CX_Probe(Instance);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f87e 	bl	8001fa8 <VL53L8CX_Probe>
 8001eac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <VL53L8A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d903      	bls.n	8001ed0 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ec8:	f06f 0301 	mvn.w	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e012      	b.n	8001ef6 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	490b      	ldr	r1, [pc, #44]	@ (8001f04 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da03      	bge.n	8001ef2 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001eea:	f06f 0304 	mvn.w	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e001      	b.n	8001ef6 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200006e8 	.word	0x200006e8
 8001f04:	200006dc 	.word	0x200006dc

08001f08 <VL53L8A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d903      	bls.n	8001f20 <VL53L8A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f18:	f06f 0301 	mvn.w	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e012      	b.n	8001f46 <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetDistance(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <VL53L8A1_RANGING_SENSOR_GetDistance+0x48>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	490b      	ldr	r1, [pc, #44]	@ (8001f54 <VL53L8A1_RANGING_SENSOR_GetDistance+0x4c>)
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	4610      	mov	r0, r2
 8001f32:	4798      	blx	r3
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da03      	bge.n	8001f42 <VL53L8A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f3a:	f06f 0304 	mvn.w	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e001      	b.n	8001f46 <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200006e8 	.word	0x200006e8
 8001f54:	200006dc 	.word	0x200006dc

08001f58 <VL53L8A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d903      	bls.n	8001f70 <VL53L8A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f68:	f06f 0301 	mvn.w	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e012      	b.n	8001f96 <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Start(VL53L8A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <VL53L8A1_RANGING_SENSOR_Start+0x48>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	490b      	ldr	r1, [pc, #44]	@ (8001fa4 <VL53L8A1_RANGING_SENSOR_Start+0x4c>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	4610      	mov	r0, r2
 8001f82:	4798      	blx	r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da03      	bge.n	8001f92 <VL53L8A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f8a:	f06f 0304 	mvn.w	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e001      	b.n	8001f96 <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200006e8 	.word	0x200006e8
 8001fa4:	200006dc 	.word	0x200006dc

08001fa8 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8001fb0:	2352      	movs	r3, #82	@ 0x52
 8001fb2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L8A1_I2C_INIT;
 8001fb4:	4b38      	ldr	r3, [pc, #224]	@ (8002098 <VL53L8CX_Probe+0xf0>)
 8001fb6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L8A1_I2C_DEINIT;
 8001fb8:	4b38      	ldr	r3, [pc, #224]	@ (800209c <VL53L8CX_Probe+0xf4>)
 8001fba:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L8A1_I2C_WRITEREG;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <VL53L8CX_Probe+0xf8>)
 8001fbe:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L8A1_I2C_READREG;
 8001fc0:	4b38      	ldr	r3, [pc, #224]	@ (80020a4 <VL53L8CX_Probe+0xfc>)
 8001fc2:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L8A1_GETTICK;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <VL53L8CX_Probe+0x100>)
 8001fc6:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&(VL53L8CXObj[Instance]), &IOCtx) != VL53L8CX_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	4a36      	ldr	r2, [pc, #216]	@ (80020ac <VL53L8CX_Probe+0x104>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f918 	bl	8002212 <VL53L8CX_RegisterBusIO>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <VL53L8CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001fe8:	f06f 0304 	mvn.w	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e04d      	b.n	800208c <VL53L8CX_Probe+0xe4>
  }
  else
  {
    VL53L8A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <VL53L8CX_Probe+0x108>)
 8001ff2:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <VL53L8CX_Probe+0x10c>)
 8001ff4:	601a      	str	r2, [r3, #0]
    VL53L8A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L8CXObj[Instance]);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <VL53L8CX_Probe+0x104>)
 8002002:	441a      	add	r2, r3
 8002004:	492c      	ldr	r1, [pc, #176]	@ (80020b8 <VL53L8CX_Probe+0x110>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id) != VL53L8CX_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <VL53L8CX_Probe+0x104>)
 8002018:	4413      	add	r3, r2
 800201a:	f107 0208 	add.w	r2, r7, #8
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f9a6 	bl	8002372 <VL53L8CX_ReadID>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <VL53L8CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800202c:	f06f 0304 	mvn.w	r3, #4
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	e02b      	b.n	800208c <VL53L8CX_Probe+0xe4>
    }
    else if (id != VL53L8CX_ID)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800203e:	f06f 0306 	mvn.w	r3, #6
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
 8002044:	e022      	b.n	800208c <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->Init(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) != VL53L8CX_OK)
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <VL53L8CX_Probe+0x108>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	491a      	ldr	r1, [pc, #104]	@ (80020b8 <VL53L8CX_Probe+0x110>)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002054:	4610      	mov	r0, r2
 8002056:	4798      	blx	r3
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <VL53L8CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800205e:	f06f 0304 	mvn.w	r3, #4
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
 8002064:	e012      	b.n	800208c <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance],
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <VL53L8CX_Probe+0x108>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4912      	ldr	r1, [pc, #72]	@ (80020b8 <VL53L8CX_Probe+0x110>)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002074:	4911      	ldr	r1, [pc, #68]	@ (80020bc <VL53L8CX_Probe+0x114>)
 8002076:	4610      	mov	r0, r2
 8002078:	4798      	blx	r3
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <VL53L8CX_Probe+0xe0>
                                                          &VL53L8A1_RANGING_SENSOR_Cap) != VL53L8CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002080:	f06f 0304 	mvn.w	r3, #4
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	e001      	b.n	800208c <VL53L8CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800208e:	4618      	mov	r0, r3
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08001a25 	.word	0x08001a25
 800209c:	08001aa1 	.word	0x08001aa1
 80020a0:	08001af1 	.word	0x08001af1
 80020a4:	08001b55 	.word	0x08001b55
 80020a8:	08001bb9 	.word	0x08001bb9
 80020ac:	200006fc 	.word	0x200006fc
 80020b0:	200006e8 	.word	0x200006e8
 80020b4:	20000010 	.word	0x20000010
 80020b8:	200006dc 	.word	0x200006dc
 80020bc:	200006ec 	.word	0x200006ec

080020c0 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	460b      	mov	r3, r1
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689c      	ldr	r4, [r3, #8]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8818      	ldrh	r0, [r3, #0]
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	2301      	movs	r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	47a0      	blx	r4
 80020de:	4603      	mov	r3, r0
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}

080020ea <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685c      	ldr	r4, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8818      	ldrh	r0, [r3, #0]
 8002102:	1c7a      	adds	r2, r7, #1
 8002104:	8879      	ldrh	r1, [r7, #2]
 8002106:	2301      	movs	r3, #1
 8002108:	47a0      	blx	r4
 800210a:	4603      	mov	r3, r0
 800210c:	b2db      	uxtb	r3, r3
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}

08002116 <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	460b      	mov	r3, r1
 8002124:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685c      	ldr	r4, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8818      	ldrh	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	8979      	ldrh	r1, [r7, #10]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	47a0      	blx	r4
 8002138:	4603      	mov	r3, r0
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689c      	ldr	r4, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8818      	ldrh	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	8979      	ldrh	r1, [r7, #10]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	47a0      	blx	r4
 8002166:	4603      	mov	r3, r0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}

08002172 <VL53L8CX_SwapBuffer>:

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e021      	b.n	80021c8 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3301      	adds	r3, #1
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	440b      	add	r3, r1
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3302      	adds	r3, #2
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	440b      	add	r3, r1
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	3203      	adds	r2, #3
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	440a      	add	r2, r1
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	4313      	orrs	r3, r2
		tmp = (
 80021b6:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3d9      	bcc.n	8002184 <VL53L8CX_SwapBuffer+0x12>
	}
}	
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4798      	blx	r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80021f2:	bf00      	nop
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4798      	blx	r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f5      	bhi.n	80021f4 <VL53L8CX_WaitMs+0x16>

  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <VL53L8CX_RegisterBusIO+0x16>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002228:	f06f 0301 	mvn.w	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e033      	b.n	8002298 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	891a      	ldrh	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	891a      	ldrh	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4798      	blx	r3
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	e002      	b.n	8002298 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80022b0:	f06f 0301 	mvn.w	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e02e      	b.n	8002316 <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e025      	b.n	8002316 <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3318      	adds	r3, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f878 	bl	80033c4 <vl53l8cx_init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e019      	b.n	8002316 <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L8CX_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800232e:	f06f 0301 	mvn.w	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e018      	b.n	8002368 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 800233c:	2b01      	cmp	r3, #1
 800233e:	d110      	bne.n	8002362 <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4798      	blx	r3
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e009      	b.n	8002368 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8002360:	e002      	b.n	8002368 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <VL53L8CX_ReadID+0x22>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002394:	f06f 0301 	mvn.w	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e045      	b.n	8002428 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3318      	adds	r3, #24
 80023a0:	2200      	movs	r2, #0
 80023a2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe9f 	bl	80020ea <VL53L8CX_WrByte>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3318      	adds	r3, #24
 80023ba:	f107 020a 	add.w	r2, r7, #10
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe7d 	bl	80020c0 <VL53L8CX_RdByte>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3318      	adds	r3, #24
 80023d4:	f107 0209 	add.w	r2, r7, #9
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fe70 	bl	80020c0 <VL53L8CX_RdByte>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3318      	adds	r3, #24
 80023ee:	2202      	movs	r2, #2
 80023f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe78 	bl	80020ea <VL53L8CX_WrByte>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	4313      	orrs	r3, r2
 8002402:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800240a:	7abb      	ldrb	r3, [r7, #10]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	7a7a      	ldrb	r2, [r7, #9]
 8002410:	441a      	add	r2, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e005      	b.n	8002428 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002428:	68fb      	ldr	r3, [r7, #12]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <VL53L8CX_GetCapabilities+0x16>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002448:	f06f 0301 	mvn.w	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e00d      	b.n	800246c <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <VL53L8CX_ConfigProfile+0x4c>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 80024a8:	7c7b      	ldrb	r3, [r7, #17]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d822      	bhi.n	80024f6 <VL53L8CX_ConfigProfile+0x7a>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <VL53L8CX_ConfigProfile+0x3c>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024cf 	.word	0x080024cf
 80024bc:	080024d9 	.word	0x080024d9
 80024c0:	080024e3 	.word	0x080024e3
 80024c4:	080024ed 	.word	0x080024ed
    return VL53L8CX_INVALID_PARAM;
 80024c8:	f06f 0301 	mvn.w	r3, #1
 80024cc:	e070      	b.n	80025b0 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80024ce:	2310      	movs	r3, #16
 80024d0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80024d2:	2301      	movs	r3, #1
 80024d4:	74bb      	strb	r3, [r7, #18]
    break;
 80024d6:	e016      	b.n	8002506 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80024d8:	2310      	movs	r3, #16
 80024da:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80024dc:	2303      	movs	r3, #3
 80024de:	74bb      	strb	r3, [r7, #18]
    break;
 80024e0:	e011      	b.n	8002506 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80024e2:	2340      	movs	r3, #64	@ 0x40
 80024e4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80024e6:	2301      	movs	r3, #1
 80024e8:	74bb      	strb	r3, [r7, #18]
    break;
 80024ea:	e00c      	b.n	8002506 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80024ec:	2340      	movs	r3, #64	@ 0x40
 80024ee:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80024f0:	2303      	movs	r3, #3
 80024f2:	74bb      	strb	r3, [r7, #18]
    break;
 80024f4:	e007      	b.n	8002506 <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80024f6:	2300      	movs	r3, #0
 80024f8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80024fa:	2300      	movs	r3, #0
 80024fc:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 80024fe:	f06f 0301 	mvn.w	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
    break;
 8002504:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	e04f      	b.n	80025b0 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3318      	adds	r3, #24
 8002514:	7cfa      	ldrb	r2, [r7, #19]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f002 f9cc 	bl	80048b6 <vl53l8cx_set_resolution>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e040      	b.n	80025ae <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3318      	adds	r3, #24
 8002530:	7cba      	ldrb	r2, [r7, #18]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fae8 	bl	8004b0a <vl53l8cx_set_ranging_mode>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e032      	b.n	80025ae <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3318      	adds	r3, #24
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	4618      	mov	r0, r3
 8002550:	f002 faa6 	bl	8004aa0 <vl53l8cx_set_integration_time_ms>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e025      	b.n	80025ae <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3318      	adds	r3, #24
 8002566:	7afa      	ldrb	r2, [r7, #11]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fa77 	bl	8004a5e <vl53l8cx_set_ranging_frequency_hz>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e017      	b.n	80025ae <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L8CX_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80025ae:	697b      	ldr	r3, [r7, #20]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 80025c2:	f06f 0303 	mvn.w	r3, #3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <VL53L8CX_ConfigIT+0x1a>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80025ee:	f06f 0301 	mvn.w	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e09f      	b.n	8002736 <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2bff      	cmp	r3, #255	@ 0xff
 80025fc:	d113      	bne.n	8002626 <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3318      	adds	r3, #24
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fc2b 	bl	8004e60 <vl53l8cx_set_detection_thresholds_enable>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	7abb      	ldrb	r3, [r7, #10]
 8002610:	4313      	orrs	r3, r2
 8002612:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8002614:	7abb      	ldrb	r3, [r7, #10]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <VL53L8CX_ConfigIT+0x4c>
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e000      	b.n	8002622 <VL53L8CX_ConfigIT+0x4e>
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e087      	b.n	8002736 <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3318      	adds	r3, #24
 800262a:	f107 0209 	add.w	r2, r7, #9
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 f91b 	bl	800486c <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	72fb      	strb	r3, [r7, #11]
 800263a:	e044      	b.n	80026c6 <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 800263c:	7afa      	ldrb	r2, [r7, #11]
 800263e:	4940      	ldr	r1, [pc, #256]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	330a      	adds	r3, #10
 800264c:	7afa      	ldrb	r2, [r7, #11]
 800264e:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8002650:	7afa      	ldrb	r2, [r7, #11]
 8002652:	493b      	ldr	r1, [pc, #236]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3308      	adds	r3, #8
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	7afa      	ldrb	r2, [r7, #11]
 800266a:	b2d8      	uxtb	r0, r3
 800266c:	4934      	ldr	r1, [pc, #208]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3309      	adds	r3, #9
 800267a:	4602      	mov	r2, r0
 800267c:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 800267e:	7afa      	ldrb	r2, [r7, #11]
 8002680:	492f      	ldr	r1, [pc, #188]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	330b      	adds	r3, #11
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	7afa      	ldrb	r2, [r7, #11]
 8002698:	4618      	mov	r0, r3
 800269a:	4929      	ldr	r1, [pc, #164]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	7afa      	ldrb	r2, [r7, #11]
 80026ae:	4618      	mov	r0, r3
 80026b0:	4923      	ldr	r1, [pc, #140]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3304      	adds	r3, #4
 80026be:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	3301      	adds	r3, #1
 80026c4:	72fb      	strb	r3, [r7, #11]
 80026c6:	7a7b      	ldrb	r3, [r7, #9]
 80026c8:	7afa      	ldrb	r2, [r7, #11]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d3b6      	bcc.n	800263c <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 80026ce:	7afa      	ldrb	r2, [r7, #11]
 80026d0:	491b      	ldr	r1, [pc, #108]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	330a      	adds	r3, #10
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	7afa      	ldrb	r2, [r7, #11]
 80026e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026e6:	b2d8      	uxtb	r0, r3
 80026e8:	4915      	ldr	r1, [pc, #84]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	330a      	adds	r3, #10
 80026f6:	4602      	mov	r2, r0
 80026f8:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3318      	adds	r3, #24
 80026fe:	4910      	ldr	r1, [pc, #64]	@ (8002740 <VL53L8CX_ConfigIT+0x16c>)
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fbf3 	bl	8004eec <vl53l8cx_set_detection_thresholds>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	7abb      	ldrb	r3, [r7, #10]
 800270c:	4313      	orrs	r3, r2
 800270e:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3318      	adds	r3, #24
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fba2 	bl	8004e60 <vl53l8cx_set_detection_thresholds_enable>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	7abb      	ldrb	r3, [r7, #10]
 8002722:	4313      	orrs	r3, r2
 8002724:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8002726:	7abb      	ldrb	r3, [r7, #10]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <VL53L8CX_ConfigIT+0x15e>
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	e000      	b.n	8002734 <VL53L8CX_ConfigIT+0x160>
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000279c 	.word	0x2000279c

08002744 <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L8CX_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <VL53L8CX_GetDistance+0x1a>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <VL53L8CX_GetDistance+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800275e:	f06f 0301 	mvn.w	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e007      	b.n	8002776 <VL53L8CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <VL53L8CX_GetDistance+0x32>
  {
    ret = VL53L8CX_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	60fb      	str	r3, [r7, #12]
  }

  if (ret == VL53L8CX_OK)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d110      	bne.n	800279e <VL53L8CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8002782:	2b01      	cmp	r3, #1
 8002784:	d106      	bne.n	8002794 <VL53L8CX_GetDistance+0x50>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 8002786:	f241 3188 	movw	r1, #5000	@ 0x1388
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f939 	bl	8002a02 <vl53l8cx_poll_for_measurement>
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	e004      	b.n	800279e <VL53L8CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f933 	bl	8002a02 <vl53l8cx_poll_for_measurement>
 800279c:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <VL53L8CX_GetDistance+0x6a>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f95e 	bl	8002a68 <vl53l8cx_get_result>
 80027ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80027c8:	f06f 0301 	mvn.w	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e04c      	b.n	800286a <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3318      	adds	r3, #24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fb8b 	bl	8003ef0 <vl53l8cx_start_ranging>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d141      	bne.n	8002864 <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d82f      	bhi.n	8002854 <VL53L8CX_Start+0x9c>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <VL53L8CX_Start+0x44>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	0800281f 	.word	0x0800281f
 8002804:	08002831 	.word	0x08002831
 8002808:	08002843 	.word	0x08002843
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 800281c:	e025      	b.n	800286a <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 800282e:	e01c      	b.n	800286a <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8002840:	e013      	b.n	800286a <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8002852:	e00a      	b.n	800286a <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L8CX_INVALID_PARAM;
 800285c:	f06f 0301 	mvn.w	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
        break;
 8002862:	e002      	b.n	800286a <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002882:	f06f 0301 	mvn.w	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e01a      	b.n	80028c0 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e011      	b.n	80028c0 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3318      	adds	r3, #24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fcbb 	bl	800421c <vl53l8cx_stop_ranging>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e002      	b.n	80028c0 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80028da:	f06f 0301 	mvn.w	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e015      	b.n	800290e <VL53L8CX_SetAddress+0x44>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3318      	adds	r3, #24
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f995 	bl	8003c1c <vl53l8cx_set_i2c_address>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <VL53L8CX_SetAddress+0x36>
  {
    ret = VL53L8CX_ERROR;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e006      	b.n	800290e <VL53L8CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <VL53L8CX_GetAddress+0x16>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800292e:	f06f 0301 	mvn.w	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e006      	b.n	8002944 <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	891b      	ldrh	r3, [r3, #8]
 800293a:	461a      	mov	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002944:	68fb      	ldr	r3, [r7, #12]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002962:	f06f 0301 	mvn.w	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e01a      	b.n	80029a0 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <VL53L8CX_SetPowerMode+0x2c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d003      	beq.n	800297e <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002976:	f06f 0301 	mvn.w	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e010      	b.n	80029a0 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3318      	adds	r3, #24
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f001 f9d3 	bl	8003d34 <vl53l8cx_set_power_mode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e001      	b.n	80029a0 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029a0:	68fb      	ldr	r3, [r7, #12]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <VL53L8CX_GetPowerMode+0x16>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80029c0:	f06f 0301 	mvn.w	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e017      	b.n	80029f8 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3318      	adds	r3, #24
 80029cc:	f107 020b 	add.w	r2, r7, #11
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f958 	bl	8003c88 <vl53l8cx_get_power_mode>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e005      	b.n	80029f8 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	461a      	mov	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002a16:	f06f 0301 	mvn.w	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e01f      	b.n	8002a5e <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 8002a1e:	f06f 0302 	mvn.w	r3, #2
 8002a22:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	4798      	blx	r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3318      	adds	r3, #24
 8002a32:	f107 020f 	add.w	r2, r7, #15
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fcbf 	bl	80043bc <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
        break;
 8002a48:	e009      	b.n	8002a5e <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4798      	blx	r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d8e7      	bhi.n	8002a2e <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 8002a5e:	697b      	ldr	r3, [r7, #20]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <vl53l8cx_get_result+0x16>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d103      	bne.n	8002a86 <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002a7e:	f06f 0301 	mvn.w	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e0cf      	b.n	8002c26 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3318      	adds	r3, #24
 8002a8a:	f107 0208 	add.w	r2, r7, #8
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 feeb 	bl	800486c <vl53l8cx_get_resolution>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e0c0      	b.n	8002c26 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	4961      	ldr	r1, [pc, #388]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fcd6 	bl	800445c <vl53l8cx_get_ranging_data>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e0b3      	b.n	8002c26 <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8002abe:	7a3b      	ldrb	r3, [r7, #8]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	72fb      	strb	r3, [r7, #11]
 8002aca:	e0a5      	b.n	8002c18 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8002acc:	7afb      	ldrb	r3, [r7, #11]
 8002ace:	7afa      	ldrb	r2, [r7, #11]
 8002ad0:	4957      	ldr	r1, [pc, #348]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	72bb      	strb	r3, [r7, #10]
 8002aee:	e087      	b.n	8002c00 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002af0:	7afa      	ldrb	r2, [r7, #11]
 8002af2:	7abb      	ldrb	r3, [r7, #10]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002af8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b04:	7afa      	ldrb	r2, [r7, #11]
 8002b06:	7ab8      	ldrb	r0, [r7, #10]
 8002b08:	461c      	mov	r4, r3
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	4403      	add	r3, r0
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d116      	bne.n	8002b52 <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	4a42      	ldr	r2, [pc, #264]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	7afa      	ldrb	r2, [r7, #11]
 8002b30:	7ab8      	ldrb	r0, [r7, #10]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	4403      	add	r3, r0
 8002b44:	3302      	adds	r3, #2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
 8002b50:	e00d      	b.n	8002b6e <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8002b52:	7afa      	ldrb	r2, [r7, #11]
 8002b54:	7ab8      	ldrb	r0, [r7, #10]
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4403      	add	r3, r0
 8002b60:	3302      	adds	r3, #2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3308      	adds	r3, #8
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d119      	bne.n	8002bac <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002b78:	7afa      	ldrb	r2, [r7, #11]
 8002b7a:	7abb      	ldrb	r3, [r7, #10]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002b80:	3390      	adds	r3, #144	@ 0x90
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8002b88:	7afa      	ldrb	r2, [r7, #11]
 8002b8a:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4403      	add	r3, r0
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
 8002baa:	e00d      	b.n	8002bc8 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8002bac:	7afa      	ldrb	r2, [r7, #11]
 8002bae:	7ab8      	ldrb	r0, [r7, #10]
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4403      	add	r3, r0
 8002bba:	3304      	adds	r3, #4
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002bc8:	7afa      	ldrb	r2, [r7, #11]
 8002bca:	7abb      	ldrb	r3, [r7, #10]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8002bd6:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 8002bd8:	7a7b      	ldrb	r3, [r7, #9]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f82a 	bl	8002c34 <vl53l8cx_map_target_status>
 8002be0:	4603      	mov	r3, r0
 8002be2:	7afa      	ldrb	r2, [r7, #11]
 8002be4:	7ab8      	ldrb	r0, [r7, #10]
 8002be6:	461c      	mov	r4, r3
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	4403      	add	r3, r0
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8002bfa:	7abb      	ldrb	r3, [r7, #10]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	72bb      	strb	r3, [r7, #10]
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <vl53l8cx_get_result+0x1c8>)
 8002c04:	4413      	add	r3, r2
 8002c06:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002c0a:	7aba      	ldrb	r2, [r7, #10]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f4ff af6f 	bcc.w	8002af0 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	3301      	adds	r3, #1
 8002c16:	72fb      	strb	r3, [r7, #11]
 8002c18:	7a3b      	ldrb	r3, [r7, #8]
 8002c1a:	7afa      	ldrb	r2, [r7, #11]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f4ff af55 	bcc.w	8002acc <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}
 8002c30:	20002a9c 	.word	0x20002a9c

08002c34 <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d002      	beq.n	8002c4a <vl53l8cx_map_target_status+0x16>
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d102      	bne.n	8002c50 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e007      	b.n	8002c60 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8002c56:	23ff      	movs	r3, #255	@ 0xff
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e001      	b.n	8002c60 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	4608      	mov	r0, r1
 8002c78:	4611      	mov	r1, r2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	70fb      	strb	r3, [r7, #3]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70bb      	strb	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8002c90:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	8839      	ldrh	r1, [r7, #0]
 8002c9c:	f7ff fa52 	bl	8002144 <VL53L8CX_RdMulti>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	210a      	movs	r1, #10
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fa95 	bl	80021de <VL53L8CX_WaitMs>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cc2:	d904      	bls.n	8002cce <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
			break;
 8002ccc:	e01a      	b.n	8002d04 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d909      	bls.n	8002ce8 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8002cda:	2b7e      	cmp	r3, #126	@ 0x7e
 8002cdc:	d904      	bls.n	8002ce8 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002ce4:	73fb      	strb	r3, [r7, #15]
			break;
 8002ce6:	e00d      	b.n	8002d04 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	3301      	adds	r3, #1
 8002cec:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8002cee:	78bb      	ldrb	r3, [r7, #2]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002cf8:	7e3b      	ldrb	r3, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	7f3a      	ldrb	r2, [r7, #28]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1c5      	bne.n	8002c90 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f107 020b 	add.w	r2, r7, #11
 8002d24:	2106      	movs	r1, #6
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f9ca 	bl	80020c0 <VL53L8CX_RdByte>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da10      	bge.n	8002d60 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f107 020a 	add.w	r2, r7, #10
 8002d44:	2107      	movs	r1, #7
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f9ba 	bl	80020c0 <VL53L8CX_RdByte>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8002d56:	7abb      	ldrb	r3, [r7, #10]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d111      	bne.n	8002d84 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fa3a 	bl	80021de <VL53L8CX_WaitMs>
		timeout++;
 8002d6a:	89bb      	ldrh	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d80:	d3cd      	bcc.n	8002d1e <_vl53l8cx_poll_for_mcu_boot+0x10>
 8002d82:	e002      	b.n	8002d8a <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8002d84:	bf00      	nop
 8002d86:	e000      	b.n	8002d8a <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8002d88:	bf00      	nop

   return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0ea      	sub	sp, #424	@ 0x1a8
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002da2:	6018      	str	r0, [r3, #0]
 8002da4:	460a      	mov	r2, r1
 8002da6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002daa:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002dae:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8002db6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002dba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dbe:	4ad9      	ldr	r2, [pc, #868]	@ (8003124 <_vl53l8cx_send_offset_data+0x390>)
 8002dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dc4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8002dc8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002dcc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002dd0:	4ad5      	ldr	r2, [pc, #852]	@ (8003128 <_vl53l8cx_send_offset_data+0x394>)
 8002dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8002dda:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002dde:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8002de8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002dec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8002df4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f006 fa7a 	bl	80092f2 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 8002dfe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e02:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	f040 8122 	bne.w	8003052 <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8002e0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e12:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 8002e1c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e20:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e24:	cb03      	ldmia	r3!, {r0, r1}
 8002e26:	6010      	str	r0, [r2, #0]
 8002e28:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8002e2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002e38:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f998 	bl	8002172 <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8002e42:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e46:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8002e50:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f006 fa4a 	bl	80092f2 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8002e5e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e62:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	4618      	mov	r0, r3
 8002e74:	f006 fa3d 	bl	80092f2 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002e7e:	e0ac      	b.n	8002fda <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002e86:	e09c      	b.n	8002fc2 <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002e88:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002e8c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	005a      	lsls	r2, r3, #1
 8002e96:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8002ea2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002ea6:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	1c59      	adds	r1, r3, #1
 8002eb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002eba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ebe:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002ec0:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002ec4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3304      	adds	r3, #4
 8002ece:	0059      	lsls	r1, r3, #1
 8002ed0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ed8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002edc:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8002ede:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002ee2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	f103 0109 	add.w	r1, r3, #9
 8002ef0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002efc:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002efe:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002f02:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8002f0a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002f0c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002f18:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002f1c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	005a      	lsls	r2, r3, #1
 8002f26:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f2e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f32:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8002f34:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002f38:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f50:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8002f52:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002f56:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002f5a:	00d2      	lsls	r2, r2, #3
 8002f5c:	440a      	add	r2, r1
 8002f5e:	3204      	adds	r2, #4
 8002f60:	0051      	lsls	r1, r2, #1
 8002f62:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002f66:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002f6a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002f6e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002f70:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002f74:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002f78:	00d2      	lsls	r2, r2, #3
 8002f7a:	440a      	add	r2, r1
 8002f7c:	0052      	lsls	r2, r2, #1
 8002f7e:	f102 0109 	add.w	r1, r2, #9
 8002f82:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002f86:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002f8a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002f8e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da00      	bge.n	8002f96 <_vl53l8cx_send_offset_data+0x202>
 8002f94:	3303      	adds	r3, #3
 8002f96:	109b      	asrs	r3, r3, #2
 8002f98:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8002f9a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002f9e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	b209      	sxth	r1, r1
 8002fa8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002fac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8002fb4:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002fc2:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	f77f af5e 	ble.w	8002e88 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8002fcc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002fda:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	f77f af4e 	ble.w	8002e80 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8002fe4:	f107 0318 	add.w	r3, r7, #24
 8002fe8:	3320      	adds	r3, #32
 8002fea:	2260      	movs	r2, #96	@ 0x60
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 f904 	bl	80091fc <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8002ff4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002ff8:	3340      	adds	r3, #64	@ 0x40
 8002ffa:	22c0      	movs	r2, #192	@ 0xc0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 f8fc 	bl	80091fc <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8003004:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003008:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 8003012:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003016:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800301a:	4618      	mov	r0, r3
 800301c:	f006 f969 	bl	80092f2 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8003020:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003024:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800302e:	f107 0118 	add.w	r1, r7, #24
 8003032:	2280      	movs	r2, #128	@ 0x80
 8003034:	4618      	mov	r0, r3
 8003036:	f006 f95c 	bl	80092f2 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 800303a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800303e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003048:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f890 	bl	8002172 <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003052:	2300      	movs	r3, #0
 8003054:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003058:	e01b      	b.n	8003092 <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800305a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800305e:	f103 0208 	add.w	r2, r3, #8
 8003062:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003066:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800306a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 800306e:	6809      	ldr	r1, [r1, #0]
 8003070:	440a      	add	r2, r1
 8003072:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 8003076:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800307a:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4413      	add	r3, r2
 8003082:	460a      	mov	r2, r1
 8003084:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003088:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800308c:	3301      	adds	r3, #1
 800308e:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003092:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003096:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800309a:	d3de      	bcc.n	800305a <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800309c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030a0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 80030aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80030b2:	cb03      	ldmia	r3!, {r0, r1}
 80030b4:	6010      	str	r0, [r2, #0]
 80030b6:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80030b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80030d0:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80030d4:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80030d8:	f7ff f81d 	bl	8002116 <VL53L8CX_WrMulti>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80030ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030ee:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80030f2:	2303      	movs	r3, #3
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	23ff      	movs	r3, #255	@ 0xff
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80030fe:	2201      	movs	r2, #1
 8003100:	2104      	movs	r1, #4
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	f7ff fdb3 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003110:	4313      	orrs	r3, r2
 8003112:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003116:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 800311a:	4618      	mov	r0, r3
 800311c:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	0800a180 	.word	0x0800a180
 8003128:	0800a188 	.word	0x0800a188

0800312c <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0ca      	sub	sp, #296	@ 0x128
 8003130:	af02      	add	r7, sp, #8
 8003132:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003136:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800313a:	6018      	str	r0, [r3, #0]
 800313c:	460a      	mov	r2, r1
 800313e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003142:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003146:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800314e:	4a9a      	ldr	r2, [pc, #616]	@ (80033b8 <_vl53l8cx_send_xtalk_data+0x28c>)
 8003150:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003158:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800315c:	4a97      	ldr	r2, [pc, #604]	@ (80033bc <_vl53l8cx_send_xtalk_data+0x290>)
 800315e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003166:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800316a:	4b95      	ldr	r3, [pc, #596]	@ (80033c0 <_vl53l8cx_send_xtalk_data+0x294>)
 800316c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8003170:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003174:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 800317e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003182:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800318c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8003190:	4619      	mov	r1, r3
 8003192:	f006 f8ae 	bl	80092f2 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8003196:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800319a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	f040 80d2 	bne.w	800334a <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80031a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80031b4:	461a      	mov	r2, r3
 80031b6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80031ba:	cb03      	ldmia	r3!, {r0, r1}
 80031bc:	6010      	str	r0, [r2, #0]
 80031be:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80031c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 80031ce:	461a      	mov	r2, r3
 80031d0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031d4:	cb03      	ldmia	r3!, {r0, r1}
 80031d6:	6010      	str	r0, [r2, #0]
 80031d8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80031da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80031e8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe ffc0 	bl	8002172 <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80031f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003208:	4618      	mov	r0, r3
 800320a:	f006 f872 	bl	80092f2 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800320e:	2300      	movs	r3, #0
 8003210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003214:	e05d      	b.n	80032d2 <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800321c:	e04e      	b.n	80032bc <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800321e:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8003222:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003230:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8003238:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800323c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800324c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003254:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8003256:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800325a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3304      	adds	r3, #4
 8003264:	0059      	lsls	r1, r3, #1
 8003266:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800326a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800326e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003272:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003274:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003278:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	f103 0109 	add.w	r1, r3, #9
 8003286:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800328a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800328e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003292:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003294:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003298:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80032a0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80032a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80032a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80032ae:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80032bc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	ddac      	ble.n	800321e <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80032c4:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80032d2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	dd9d      	ble.n	8003216 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	3340      	adds	r3, #64	@ 0x40
 80032e0:	22c0      	movs	r2, #192	@ 0xc0
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f005 ff89 	bl	80091fc <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80032ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80032ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80032f8:	f107 0108 	add.w	r1, r7, #8
 80032fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003300:	4618      	mov	r0, r3
 8003302:	f005 fff6 	bl	80092f2 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8003306:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800330a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003314:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ff2a 	bl	8002172 <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800331e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003322:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800332c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003330:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8003332:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003336:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8003340:	2204      	movs	r2, #4
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f005 ff59 	bl	80091fc <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800334a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800334e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003352:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8003354:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003358:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8003362:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003366:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800336a:	f7fe fed4 	bl	8002116 <VL53L8CX_WrMulti>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003376:	4313      	orrs	r3, r2
 8003378:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800337c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003380:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8003384:	2303      	movs	r3, #3
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	23ff      	movs	r3, #255	@ 0xff
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003390:	2201      	movs	r2, #1
 8003392:	2104      	movs	r1, #4
 8003394:	6800      	ldr	r0, [r0, #0]
 8003396:	f7ff fc6a 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80033a8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	0800a190 	.word	0x0800a190
 80033bc:	0800a198 	.word	0x0800a198
 80033c0:	0001fca0 	.word	0x0001fca0

080033c4 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80033d0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80033d4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a80      	ldr	r2, [pc, #512]	@ (80035e4 <vl53l8cx_init+0x220>)
 80033e2:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a80      	ldr	r2, [pc, #512]	@ (80035e8 <vl53l8cx_init+0x224>)
 80033e8:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fe75 	bl	80020ea <VL53L8CX_WrByte>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	4313      	orrs	r3, r2
 8003408:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2204      	movs	r2, #4
 800340e:	2109      	movs	r1, #9
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fe6a 	bl	80020ea <VL53L8CX_WrByte>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	4313      	orrs	r3, r2
 800341e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2240      	movs	r2, #64	@ 0x40
 8003424:	210f      	movs	r1, #15
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fe5f 	bl	80020ea <VL53L8CX_WrByte>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	4313      	orrs	r3, r2
 8003434:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	210a      	movs	r1, #10
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fe54 	bl	80020ea <VL53L8CX_WrByte>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	4313      	orrs	r3, r2
 800344a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f107 0216 	add.w	r2, r7, #22
 8003452:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fe32 	bl	80020c0 <VL53L8CX_RdByte>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	4313      	orrs	r3, r2
 8003464:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	210c      	movs	r1, #12
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fe3c 	bl	80020ea <VL53L8CX_WrByte>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	4313      	orrs	r3, r2
 800347a:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f240 1101 	movw	r1, #257	@ 0x101
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fe30 	bl	80020ea <VL53L8CX_WrByte>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	4313      	orrs	r3, r2
 8003492:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fe24 	bl	80020ea <VL53L8CX_WrByte>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fe18 	bl	80020ea <VL53L8CX_WrByte>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fe0c 	bl	80020ea <VL53L8CX_WrByte>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	4313      	orrs	r3, r2
 80034da:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fe00 	bl	80020ea <VL53L8CX_WrByte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fdf4 	bl	80020ea <VL53L8CX_WrByte>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	4313      	orrs	r3, r2
 800350a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f240 1103 	movw	r1, #259	@ 0x103
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fde8 	bl	80020ea <VL53L8CX_WrByte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	4313      	orrs	r3, r2
 8003522:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	210c      	movs	r1, #12
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fddd 	bl	80020ea <VL53L8CX_WrByte>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	4313      	orrs	r3, r2
 8003538:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2243      	movs	r2, #67	@ 0x43
 800353e:	210f      	movs	r1, #15
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fdd2 	bl	80020ea <VL53L8CX_WrByte>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	4313      	orrs	r3, r2
 800354e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe42 	bl	80021de <VL53L8CX_WaitMs>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	4313      	orrs	r3, r2
 8003562:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	210f      	movs	r1, #15
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fdbd 	bl	80020ea <VL53L8CX_WrByte>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	4313      	orrs	r3, r2
 8003578:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	210a      	movs	r1, #10
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fdb2 	bl	80020ea <VL53L8CX_WrByte>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	4313      	orrs	r3, r2
 800358e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2164      	movs	r1, #100	@ 0x64
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fe22 	bl	80021de <VL53L8CX_WaitMs>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fd9c 	bl	80020ea <VL53L8CX_WrByte>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80035bc:	2301      	movs	r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	23ff      	movs	r3, #255	@ 0xff
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2306      	movs	r3, #6
 80035c6:	2200      	movs	r2, #0
 80035c8:	2101      	movs	r1, #1
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fb4f 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 8309 	bne.w	8003bf4 <vl53l8cx_init+0x830>
 80035e2:	e003      	b.n	80035ec <vl53l8cx_init+0x228>
 80035e4:	0801f7a0 	.word	0x0801f7a0
 80035e8:	0801f3d4 	.word	0x0801f3d4
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	210e      	movs	r1, #14
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fd79 	bl	80020ea <VL53L8CX_WrByte>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	4313      	orrs	r3, r2
 8003600:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fd6d 	bl	80020ea <VL53L8CX_WrByte>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	4313      	orrs	r3, r2
 8003618:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fd61 	bl	80020ea <VL53L8CX_WrByte>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	4313      	orrs	r3, r2
 8003630:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	2106      	movs	r1, #6
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fd56 	bl	80020ea <VL53L8CX_WrByte>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	4313      	orrs	r3, r2
 8003646:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8003648:	2304      	movs	r3, #4
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	23ff      	movs	r3, #255	@ 0xff
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2321      	movs	r3, #33	@ 0x21
 8003652:	2200      	movs	r2, #0
 8003654:	2101      	movs	r1, #1
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fb09 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	4313      	orrs	r3, r2
 8003664:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fd3b 	bl	80020ea <VL53L8CX_WrByte>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	4313      	orrs	r3, r2
 800367c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f107 0216 	add.w	r2, r7, #22
 8003684:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fd19 	bl	80020c0 <VL53L8CX_RdByte>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	4313      	orrs	r3, r2
 8003696:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	210c      	movs	r1, #12
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fd23 	bl	80020ea <VL53L8CX_WrByte>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fd17 	bl	80020ea <VL53L8CX_WrByte>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f240 1101 	movw	r1, #257	@ 0x101
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fd0b 	bl	80020ea <VL53L8CX_WrByte>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	4313      	orrs	r3, r2
 80036dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fcff 	bl	80020ea <VL53L8CX_WrByte>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fcf3 	bl	80020ea <VL53L8CX_WrByte>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	4313      	orrs	r3, r2
 800370c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fce7 	bl	80020ea <VL53L8CX_WrByte>
 800371c:	4603      	mov	r3, r0
 800371e:	461a      	mov	r2, r3
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	4313      	orrs	r3, r2
 8003724:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fcdb 	bl	80020ea <VL53L8CX_WrByte>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	4313      	orrs	r3, r2
 800373c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fccf 	bl	80020ea <VL53L8CX_WrByte>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	4313      	orrs	r3, r2
 8003754:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f240 1103 	movw	r1, #259	@ 0x103
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fcc3 	bl	80020ea <VL53L8CX_WrByte>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	4313      	orrs	r3, r2
 800376c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f244 010f 	movw	r1, #16399	@ 0x400f
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fcb7 	bl	80020ea <VL53L8CX_WrByte>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	4313      	orrs	r3, r2
 8003784:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2243      	movs	r2, #67	@ 0x43
 800378a:	f240 211a 	movw	r1, #538	@ 0x21a
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe fcab 	bl	80020ea <VL53L8CX_WrByte>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	4313      	orrs	r3, r2
 800379c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2203      	movs	r2, #3
 80037a2:	f240 211a 	movw	r1, #538	@ 0x21a
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fc9f 	bl	80020ea <VL53L8CX_WrByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f240 211a 	movw	r1, #538	@ 0x21a
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fc93 	bl	80020ea <VL53L8CX_WrByte>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f240 211a 	movw	r1, #538	@ 0x21a
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fc87 	bl	80020ea <VL53L8CX_WrByte>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f240 2119 	movw	r1, #537	@ 0x219
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fc7b 	bl	80020ea <VL53L8CX_WrByte>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f240 211b 	movw	r1, #539	@ 0x21b
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fc6f 	bl	80020ea <VL53L8CX_WrByte>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	4313      	orrs	r3, r2
 8003814:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fc63 	bl	80020ea <VL53L8CX_WrByte>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	4313      	orrs	r3, r2
 800382c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f107 0216 	add.w	r2, r7, #22
 8003834:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fc41 	bl	80020c0 <VL53L8CX_RdByte>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	4313      	orrs	r3, r2
 8003846:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fc4a 	bl	80020ea <VL53L8CX_WrByte>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	4313      	orrs	r3, r2
 800385e:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2209      	movs	r2, #9
 8003864:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fc3e 	bl	80020ea <VL53L8CX_WrByte>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	4313      	orrs	r3, r2
 8003876:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387e:	4ade      	ldr	r2, [pc, #888]	@ (8003bf8 <vl53l8cx_init+0x834>)
 8003880:	2100      	movs	r1, #0
 8003882:	f7fe fc48 	bl	8002116 <VL53L8CX_WrMulti>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	4313      	orrs	r3, r2
 800388e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	220a      	movs	r2, #10
 8003894:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fc26 	bl	80020ea <VL53L8CX_WrByte>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ae:	4ad3      	ldr	r2, [pc, #844]	@ (8003bfc <vl53l8cx_init+0x838>)
 80038b0:	2100      	movs	r1, #0
 80038b2:	f7fe fc30 	bl	8002116 <VL53L8CX_WrMulti>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	4313      	orrs	r3, r2
 80038be:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	220b      	movs	r2, #11
 80038c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fc0e 	bl	80020ea <VL53L8CX_WrByte>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80038de:	4ac8      	ldr	r2, [pc, #800]	@ (8003c00 <vl53l8cx_init+0x83c>)
 80038e0:	2100      	movs	r1, #0
 80038e2:	f7fe fc18 	bl	8002116 <VL53L8CX_WrMulti>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fbf6 	bl	80020ea <VL53L8CX_WrByte>
 80038fe:	4603      	mov	r3, r0
 8003900:	461a      	mov	r2, r3
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	4313      	orrs	r3, r2
 8003906:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fbea 	bl	80020ea <VL53L8CX_WrByte>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	4313      	orrs	r3, r2
 800391e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2203      	movs	r2, #3
 8003924:	2106      	movs	r1, #6
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fbdf 	bl	80020ea <VL53L8CX_WrByte>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	4313      	orrs	r3, r2
 8003934:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2105      	movs	r1, #5
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fc4f 	bl	80021de <VL53L8CX_WaitMs>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	4313      	orrs	r3, r2
 8003948:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fbc9 	bl	80020ea <VL53L8CX_WrByte>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	4313      	orrs	r3, r2
 8003960:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f107 0216 	add.w	r2, r7, #22
 8003968:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fba7 	bl	80020c0 <VL53L8CX_RdByte>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	4313      	orrs	r3, r2
 800397a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	210c      	movs	r1, #12
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fbb1 	bl	80020ea <VL53L8CX_WrByte>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	4313      	orrs	r3, r2
 8003990:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fba5 	bl	80020ea <VL53L8CX_WrByte>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fb99 	bl	80020ea <VL53L8CX_WrByte>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	4313      	orrs	r3, r2
 80039c0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f240 1115 	movw	r1, #277	@ 0x115
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fb8d 	bl	80020ea <VL53L8CX_WrByte>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2242      	movs	r2, #66	@ 0x42
 80039de:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fb81 	bl	80020ea <VL53L8CX_WrByte>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f240 1117 	movw	r1, #279	@ 0x117
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fb75 	bl	80020ea <VL53L8CX_WrByte>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	210b      	movs	r1, #11
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fb6a 	bl	80020ea <VL53L8CX_WrByte>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f107 0216 	add.w	r2, r7, #22
 8003a26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fb48 	bl	80020c0 <VL53L8CX_RdByte>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	210c      	movs	r1, #12
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fb52 	bl	80020ea <VL53L8CX_WrByte>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	210b      	movs	r1, #11
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fb47 	bl	80020ea <VL53L8CX_WrByte>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff f951 	bl	8002d0e <_vl53l8cx_poll_for_mcu_boot>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 80c9 	bne.w	8003c10 <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fb2f 	bl	80020ea <VL53L8CX_WrByte>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8003a96:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003aa4:	f7fe fb4e 	bl	8002144 <VL53L8CX_RdMulti>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fb59 	bl	8002172 <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c04 <vl53l8cx_init+0x840>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	f043 0305 	orr.w	r3, r3, #5
 8003ad8:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8003ada:	e09a      	b.n	8003c12 <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	2328      	movs	r3, #40	@ 0x28
 8003ae0:	4a49      	ldr	r2, [pc, #292]	@ (8003c08 <vl53l8cx_init+0x844>)
 8003ae2:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8003ae6:	f7fe fb16 	bl	8002116 <VL53L8CX_WrMulti>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8003af4:	2302      	movs	r3, #2
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	23ff      	movs	r3, #255	@ 0xff
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003b00:	2200      	movs	r2, #0
 8003b02:	2104      	movs	r1, #4
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff f8b2 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8003b14:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8003b1c:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8003b20:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003b24:	f7fe fb0e 	bl	8002144 <VL53L8CX_RdMulti>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f103 0020 	add.w	r0, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b3e:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003b42:	4619      	mov	r1, r3
 8003b44:	f005 fbd5 	bl	80092f2 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8003b48:	2110      	movs	r1, #16
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff f922 	bl	8002d94 <_vl53l8cx_send_offset_data>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b60:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <vl53l8cx_init+0x848>)
 8003b62:	4618      	mov	r0, r3
 8003b64:	4611      	mov	r1, r2
 8003b66:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f005 fbc1 	bl	80092f2 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8003b70:	2110      	movs	r1, #16
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fada 	bl	800312c <_vl53l8cx_send_xtalk_data>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003b8c:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003b90:	f7fe fac1 	bl	8002116 <VL53L8CX_WrMulti>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	23ff      	movs	r3, #255	@ 0xff
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003baa:	2201      	movs	r2, #1
 8003bac:	2104      	movs	r1, #4
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff f85d 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8003bbe:	f107 0110 	add.w	r1, r7, #16
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 f87f 	bl	8004ccc <vl53l8cx_dci_write_data>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003bd8:	f107 010c 	add.w	r1, r7, #12
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f872 	bl	8004ccc <vl53l8cx_dci_write_data>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	75fb      	strb	r3, [r7, #23]
 8003bf2:	e00e      	b.n	8003c12 <vl53l8cx_init+0x84e>
		goto exit;
 8003bf4:	bf00      	nop
 8003bf6:	e00c      	b.n	8003c12 <vl53l8cx_init+0x84e>
 8003bf8:	0800a3d4 	.word	0x0800a3d4
 8003bfc:	080123d4 	.word	0x080123d4
 8003c00:	0801a3d4 	.word	0x0801a3d4
 8003c04:	0c0b6c9e 	.word	0x0c0b6c9e
 8003c08:	0801faa8 	.word	0x0801faa8
 8003c0c:	0801f7a0 	.word	0x0801f7a0
		goto exit;
 8003c10:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fa58 	bl	80020ea <VL53L8CX_WrByte>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2104      	movs	r1, #4
 8003c52:	f7fe fa4a 	bl	80020ea <VL53L8CX_WrByte>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	801a      	strh	r2, [r3, #0]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fa3b 	bl	80020ea <VL53L8CX_WrByte>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	73fb      	strb	r3, [r7, #15]

	return status;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fa23 	bl	80020ea <VL53L8CX_WrByte>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f107 020e 	add.w	r2, r7, #14
 8003cb4:	2109      	movs	r1, #9
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fa02 	bl	80020c0 <VL53L8CX_RdByte>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d005      	beq.n	8003cd8 <vl53l8cx_get_power_mode+0x50>
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11a      	bne.n	8003d06 <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
			break;
 8003cd6:	e01c      	b.n	8003d12 <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f107 020e 	add.w	r2, r7, #14
 8003cde:	210f      	movs	r1, #15
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe f9ed 	bl	80020c0 <VL53L8CX_RdByte>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	2b43      	cmp	r3, #67	@ 0x43
 8003cf4:	d103      	bne.n	8003cfe <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 8003cfc:	e009      	b.n	8003d12 <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
			break;
 8003d04:	e005      	b.n	8003d12 <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8003d0c:	23ff      	movs	r3, #255	@ 0xff
 8003d0e:	73fb      	strb	r3, [r7, #15]
			break;
 8003d10:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f9e5 	bl	80020ea <VL53L8CX_WrByte>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	73fb      	strb	r3, [r7, #15]

	return status;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 8003d44:	f107 030e 	add.w	r3, r7, #14
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff9c 	bl	8003c88 <vl53l8cx_get_power_mode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f000 80c0 	beq.w	8003ee4 <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d07a      	beq.n	8003e60 <vl53l8cx_set_power_mode+0x12c>
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f300 80aa 	bgt.w	8003ec4 <vl53l8cx_set_power_mode+0x190>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d04e      	beq.n	8003e12 <vl53l8cx_set_power_mode+0xde>
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 80a5 	bne.w	8003ec4 <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f9b1 	bl	80020ea <VL53L8CX_WrByte>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	2109      	movs	r1, #9
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe f9a6 	bl	80020ea <VL53L8CX_WrByte>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461a      	mov	r2, r3
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f107 020d 	add.w	r2, r7, #13
 8003dae:	210f      	movs	r1, #15
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe f985 	bl	80020c0 <VL53L8CX_RdByte>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8003dc0:	7b7b      	ldrb	r3, [r7, #13]
 8003dc2:	2b43      	cmp	r3, #67	@ 0x43
 8003dc4:	d10a      	bne.n	8003ddc <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2240      	movs	r2, #64	@ 0x40
 8003dca:	210f      	movs	r1, #15
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe f98c 	bl	80020ea <VL53L8CX_WrByte>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 8003ddc:	2301      	movs	r3, #1
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2301      	movs	r3, #1
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2306      	movs	r3, #6
 8003de6:	2200      	movs	r2, #0
 8003de8:	2101      	movs	r1, #1
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe ff3f 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8003dfa:	7b7b      	ldrb	r3, [r7, #13]
 8003dfc:	2b43      	cmp	r3, #67	@ 0x43
 8003dfe:	d164      	bne.n	8003eca <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fadf 	bl	80033c4 <vl53l8cx_init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003e10:	e05b      	b.n	8003eca <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe f965 	bl	80020ea <VL53L8CX_WrByte>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	2109      	movs	r1, #9
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f95a 	bl	80020ea <VL53L8CX_WrByte>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8003e40:	2300      	movs	r3, #0
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	2301      	movs	r3, #1
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2306      	movs	r3, #6
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe ff0d 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8003e5e:	e035      	b.n	8003ecc <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe f93e 	bl	80020ea <VL53L8CX_WrByte>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	2109      	movs	r1, #9
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe f933 	bl	80020ea <VL53L8CX_WrByte>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2301      	movs	r3, #1
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2306      	movs	r3, #6
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fe fee6 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2243      	movs	r2, #67	@ 0x43
 8003eb0:	210f      	movs	r1, #15
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f919 	bl	80020ea <VL53L8CX_WrByte>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	73fb      	strb	r3, [r7, #15]
			break;
 8003ec2:	e003      	b.n	8003ecc <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8003ec4:	23ff      	movs	r3, #255	@ 0xff
 8003ec6:	73fb      	strb	r3, [r7, #15]
			break;
 8003ec8:	e000      	b.n	8003ecc <vl53l8cx_set_power_mode+0x198>
			break;
 8003eca:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe f908 	bl	80020ea <VL53L8CX_WrByte>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b09c      	sub	sp, #112	@ 0x70
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8003efe:	2300      	movs	r3, #0
 8003f00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f02:	2300      	movs	r3, #0
 8003f04:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8003f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8003f0c:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fcaa 	bl	800486c <vl53l8cx_get_resolution>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8003f32:	4bb8      	ldr	r3, [pc, #736]	@ (8004214 <vl53l8cx_start_ranging+0x324>)
 8003f34:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8003f3e:	4bb6      	ldr	r3, [pc, #728]	@ (8004218 <vl53l8cx_start_ranging+0x328>)
 8003f40:	f107 040c 	add.w	r4, r7, #12
 8003f44:	461d      	mov	r5, r3
 8003f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8003f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f58:	3308      	adds	r3, #8
 8003f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8003f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5e:	3310      	adds	r3, #16
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8003f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f64:	3320      	adds	r3, #32
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6a:	3340      	adds	r3, #64	@ 0x40
 8003f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	3380      	adds	r3, #128	@ 0x80
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8003f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8003f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f98:	e073      	b.n	8004082 <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8003f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	3368      	adds	r3, #104	@ 0x68
 8003fa0:	443b      	add	r3, r7
 8003fa2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d067      	beq.n	800407a <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8003faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3368      	adds	r3, #104	@ 0x68
 8003fb2:	443b      	add	r3, r7
 8003fb4:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d057      	beq.n	800407a <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8003fca:	f107 020c 	add.w	r2, r7, #12
 8003fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03a      	beq.n	800405a <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d833      	bhi.n	800405a <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff4:	885b      	ldrh	r3, [r3, #2]
 8003ff6:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d910      	bls.n	8004020 <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004000:	885b      	ldrh	r3, [r3, #2]
 8004002:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004006:	4293      	cmp	r3, r2
 8004008:	d80a      	bhi.n	8004020 <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 800400a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	b299      	uxth	r1, r3
 8004014:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004016:	8813      	ldrh	r3, [r2, #0]
 8004018:	f361 130f 	bfi	r3, r1, #4, #12
 800401c:	8013      	strh	r3, [r2, #0]
 800401e:	e009      	b.n	8004034 <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8004020:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	b299      	uxth	r1, r3
 800402a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800402c:	8813      	ldrh	r3, [r2, #0]
 800402e:	f361 130f 	bfi	r3, r1, #4, #12
 8004032:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4611      	mov	r1, r2
 8004044:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004046:	8812      	ldrh	r2, [r2, #0]
 8004048:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800404c:	b292      	uxth	r2, r2
 800404e:	fb01 f202 	mul.w	r2, r1, r2
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	615a      	str	r2, [r3, #20]
 8004058:	e009      	b.n	800406e <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004066:	b292      	uxth	r2, r2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	615a      	str	r2, [r3, #20]
 8004078:	e000      	b.n	800407c <vl53l8cx_start_ranging+0x18c>
			continue;
 800407a:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800407c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800407e:	3301      	adds	r3, #1
 8004080:	663b      	str	r3, [r7, #96]	@ 0x60
 8004082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004084:	2b0b      	cmp	r3, #11
 8004086:	d988      	bls.n	8003f9a <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f103 0218 	add.w	r2, r3, #24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 8004094:	f107 010c 	add.w	r1, r7, #12
 8004098:	2330      	movs	r3, #48	@ 0x30
 800409a:	f64d 1280 	movw	r2, #55680	@ 0xd980
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fe14 	bl	8004ccc <vl53l8cx_dci_write_data>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80040b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ba:	3301      	adds	r3, #1
 80040bc:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 80040be:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80040c2:	2308      	movs	r3, #8
 80040c4:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fdff 	bl	8004ccc <vl53l8cx_dci_write_data>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 80040dc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80040e0:	2310      	movs	r3, #16
 80040e2:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fdf0 	bl	8004ccc <vl53l8cx_dci_write_data>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fff1 	bl	80020ea <VL53L8CX_WrByte>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004110:	4313      	orrs	r3, r2
 8004112:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2205      	movs	r2, #5
 800411a:	2109      	movs	r1, #9
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd ffe4 	bl	80020ea <VL53L8CX_WrByte>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800412a:	4313      	orrs	r3, r2
 800412c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd ffd6 	bl	80020ea <VL53L8CX_WrByte>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004146:	4313      	orrs	r3, r2
 8004148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004152:	2304      	movs	r3, #4
 8004154:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004158:	f7fd ffdd 	bl	8002116 <VL53L8CX_WrMulti>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004164:	4313      	orrs	r3, r2
 8004166:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800416a:	2303      	movs	r3, #3
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	23ff      	movs	r3, #255	@ 0xff
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004176:	2201      	movs	r2, #1
 8004178:	2104      	movs	r1, #4
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe fd77 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004188:	4313      	orrs	r3, r2
 800418a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8004194:	230c      	movs	r3, #12
 8004196:	f245 4240 	movw	r2, #21568	@ 0x5440
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fd0c 	bl	8004bb8 <vl53l8cx_dci_read_data>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80041bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d002      	beq.n	80041d0 <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80041ca:	23ff      	movs	r3, #255	@ 0xff
 80041cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 80041d6:	2308      	movs	r3, #8
 80041d8:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fceb 	bl	8004bb8 <vl53l8cx_dci_read_data>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3516 	ldrb.w	r3, [r3, #1302]	@ 0x516
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 80041fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80041fe:	f043 0303 	orr.w	r3, r3, #3
 8004202:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8004206:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800420a:	4618      	mov	r0, r3
 800420c:	3768      	adds	r7, #104	@ 0x68
 800420e:	46bd      	mov	sp, r7
 8004210:	bdb0      	pop	{r4, r5, r7, pc}
 8004212:	bf00      	nop
 8004214:	0800a1a0 	.word	0x0800a1a0
 8004218:	0800a1b0 	.word	0x0800a1b0

0800421c <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	74fb      	strb	r3, [r7, #19]
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f107 020c 	add.w	r2, r7, #12
 800423a:	2304      	movs	r3, #4
 800423c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004240:	f7fd ff80 	bl	8002144 <VL53L8CX_RdMulti>
 8004244:	4603      	mov	r3, r0
 8004246:	461a      	mov	r2, r3
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	4313      	orrs	r3, r2
 800424c:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8004254:	4293      	cmp	r3, r2
 8004256:	d04d      	beq.n	80042f4 <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 800425e:	2b00      	cmp	r3, #0
 8004260:	d148      	bne.n	80042f4 <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd ff3d 	bl	80020ea <VL53L8CX_WrByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	4313      	orrs	r3, r2
 8004278:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2216      	movs	r2, #22
 800427e:	2115      	movs	r1, #21
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd ff32 	bl	80020ea <VL53L8CX_WrByte>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	4313      	orrs	r3, r2
 800428e:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	2114      	movs	r1, #20
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd ff27 	bl	80020ea <VL53L8CX_WrByte>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80042a6:	e021      	b.n	80042ec <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f107 0213 	add.w	r2, r7, #19
 80042ae:	2106      	movs	r1, #6
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd ff05 	bl	80020c0 <VL53L8CX_RdByte>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	4313      	orrs	r3, r2
 80042be:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	210a      	movs	r1, #10
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd ff8a 	bl	80021de <VL53L8CX_WaitMs>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 80042d4:	8abb      	ldrh	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 80042da:	8abb      	ldrh	r3, [r7, #20]
 80042dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80042e0:	d904      	bls.n	80042ec <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 80042e2:	7cfa      	ldrb	r2, [r7, #19]
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	75fb      	strb	r3, [r7, #23]
					break;
 80042ea:	e003      	b.n	80042f4 <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	dad9      	bge.n	80042a8 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f107 0213 	add.w	r2, r7, #19
 80042fa:	2106      	movs	r1, #6
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd fedf 	bl	80020c0 <VL53L8CX_RdByte>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	4313      	orrs	r3, r2
 800430a:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	b25b      	sxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	da15      	bge.n	8004340 <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f107 0213 	add.w	r2, r7, #19
 800431a:	2107      	movs	r1, #7
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fecf 	bl	80020c0 <VL53L8CX_RdByte>
 8004322:	4603      	mov	r3, r0
 8004324:	461a      	mov	r2, r3
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	4313      	orrs	r3, r2
 800432a:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	2b84      	cmp	r3, #132	@ 0x84
 8004330:	d006      	beq.n	8004340 <vl53l8cx_stop_ranging+0x124>
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b85      	cmp	r3, #133	@ 0x85
 8004336:	d003      	beq.n	8004340 <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 8004338:	7cfa      	ldrb	r2, [r7, #19]
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	4313      	orrs	r3, r2
 800433e:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fece 	bl	80020ea <VL53L8CX_WrByte>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	4313      	orrs	r3, r2
 8004356:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	2114      	movs	r1, #20
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fec3 	bl	80020ea <VL53L8CX_WrByte>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	4313      	orrs	r3, r2
 800436c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	2115      	movs	r1, #21
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd feb8 	bl	80020ea <VL53L8CX_WrByte>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	4313      	orrs	r3, r2
 8004382:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2204      	movs	r2, #4
 8004388:	2109      	movs	r1, #9
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fead 	bl	80020ea <VL53L8CX_WrByte>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	4313      	orrs	r3, r2
 8004398:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fea1 	bl	80020ea <VL53L8CX_WrByte>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	75fb      	strb	r3, [r7, #23]

	return status;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80043d2:	2304      	movs	r3, #4
 80043d4:	2100      	movs	r1, #0
 80043d6:	f7fd feb5 	bl	8002144 <VL53L8CX_RdMulti>
 80043da:	4603      	mov	r3, r0
 80043dc:	461a      	mov	r2, r3
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7c1b      	ldrb	r3, [r3, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d020      	beq.n	8004434 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80043f8:	2bff      	cmp	r3, #255	@ 0xff
 80043fa:	d01b      	beq.n	8004434 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8004402:	2b05      	cmp	r3, #5
 8004404:	d116      	bne.n	8004434 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 800440c:	f003 0305 	and.w	r3, r3, #5
 8004410:	2b05      	cmp	r3, #5
 8004412:	d10f      	bne.n	8004434 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	741a      	strb	r2, [r3, #16]
 8004432:	e00e      	b.n	8004452 <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800443a:	b25b      	sxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	da05      	bge.n	800444c <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4313      	orrs	r3, r2
 800444a:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 800446a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2100      	movs	r1, #0
 8004478:	f7fd fe64 	bl	8002144 <VL53L8CX_RdMulti>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	4313      	orrs	r3, r2
 8004484:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	741a      	strb	r2, [r3, #16]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	b29b      	uxth	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fd fe67 	bl	8002172 <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80044a4:	2310      	movs	r3, #16
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e10e      	b.n	80046c8 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d915      	bls.n	80044f0 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d80e      	bhi.n	80044f0 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e005      	b.n	80044fc <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	885b      	ldrh	r3, [r3, #2]
 8004500:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004504:	4293      	cmp	r3, r2
 8004506:	f000 80bb 	beq.w	8004680 <vl53l8cx_get_ranging_data+0x224>
 800450a:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800450e:	4293      	cmp	r3, r2
 8004510:	f300 80d2 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004514:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004518:	4293      	cmp	r3, r2
 800451a:	f000 80a3 	beq.w	8004664 <vl53l8cx_get_ranging_data+0x208>
 800451e:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004522:	4293      	cmp	r3, r2
 8004524:	f300 80c8 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004528:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800452c:	4293      	cmp	r3, r2
 800452e:	f000 808b 	beq.w	8004648 <vl53l8cx_get_ranging_data+0x1ec>
 8004532:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004536:	4293      	cmp	r3, r2
 8004538:	f300 80be 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 800453c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004540:	4293      	cmp	r3, r2
 8004542:	d073      	beq.n	800462c <vl53l8cx_get_ranging_data+0x1d0>
 8004544:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004548:	4293      	cmp	r3, r2
 800454a:	f300 80b5 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 800454e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8004552:	4293      	cmp	r3, r2
 8004554:	d05c      	beq.n	8004610 <vl53l8cx_get_ranging_data+0x1b4>
 8004556:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800455a:	4293      	cmp	r3, r2
 800455c:	f300 80ac 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004560:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8004564:	4293      	cmp	r3, r2
 8004566:	d045      	beq.n	80045f4 <vl53l8cx_get_ranging_data+0x198>
 8004568:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 800456c:	4293      	cmp	r3, r2
 800456e:	f300 80a3 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004572:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8004576:	4293      	cmp	r3, r2
 8004578:	f000 8090 	beq.w	800469c <vl53l8cx_get_ranging_data+0x240>
 800457c:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8004580:	4293      	cmp	r3, r2
 8004582:	f300 8099 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004586:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800458a:	4293      	cmp	r3, r2
 800458c:	d024      	beq.n	80045d8 <vl53l8cx_get_ranging_data+0x17c>
 800458e:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8004592:	4293      	cmp	r3, r2
 8004594:	f300 8090 	bgt.w	80046b8 <vl53l8cx_get_ranging_data+0x25c>
 8004598:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <vl53l8cx_get_ranging_data+0x14e>
 80045a0:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00a      	beq.n	80045be <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80045a8:	e086      	b.n	80046b8 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	330c      	adds	r3, #12
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80045b6:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
				break;
 80045bc:	e07d      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3304      	adds	r3, #4
 80045c6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4619      	mov	r1, r3
 80045d2:	f004 fe8e 	bl	80092f2 <memcpy>
				break;
 80045d6:	e070      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	3304      	adds	r3, #4
 80045e2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4619      	mov	r1, r3
 80045ee:	f004 fe80 	bl	80092f2 <memcpy>
				break;
 80045f2:	e062      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	3304      	adds	r3, #4
 80045fe:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4619      	mov	r1, r3
 800460a:	f004 fe72 	bl	80092f2 <memcpy>
				break;
 800460e:	e054      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3304      	adds	r3, #4
 800461a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4619      	mov	r1, r3
 8004626:	f004 fe64 	bl	80092f2 <memcpy>
				break;
 800462a:	e046      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3304      	adds	r3, #4
 8004636:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4619      	mov	r1, r3
 8004642:	f004 fe56 	bl	80092f2 <memcpy>
				break;
 8004646:	e038      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3304      	adds	r3, #4
 8004652:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4619      	mov	r1, r3
 800465e:	f004 fe48 	bl	80092f2 <memcpy>
				break;
 8004662:	e02a      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	3304      	adds	r3, #4
 800466e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4619      	mov	r1, r3
 800467a:	f004 fe3a 	bl	80092f2 <memcpy>
				break;
 800467e:	e01c      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3304      	adds	r3, #4
 800468a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4619      	mov	r1, r3
 8004696:	f004 fe2c 	bl	80092f2 <memcpy>
				break;
 800469a:	e00e      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	3304      	adds	r3, #4
 80046a6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4619      	mov	r1, r3
 80046b2:	f004 fe1e 	bl	80092f2 <memcpy>
				break;
 80046b6:	e000      	b.n	80046ba <vl53l8cx_get_ranging_data+0x25e>
				break;
 80046b8:	bf00      	nop
		}
		i += msize;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3304      	adds	r3, #4
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f4ff aeeb 	bcc.w	80044aa <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e00d      	b.n	80046f6 <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	0ada      	lsrs	r2, r3, #11
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80046fa:	d9ee      	bls.n	80046da <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e044      	b.n	800478c <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da00      	bge.n	8004718 <vl53l8cx_get_ranging_data+0x2bc>
 8004716:	3303      	adds	r3, #3
 8004718:	109b      	asrs	r3, r3, #2
 800471a:	b219      	sxth	r1, r3
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	460a      	mov	r2, r1
 800472a:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4413      	add	r3, r2
 8004732:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	b2d9      	uxtb	r1, r3
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8004746:	460a      	mov	r2, r1
 8004748:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	889b      	ldrh	r3, [r3, #4]
 8004758:	09db      	lsrs	r3, r3, #7
 800475a:	b299      	uxth	r1, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	460a      	mov	r2, r1
 800476a:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3390      	adds	r3, #144	@ 0x90
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0ada      	lsrs	r2, r3, #11
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3390      	adds	r3, #144	@ 0x90
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3301      	adds	r3, #1
 800478a:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004790:	d9b7      	bls.n	8004702 <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e01b      	b.n	80047d0 <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d110      	bne.n	80047ca <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e00a      	b.n	80047c4 <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4413      	add	r3, r2
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	22ff      	movs	r2, #255	@ 0xff
 80047ba:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f1      	beq.n	80047ae <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80047d4:	d9e0      	bls.n	8004798 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e014      	b.n	8004806 <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <vl53l8cx_get_ranging_data+0x40c>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0bda      	lsrs	r2, r3, #15
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3301      	adds	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b1f      	cmp	r3, #31
 800480a:	d9e7      	bls.n	80047dc <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 800481c:	461a      	mov	r2, r3
 800481e:	89fb      	ldrh	r3, [r7, #14]
 8004820:	4313      	orrs	r3, r2
 8004822:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8004828:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 800483a:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8004844:	461a      	mov	r2, r3
 8004846:	89bb      	ldrh	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 800484c:	89fa      	ldrh	r2, [r7, #14]
 800484e:	89bb      	ldrh	r3, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d003      	beq.n	800485c <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8004854:	7ffb      	ldrb	r3, [r7, #31]
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 800485c:	7ffb      	ldrb	r3, [r7, #31]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	80008001 	.word	0x80008001

0800486c <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004880:	2308      	movs	r3, #8
 8004882:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f996 	bl	8004bb8 <vl53l8cx_dci_read_data>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	4313      	orrs	r3, r2
 8004894:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80048a2:	fb12 f303 	smulbb	r3, r2, r3
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	701a      	strb	r2, [r3, #0]

	return status;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d002      	beq.n	80048d2 <vl53l8cx_set_resolution+0x1c>
 80048cc:	2b40      	cmp	r3, #64	@ 0x40
 80048ce:	d055      	beq.n	800497c <vl53l8cx_set_resolution+0xc6>
 80048d0:	e0a9      	b.n	8004a26 <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80048d8:	2310      	movs	r3, #16
 80048da:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f96a 	bl	8004bb8 <vl53l8cx_dci_read_data>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2240      	movs	r2, #64	@ 0x40
 80048fa:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2204      	movs	r2, #4
 8004902:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 800490c:	2310      	movs	r3, #16
 800490e:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9da 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4313      	orrs	r3, r2
 8004920:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8004928:	2308      	movs	r3, #8
 800492a:	f245 4250 	movw	r2, #21584	@ 0x5450
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f942 	bl	8004bb8 <vl53l8cx_dci_read_data>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	4313      	orrs	r3, r2
 800493c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2208      	movs	r2, #8
 8004952:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2208      	movs	r2, #8
 800495a:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8004964:	2308      	movs	r3, #8
 8004966:	f245 4250 	movw	r2, #21584	@ 0x5450
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9ae 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	4313      	orrs	r3, r2
 8004978:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 800497a:	e057      	b.n	8004a2c <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8004982:	2310      	movs	r3, #16
 8004984:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f915 	bl	8004bb8 <vl53l8cx_dci_read_data>
 800498e:	4603      	mov	r3, r0
 8004990:	461a      	mov	r2, r3
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	4313      	orrs	r3, r2
 8004996:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2210      	movs	r2, #16
 800499c:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2210      	movs	r2, #16
 80049a4:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80049b6:	2310      	movs	r3, #16
 80049b8:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f985 	bl	8004ccc <vl53l8cx_dci_write_data>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80049d2:	2308      	movs	r3, #8
 80049d4:	f245 4250 	movw	r2, #21584	@ 0x5450
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8ed 	bl	8004bb8 <vl53l8cx_dci_read_data>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2208      	movs	r2, #8
 80049ec:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2208      	movs	r2, #8
 80049f4:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2204      	movs	r2, #4
 80049fc:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8004a0e:	2308      	movs	r3, #8
 8004a10:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f959 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8004a24:	e002      	b.n	8004a2c <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8004a26:	237f      	movs	r3, #127	@ 0x7f
 8004a28:	73fb      	strb	r3, [r7, #15]
			break;
 8004a2a:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fe f9af 	bl	8002d94 <_vl53l8cx_send_offset_data>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fe fb71 	bl	800312c <_vl53l8cx_send_xtalk_data>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	73fb      	strb	r3, [r7, #15]

	return status;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af04      	add	r7, sp, #16
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004a74:	2301      	movs	r3, #1
 8004a76:	9302      	str	r3, [sp, #8]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	1cfb      	adds	r3, r7, #3
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2304      	movs	r3, #4
 8004a82:	f245 4258 	movw	r2, #21592	@ 0x5458
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9be 	bl	8004e08 <vl53l8cx_dci_replace_data>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	461a      	mov	r2, r3
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af04      	add	r7, sp, #16
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d903      	bls.n	8004ac0 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004abe:	d904      	bls.n	8004aca <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e01a      	b.n	8004b00 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004adc:	2300      	movs	r3, #0
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2314      	movs	r3, #20
 8004aec:	f245 425c 	movw	r2, #21596	@ 0x545c
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f989 	bl	8004e08 <vl53l8cx_dci_replace_data>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004b24:	2308      	movs	r3, #8
 8004b26:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f844 	bl	8004bb8 <vl53l8cx_dci_read_data>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d002      	beq.n	8004b46 <vl53l8cx_set_ranging_mode+0x3c>
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d00b      	beq.n	8004b5c <vl53l8cx_set_ranging_mode+0x52>
 8004b44:	e015      	b.n	8004b72 <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2203      	movs	r2, #3
 8004b52:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
			break;
 8004b5a:	e00d      	b.n	8004b78 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
			break;
 8004b70:	e002      	b.n	8004b78 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8004b72:	237f      	movs	r3, #127	@ 0x7f
 8004b74:	73fb      	strb	r3, [r7, #15]
			break;
 8004b76:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004b7e:	2308      	movs	r3, #8
 8004b80:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8a1 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8004b94:	f107 0108 	add.w	r1, r7, #8
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f894 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	@ 0x30
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8004bcc:	887b      	ldrh	r3, [r7, #2]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <vl53l8cx_dci_read_data+0x110>)
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004be4:	d903      	bls.n	8004bee <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8004be6:	23ff      	movs	r3, #255	@ 0xff
 8004be8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004bec:	e065      	b.n	8004cba <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	111b      	asrs	r3, r3, #4
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f107 0214 	add.w	r2, r7, #20
 8004c14:	230c      	movs	r3, #12
 8004c16:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8004c1a:	f7fd fa7c 	bl	8002116 <VL53L8CX_WrMulti>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	461a      	mov	r2, r3
 8004c22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	23ff      	movs	r3, #255	@ 0xff
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7fe f816 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8004c50:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8004c5e:	f7fd fa71 	bl	8002144 <VL53L8CX_RdMulti>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7fd fa77 	bl	8002172 <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8004c84:	2300      	movs	r3, #0
 8004c86:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c88:	e011      	b.n	8004cae <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004c8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	440b      	add	r3, r1
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8004ca0:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8004ca2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004cae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cb2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	dbe7      	blt.n	8004c8a <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004cba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3728      	adds	r7, #40	@ 0x28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	0800a1e0 	.word	0x0800a1e0

08004ccc <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	@ 0x30
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	753b      	strb	r3, [r7, #20]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	757b      	strb	r3, [r7, #21]
 8004cec:	2300      	movs	r3, #0
 8004cee:	75bb      	strb	r3, [r7, #22]
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	75fb      	strb	r3, [r7, #23]
 8004cf4:	2305      	movs	r3, #5
 8004cf6:	763b      	strb	r3, [r7, #24]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	121b      	asrs	r3, r3, #8
 8004d02:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004d04:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004d0e:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8004d16:	3334      	adds	r3, #52	@ 0x34
 8004d18:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8004d1a:	887b      	ldrh	r3, [r7, #2]
 8004d1c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004d20:	d903      	bls.n	8004d2a <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8004d22:	23ff      	movs	r3, #255	@ 0xff
 8004d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004d28:	e068      	b.n	8004dfc <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	111b      	asrs	r3, r3, #4
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004d40:	887b      	ldrh	r3, [r7, #2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 8004d4a:	887b      	ldrh	r3, [r7, #2]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	f7fd fa0f 	bl	8002172 <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d5c:	e012      	b.n	8004d84 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8004d5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	441a      	add	r2, r3
 8004d66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	7811      	ldrb	r1, [r2, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	460a      	mov	r2, r1
 8004d74:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004d78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dae8      	bge.n	8004d5e <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	461a      	mov	r2, r3
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	cb03      	ldmia	r3!, {r0, r1}
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8004dae:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8004db6:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8004db8:	330c      	adds	r3, #12
 8004dba:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004dbc:	f7fd f9ab 	bl	8002116 <VL53L8CX_WrMulti>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004dce:	2303      	movs	r3, #3
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	23ff      	movs	r3, #255	@ 0xff
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2104      	movs	r1, #4
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7fd ff45 	bl	8002c6e <_vl53l8cx_poll_for_answer>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	4619      	mov	r1, r3
 8004df6:	68b8      	ldr	r0, [r7, #8]
 8004df8:	f7fd f9bb 	bl	8002172 <VL53L8CX_SwapBuffer>
	}

	return status;
 8004dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3728      	adds	r7, #40	@ 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 8004e1a:	887b      	ldrh	r3, [r7, #2]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff fec9 	bl	8004bb8 <vl53l8cx_dci_read_data>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004e30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	4413      	add	r3, r2
 8004e36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e38:	6a39      	ldr	r1, [r7, #32]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 fa59 	bl	80092f2 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff40 	bl	8004ccc <vl53l8cx_dci_write_data>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	75fb      	strb	r3, [r7, #23]

	return status;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8004e70:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004e74:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d104      	bne.n	8004e86 <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8004e80:	2304      	movs	r3, #4
 8004e82:	73bb      	strb	r3, [r7, #14]
 8004e84:	e003      	b.n	8004e8e <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8004e86:	2300      	movs	r3, #0
 8004e88:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004e94:	2300      	movs	r3, #0
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	2304      	movs	r3, #4
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ffad 	bl	8004e08 <vl53l8cx_dci_replace_data>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004ebe:	2311      	movs	r3, #17
 8004ec0:	9302      	str	r3, [sp, #8]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	f107 030e 	add.w	r3, r7, #14
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2314      	movs	r3, #20
 8004ece:	f245 4288 	movw	r2, #21640	@ 0x5488
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ff98 	bl	8004e08 <vl53l8cx_dci_replace_data>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8004efa:	4aa7      	ldr	r2, [pc, #668]	@ (8005198 <vl53l8cx_set_detection_thresholds+0x2ac>)
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f04:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	75fb      	strb	r3, [r7, #23]
 8004f0c:	e120      	b.n	8005150 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	7a1b      	ldrb	r3, [r3, #8]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	f200 8117 	bhi.w	8005148 <vl53l8cx_set_detection_thresholds+0x25c>
 8004f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <vl53l8cx_set_detection_thresholds+0x34>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f6d 	.word	0x08004f6d
 8004f24:	08004fbb 	.word	0x08004fbb
 8004f28:	08005149 	.word	0x08005149
 8004f2c:	08005009 	.word	0x08005009
 8004f30:	08005149 	.word	0x08005149
 8004f34:	08005149 	.word	0x08005149
 8004f38:	08005149 	.word	0x08005149
 8004f3c:	08005057 	.word	0x08005057
 8004f40:	08005149 	.word	0x08005149
 8004f44:	08005149 	.word	0x08005149
 8004f48:	08005149 	.word	0x08005149
 8004f4c:	08005149 	.word	0x08005149
 8004f50:	080050a5 	.word	0x080050a5
 8004f54:	08005149 	.word	0x08005149
 8004f58:	08005149 	.word	0x08005149
 8004f5c:	08005149 	.word	0x08005149
 8004f60:	08005149 	.word	0x08005149
 8004f64:	08005149 	.word	0x08005149
 8004f68:	080050f3 	.word	0x080050f3
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8004f6c:	7dfa      	ldrb	r2, [r7, #23]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	461a      	mov	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	6819      	ldr	r1, [r3, #0]
 8004f7e:	7dfa      	ldrb	r2, [r7, #23]
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	008a      	lsls	r2, r1, #2
 8004f90:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8004f92:	7dfa      	ldrb	r2, [r7, #23]
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	7dfa      	ldrb	r2, [r7, #23]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	605a      	str	r2, [r3, #4]
				break;
 8004fb8:	e0c7      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004fba:	7dfa      	ldrb	r2, [r7, #23]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	4413      	add	r3, r2
 8004fca:	6819      	ldr	r1, [r3, #0]
 8004fcc:	7dfa      	ldrb	r2, [r7, #23]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	02ca      	lsls	r2, r1, #11
 8004fde:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004fe0:	7dfa      	ldrb	r2, [r7, #23]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	461a      	mov	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	7dfa      	ldrb	r2, [r7, #23]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	02ca      	lsls	r2, r1, #11
 8005004:	605a      	str	r2, [r3, #4]
				break;
 8005006:	e0a0      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8005008:	7dfa      	ldrb	r2, [r7, #23]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	461a      	mov	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4413      	add	r3, r2
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	7dfa      	ldrb	r2, [r7, #23]
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	461a      	mov	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	4413      	add	r3, r2
 800502a:	01ca      	lsls	r2, r1, #7
 800502c:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 800502e:	7dfa      	ldrb	r2, [r7, #23]
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	461a      	mov	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4413      	add	r3, r2
 800503e:	6859      	ldr	r1, [r3, #4]
 8005040:	7dfa      	ldrb	r2, [r7, #23]
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4413      	add	r3, r2
 8005050:	01ca      	lsls	r2, r1, #7
 8005052:	605a      	str	r2, [r3, #4]
				break;
 8005054:	e079      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8005056:	7dfa      	ldrb	r2, [r7, #23]
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	461a      	mov	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	4413      	add	r3, r2
 8005066:	6819      	ldr	r1, [r3, #0]
 8005068:	7dfa      	ldrb	r2, [r7, #23]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	461a      	mov	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4413      	add	r3, r2
 8005078:	02ca      	lsls	r2, r1, #11
 800507a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 800507c:	7dfa      	ldrb	r2, [r7, #23]
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4413      	add	r3, r2
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	7dfa      	ldrb	r2, [r7, #23]
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	461a      	mov	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	4413      	add	r3, r2
 800509e:	02ca      	lsls	r2, r1, #11
 80050a0:	605a      	str	r2, [r3, #4]
				break;
 80050a2:	e052      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80050a4:	7dfa      	ldrb	r2, [r7, #23]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	7dfa      	ldrb	r2, [r7, #23]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	020a      	lsls	r2, r1, #8
 80050c8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80050ca:	7dfa      	ldrb	r2, [r7, #23]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	7dfa      	ldrb	r2, [r7, #23]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	020a      	lsls	r2, r1, #8
 80050ee:	605a      	str	r2, [r3, #4]
				break;
 80050f0:	e02b      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80050f2:	7dfa      	ldrb	r2, [r7, #23]
 80050f4:	4613      	mov	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	461a      	mov	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	4413      	add	r3, r2
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	7df9      	ldrb	r1, [r7, #23]
 8005106:	460b      	mov	r3, r1
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	440b      	add	r3, r1
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4619      	mov	r1, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4419      	add	r1, r3
 8005114:	4613      	mov	r3, r2
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 800511c:	7dfa      	ldrb	r2, [r7, #23]
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	461a      	mov	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4413      	add	r3, r2
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	7df9      	ldrb	r1, [r7, #23]
 8005130:	460b      	mov	r3, r1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	440b      	add	r3, r1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4619      	mov	r1, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4419      	add	r1, r3
 800513e:	4613      	mov	r3, r2
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	604b      	str	r3, [r1, #4]
				break;
 8005146:	e000      	b.n	800514a <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8005148:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	3301      	adds	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b3f      	cmp	r3, #63	@ 0x3f
 8005154:	f67f aedb 	bls.w	8004f0e <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8005158:	f107 010c 	add.w	r1, r7, #12
 800515c:	2308      	movs	r3, #8
 800515e:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fdb2 	bl	8004ccc <vl53l8cx_dci_write_data>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	7dbb      	ldrb	r3, [r7, #22]
 800516e:	4313      	orrs	r3, r2
 8005170:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8005172:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005176:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fda5 	bl	8004ccc <vl53l8cx_dci_write_data>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	7dbb      	ldrb	r3, [r7, #22]
 8005188:	4313      	orrs	r3, r2
 800518a:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 800518c:	7dbb      	ldrb	r3, [r7, #22]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	0800a1ec 	.word	0x0800a1ec

0800519c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80051a0:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <SystemInit+0x20>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	4a05      	ldr	r2, [pc, #20]	@ (80051bc <SystemInit+0x20>)
 80051a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <HAL_Init+0x3c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0b      	ldr	r2, [pc, #44]	@ (80051fc <HAL_Init+0x3c>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051d6:	2003      	movs	r0, #3
 80051d8:	f000 f962 	bl	80054a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051dc:	2000      	movs	r0, #0
 80051de:	f000 f80f 	bl	8005200 <HAL_InitTick>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	e001      	b.n	80051f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051ee:	f7fc fac9 	bl	8001784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40022000 	.word	0x40022000

08005200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800520c:	4b17      	ldr	r3, [pc, #92]	@ (800526c <HAL_InitTick+0x6c>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d023      	beq.n	800525c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <HAL_InitTick+0x70>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b14      	ldr	r3, [pc, #80]	@ (800526c <HAL_InitTick+0x6c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005222:	fbb3 f3f1 	udiv	r3, r3, r1
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f96d 	bl	800550a <HAL_SYSTICK_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b0f      	cmp	r3, #15
 800523a:	d809      	bhi.n	8005250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800523c:	2200      	movs	r2, #0
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	f000 f937 	bl	80054b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005248:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <HAL_InitTick+0x74>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e007      	b.n	8005260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e004      	b.n	8005260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e001      	b.n	8005260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000050 	.word	0x20000050
 8005270:	20000048 	.word	0x20000048
 8005274:	2000004c 	.word	0x2000004c

08005278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <HAL_IncTick+0x20>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b06      	ldr	r3, [pc, #24]	@ (800529c <HAL_IncTick+0x24>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4a04      	ldr	r2, [pc, #16]	@ (800529c <HAL_IncTick+0x24>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000050 	.word	0x20000050
 800529c:	20002fec 	.word	0x20002fec

080052a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return uwTick;
 80052a4:	4b03      	ldr	r3, [pc, #12]	@ (80052b4 <HAL_GetTick+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20002fec 	.word	0x20002fec

080052b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7ff ffee 	bl	80052a0 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d005      	beq.n	80052de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80052d2:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <HAL_Delay+0x44>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052de:	bf00      	nop
 80052e0:	f7ff ffde 	bl	80052a0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d8f7      	bhi.n	80052e0 <HAL_Delay+0x28>
  {
  }
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000050 	.word	0x20000050

08005300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005310:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800531c:	4013      	ands	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800532c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005332:	4a04      	ldr	r2, [pc, #16]	@ (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	60d3      	str	r3, [r2, #12]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800534c:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <__NVIC_GetPriorityGrouping+0x18>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	f003 0307 	and.w	r3, r3, #7
}
 8005356:	4618      	mov	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005372:	2b00      	cmp	r3, #0
 8005374:	db0b      	blt.n	800538e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	f003 021f 	and.w	r2, r3, #31
 800537c:	4907      	ldr	r1, [pc, #28]	@ (800539c <__NVIC_EnableIRQ+0x38>)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2001      	movs	r0, #1
 8005386:	fa00 f202 	lsl.w	r2, r0, r2
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e100 	.word	0xe000e100

080053a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	@ (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	@ (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	@ 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f1c3 0307 	rsb	r3, r3, #7
 800540e:	2b04      	cmp	r3, #4
 8005410:	bf28      	it	cs
 8005412:	2304      	movcs	r3, #4
 8005414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	2b06      	cmp	r3, #6
 800541c:	d902      	bls.n	8005424 <NVIC_EncodePriority+0x30>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3b03      	subs	r3, #3
 8005422:	e000      	b.n	8005426 <NVIC_EncodePriority+0x32>
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	401a      	ands	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800543c:	f04f 31ff 	mov.w	r1, #4294967295
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43d9      	mvns	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	4313      	orrs	r3, r2
         );
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	@ 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800546c:	d301      	bcc.n	8005472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800546e:	2301      	movs	r3, #1
 8005470:	e00f      	b.n	8005492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005472:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <SysTick_Config+0x40>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800547a:	210f      	movs	r1, #15
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f7ff ff8e 	bl	80053a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <SysTick_Config+0x40>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800548a:	4b04      	ldr	r3, [pc, #16]	@ (800549c <SysTick_Config+0x40>)
 800548c:	2207      	movs	r2, #7
 800548e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e000e010 	.word	0xe000e010

080054a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff29 	bl	8005300 <__NVIC_SetPriorityGrouping>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054c8:	f7ff ff3e 	bl	8005348 <__NVIC_GetPriorityGrouping>
 80054cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7ff ff8e 	bl	80053f4 <NVIC_EncodePriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff5d 	bl	80053a0 <__NVIC_SetPriority>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff31 	bl	8005364 <__NVIC_EnableIRQ>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffa2 	bl	800545c <SysTick_Config>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2201      	movs	r2, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_EXTI_IRQHandler+0x5c>)
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4013      	ands	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4798      	blx	r3
    }
  }
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40010414 	.word	0x40010414

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005592:	e17f      	b.n	8005894 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8171 	beq.w	800588e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d005      	beq.n	80055c4 <HAL_GPIO_Init+0x40>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d130      	bne.n	8005626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	2203      	movs	r2, #3
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4013      	ands	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055fa:	2201      	movs	r2, #1
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 0201 	and.w	r2, r3, #1
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b03      	cmp	r3, #3
 8005630:	d118      	bne.n	8005664 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005638:	2201      	movs	r2, #1
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	08db      	lsrs	r3, r3, #3
 800564e:	f003 0201 	and.w	r2, r3, #1
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	2b03      	cmp	r3, #3
 800566e:	d017      	beq.n	80056a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	2203      	movs	r2, #3
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d123      	bne.n	80056f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3208      	adds	r2, #8
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	220f      	movs	r2, #15
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	08da      	lsrs	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3208      	adds	r2, #8
 80056ee:	6939      	ldr	r1, [r7, #16]
 80056f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0203 	and.w	r2, r3, #3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80ac 	beq.w	800588e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005736:	4b5f      	ldr	r3, [pc, #380]	@ (80058b4 <HAL_GPIO_Init+0x330>)
 8005738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573a:	4a5e      	ldr	r2, [pc, #376]	@ (80058b4 <HAL_GPIO_Init+0x330>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6613      	str	r3, [r2, #96]	@ 0x60
 8005742:	4b5c      	ldr	r3, [pc, #368]	@ (80058b4 <HAL_GPIO_Init+0x330>)
 8005744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800574e:	4a5a      	ldr	r2, [pc, #360]	@ (80058b8 <HAL_GPIO_Init+0x334>)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	3302      	adds	r3, #2
 8005756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	220f      	movs	r2, #15
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005778:	d025      	beq.n	80057c6 <HAL_GPIO_Init+0x242>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4f      	ldr	r2, [pc, #316]	@ (80058bc <HAL_GPIO_Init+0x338>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01f      	beq.n	80057c2 <HAL_GPIO_Init+0x23e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4e      	ldr	r2, [pc, #312]	@ (80058c0 <HAL_GPIO_Init+0x33c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d019      	beq.n	80057be <HAL_GPIO_Init+0x23a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4d      	ldr	r2, [pc, #308]	@ (80058c4 <HAL_GPIO_Init+0x340>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_GPIO_Init+0x236>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a4c      	ldr	r2, [pc, #304]	@ (80058c8 <HAL_GPIO_Init+0x344>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00d      	beq.n	80057b6 <HAL_GPIO_Init+0x232>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4b      	ldr	r2, [pc, #300]	@ (80058cc <HAL_GPIO_Init+0x348>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x22e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a4a      	ldr	r2, [pc, #296]	@ (80058d0 <HAL_GPIO_Init+0x34c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_GPIO_Init+0x22a>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e00c      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e00a      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057b2:	2305      	movs	r3, #5
 80057b4:	e008      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057b6:	2304      	movs	r3, #4
 80057b8:	e006      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057ba:	2303      	movs	r3, #3
 80057bc:	e004      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057be:	2302      	movs	r3, #2
 80057c0:	e002      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_GPIO_Init+0x244>
 80057c6:	2300      	movs	r3, #0
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	f002 0203 	and.w	r2, r2, #3
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	4093      	lsls	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057d8:	4937      	ldr	r1, [pc, #220]	@ (80058b8 <HAL_GPIO_Init+0x334>)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	3302      	adds	r3, #2
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057e6:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800580a:	4a32      	ldr	r2, [pc, #200]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005810:	4b30      	ldr	r3, [pc, #192]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	43db      	mvns	r3, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005834:	4a27      	ldr	r2, [pc, #156]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800583a:	4b26      	ldr	r3, [pc, #152]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	43db      	mvns	r3, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800585e:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	43db      	mvns	r3, r3
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4013      	ands	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005888:	4a12      	ldr	r2, [pc, #72]	@ (80058d4 <HAL_GPIO_Init+0x350>)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f47f ae78 	bne.w	8005594 <HAL_GPIO_Init+0x10>
  }
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40010000 	.word	0x40010000
 80058bc:	48000400 	.word	0x48000400
 80058c0:	48000800 	.word	0x48000800
 80058c4:	48000c00 	.word	0x48000c00
 80058c8:	48001000 	.word	0x48001000
 80058cc:	48001400 	.word	0x48001400
 80058d0:	48001800 	.word	0x48001800
 80058d4:	40010400 	.word	0x40010400

080058d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80058e6:	e0cd      	b.n	8005a84 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80058e8:	2201      	movs	r2, #1
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80c0 	beq.w	8005a7e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80058fe:	4a68      	ldr	r2, [pc, #416]	@ (8005aa0 <HAL_GPIO_DeInit+0x1c8>)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	089b      	lsrs	r3, r3, #2
 8005904:	3302      	adds	r3, #2
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	220f      	movs	r2, #15
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005926:	d025      	beq.n	8005974 <HAL_GPIO_DeInit+0x9c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a5e      	ldr	r2, [pc, #376]	@ (8005aa4 <HAL_GPIO_DeInit+0x1cc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d01f      	beq.n	8005970 <HAL_GPIO_DeInit+0x98>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa8 <HAL_GPIO_DeInit+0x1d0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d019      	beq.n	800596c <HAL_GPIO_DeInit+0x94>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a5c      	ldr	r2, [pc, #368]	@ (8005aac <HAL_GPIO_DeInit+0x1d4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <HAL_GPIO_DeInit+0x90>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a5b      	ldr	r2, [pc, #364]	@ (8005ab0 <HAL_GPIO_DeInit+0x1d8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00d      	beq.n	8005964 <HAL_GPIO_DeInit+0x8c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ab4 <HAL_GPIO_DeInit+0x1dc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <HAL_GPIO_DeInit+0x88>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a59      	ldr	r2, [pc, #356]	@ (8005ab8 <HAL_GPIO_DeInit+0x1e0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d101      	bne.n	800595c <HAL_GPIO_DeInit+0x84>
 8005958:	2306      	movs	r3, #6
 800595a:	e00c      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 800595c:	2307      	movs	r3, #7
 800595e:	e00a      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 8005960:	2305      	movs	r3, #5
 8005962:	e008      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 8005964:	2304      	movs	r3, #4
 8005966:	e006      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 8005968:	2303      	movs	r3, #3
 800596a:	e004      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 800596c:	2302      	movs	r3, #2
 800596e:	e002      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_GPIO_DeInit+0x9e>
 8005974:	2300      	movs	r3, #0
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	f002 0203 	and.w	r2, r2, #3
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	4093      	lsls	r3, r2
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	429a      	cmp	r2, r3
 8005984:	d132      	bne.n	80059ec <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005986:	4b4d      	ldr	r3, [pc, #308]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	43db      	mvns	r3, r3
 800598e:	494b      	ldr	r1, [pc, #300]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 8005990:	4013      	ands	r3, r2
 8005992:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005994:	4b49      	ldr	r3, [pc, #292]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	4947      	ldr	r1, [pc, #284]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80059a2:	4b46      	ldr	r3, [pc, #280]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	4944      	ldr	r1, [pc, #272]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80059b0:	4b42      	ldr	r3, [pc, #264]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	43db      	mvns	r3, r3
 80059b8:	4940      	ldr	r1, [pc, #256]	@ (8005abc <HAL_GPIO_DeInit+0x1e4>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	220f      	movs	r2, #15
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80059ce:	4a34      	ldr	r2, [pc, #208]	@ (8005aa0 <HAL_GPIO_DeInit+0x1c8>)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	3302      	adds	r3, #2
 80059d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43da      	mvns	r2, r3
 80059de:	4830      	ldr	r0, [pc, #192]	@ (8005aa0 <HAL_GPIO_DeInit+0x1c8>)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	400a      	ands	r2, r1
 80059e6:	3302      	adds	r3, #2
 80059e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2103      	movs	r1, #3
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	08da      	lsrs	r2, r3, #3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3208      	adds	r2, #8
 8005a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	08d2      	lsrs	r2, r2, #3
 8005a20:	4019      	ands	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3208      	adds	r2, #8
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	2103      	movs	r1, #3
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	2101      	movs	r1, #1
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	401a      	ands	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	2101      	movs	r1, #1
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	3301      	adds	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f47f af2b 	bne.w	80058e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	48000400 	.word	0x48000400
 8005aa8:	48000800 	.word	0x48000800
 8005aac:	48000c00 	.word	0x48000c00
 8005ab0:	48001000 	.word	0x48001000
 8005ab4:	48001400 	.word	0x48001400
 8005ab8:	48001800 	.word	0x48001800
 8005abc:	40010400 	.word	0x40010400

08005ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	807b      	strh	r3, [r7, #2]
 8005acc:	4613      	mov	r3, r2
 8005ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ad0:	787b      	ldrb	r3, [r7, #1]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ad6:	887a      	ldrh	r2, [r7, #2]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005adc:	e002      	b.n	8005ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ade:	887a      	ldrh	r2, [r7, #2]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005afa:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b06:	4a05      	ldr	r2, [pc, #20]	@ (8005b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fb f83a 	bl	8000b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40010400 	.word	0x40010400

08005b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e08d      	b.n	8005c4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8b4 	bl	8005cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	@ 0x24
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d107      	bne.n	8005b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	e006      	b.n	8005ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d108      	bne.n	8005bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e007      	b.n	8005bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e021      	b.n	8005cac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f821 	bl	8005cc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	460b      	mov	r3, r1
 8005cea:	817b      	strh	r3, [r7, #10]
 8005cec:	4613      	mov	r3, r2
 8005cee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 80fd 	bne.w	8005ef8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_I2C_Master_Transmit+0x30>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0f6      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d14:	f7ff fac4 	bl	80052a0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2319      	movs	r3, #25
 8005d20:	2201      	movs	r2, #1
 8005d22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fc04 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0e1      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2221      	movs	r2, #33	@ 0x21
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	893a      	ldrh	r2, [r7, #8]
 8005d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2bff      	cmp	r3, #255	@ 0xff
 8005d66:	d906      	bls.n	8005d76 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	@ 0xff
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	e007      	b.n	8005d86 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d024      	beq.n	8005dd8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	8979      	ldrh	r1, [r7, #10]
 8005dca:	4b4e      	ldr	r3, [pc, #312]	@ (8005f04 <HAL_I2C_Master_Transmit+0x228>)
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fd69 	bl	80068a8 <I2C_TransferConfig>
 8005dd6:	e066      	b.n	8005ea6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	8979      	ldrh	r1, [r7, #10]
 8005de0:	4b48      	ldr	r3, [pc, #288]	@ (8005f04 <HAL_I2C_Master_Transmit+0x228>)
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fd5e 	bl	80068a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005dec:	e05b      	b.n	8005ea6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fbed 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e07b      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d034      	beq.n	8005ea6 <HAL_I2C_Master_Transmit+0x1ca>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d130      	bne.n	8005ea6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2180      	movs	r1, #128	@ 0x80
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fb70 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e04d      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2bff      	cmp	r3, #255	@ 0xff
 8005e66:	d90e      	bls.n	8005e86 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	22ff      	movs	r2, #255	@ 0xff
 8005e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	8979      	ldrh	r1, [r7, #10]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fd12 	bl	80068a8 <I2C_TransferConfig>
 8005e84:	e00f      	b.n	8005ea6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	8979      	ldrh	r1, [r7, #10]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fd01 	bl	80068a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d19e      	bne.n	8005dee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	6a39      	ldr	r1, [r7, #32]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fbd3 	bl	8006660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e01a      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <HAL_I2C_Master_Transmit+0x22c>)
 8005ed8:	400b      	ands	r3, r1
 8005eda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e000      	b.n	8005efa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ef8:	2302      	movs	r3, #2
  }
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	80002000 	.word	0x80002000
 8005f08:	fe00e800 	.word	0xfe00e800

08005f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	817b      	strh	r3, [r7, #10]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	813b      	strh	r3, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	f040 80f9 	bne.w	8006126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x34>
 8005f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0ed      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_Mem_Write+0x4e>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e0e6      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f62:	f7ff f99d 	bl	80052a0 <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2319      	movs	r3, #25
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fadd 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0d1      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2221      	movs	r2, #33	@ 0x21
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2240      	movs	r2, #64	@ 0x40
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fac:	88f8      	ldrh	r0, [r7, #6]
 8005fae:	893a      	ldrh	r2, [r7, #8]
 8005fb0:	8979      	ldrh	r1, [r7, #10]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4603      	mov	r3, r0
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f9ed 	bl	800639c <I2C_RequestMemoryWrite>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0a9      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2bff      	cmp	r3, #255	@ 0xff
 8005fdc:	d90e      	bls.n	8005ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	22ff      	movs	r2, #255	@ 0xff
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	8979      	ldrh	r1, [r7, #10]
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fc57 	bl	80068a8 <I2C_TransferConfig>
 8005ffa:	e00f      	b.n	800601c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600a:	b2da      	uxtb	r2, r3
 800600c:	8979      	ldrh	r1, [r7, #10]
 800600e:	2300      	movs	r3, #0
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fc46 	bl	80068a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fad6 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e07b      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	781a      	ldrb	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d034      	beq.n	80060d4 <HAL_I2C_Mem_Write+0x1c8>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d130      	bne.n	80060d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	2200      	movs	r2, #0
 800607a:	2180      	movs	r1, #128	@ 0x80
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fa59 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e04d      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2bff      	cmp	r3, #255	@ 0xff
 8006094:	d90e      	bls.n	80060b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	22ff      	movs	r2, #255	@ 0xff
 800609a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	2300      	movs	r3, #0
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fbfb 	bl	80068a8 <I2C_TransferConfig>
 80060b2:	e00f      	b.n	80060d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	8979      	ldrh	r1, [r7, #10]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fbea 	bl	80068a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d19e      	bne.n	800601c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fabc 	bl	8006660 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e01a      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2220      	movs	r2, #32
 80060f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <HAL_I2C_Mem_Write+0x224>)
 8006106:	400b      	ands	r3, r1
 8006108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006126:	2302      	movs	r3, #2
  }
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	fe00e800 	.word	0xfe00e800

08006134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 80fd 	bne.w	8006356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_I2C_Mem_Read+0x34>
 8006162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0f1      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_I2C_Mem_Read+0x4e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ea      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800618a:	f7ff f889 	bl	80052a0 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2319      	movs	r3, #25
 8006196:	2201      	movs	r2, #1
 8006198:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f9c9 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0d5      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2222      	movs	r2, #34	@ 0x22
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2240      	movs	r2, #64	@ 0x40
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061d4:	88f8      	ldrh	r0, [r7, #6]
 80061d6:	893a      	ldrh	r2, [r7, #8]
 80061d8:	8979      	ldrh	r1, [r7, #10]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4603      	mov	r3, r0
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f92d 	bl	8006444 <I2C_RequestMemoryRead>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0ad      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2bff      	cmp	r3, #255	@ 0xff
 8006204:	d90e      	bls.n	8006224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	22ff      	movs	r2, #255	@ 0xff
 800620a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006210:	b2da      	uxtb	r2, r3
 8006212:	8979      	ldrh	r1, [r7, #10]
 8006214:	4b52      	ldr	r3, [pc, #328]	@ (8006360 <HAL_I2C_Mem_Read+0x22c>)
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fb43 	bl	80068a8 <I2C_TransferConfig>
 8006222:	e00f      	b.n	8006244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006232:	b2da      	uxtb	r2, r3
 8006234:	8979      	ldrh	r1, [r7, #10]
 8006236:	4b4a      	ldr	r3, [pc, #296]	@ (8006360 <HAL_I2C_Mem_Read+0x22c>)
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fb32 	bl	80068a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2200      	movs	r2, #0
 800624c:	2104      	movs	r1, #4
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f970 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e07c      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d034      	beq.n	8006304 <HAL_I2C_Mem_Read+0x1d0>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d130      	bne.n	8006304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	2200      	movs	r2, #0
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f941 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e04d      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2bff      	cmp	r3, #255	@ 0xff
 80062c4:	d90e      	bls.n	80062e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	22ff      	movs	r2, #255	@ 0xff
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	8979      	ldrh	r1, [r7, #10]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fae3 	bl	80068a8 <I2C_TransferConfig>
 80062e2:	e00f      	b.n	8006304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	8979      	ldrh	r1, [r7, #10]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fad2 	bl	80068a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d19a      	bne.n	8006244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f9a4 	bl	8006660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e01a      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2220      	movs	r2, #32
 8006328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6859      	ldr	r1, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <HAL_I2C_Mem_Read+0x230>)
 8006336:	400b      	ands	r3, r1
 8006338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	80002400 	.word	0x80002400
 8006364:	fe00e800 	.word	0xfe00e800

08006368 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006376:	b2db      	uxtb	r3, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	817b      	strh	r3, [r7, #10]
 80063ae:	460b      	mov	r3, r1
 80063b0:	813b      	strh	r3, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	8979      	ldrh	r1, [r7, #10]
 80063bc:	4b20      	ldr	r3, [pc, #128]	@ (8006440 <I2C_RequestMemoryWrite+0xa4>)
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fa6f 	bl	80068a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f8ff 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e02c      	b.n	8006438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d105      	bne.n	80063f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063e4:	893b      	ldrh	r3, [r7, #8]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80063ee:	e015      	b.n	800641c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063f0:	893b      	ldrh	r3, [r7, #8]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	69b9      	ldr	r1, [r7, #24]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8e5 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e012      	b.n	8006438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2200      	movs	r2, #0
 8006424:	2180      	movs	r1, #128	@ 0x80
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f884 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	80002000 	.word	0x80002000

08006444 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4603      	mov	r3, r0
 8006454:	817b      	strh	r3, [r7, #10]
 8006456:	460b      	mov	r3, r1
 8006458:	813b      	strh	r3, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	4b20      	ldr	r3, [pc, #128]	@ (80064e8 <I2C_RequestMemoryRead+0xa4>)
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fa1c 	bl	80068a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	69b9      	ldr	r1, [r7, #24]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f8ac 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e02c      	b.n	80064de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	629a      	str	r2, [r3, #40]	@ 0x28
 8006494:	e015      	b.n	80064c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	b29b      	uxth	r3, r3
 800649c:	b2da      	uxtb	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f892 	bl	80065d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e012      	b.n	80064de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064b8:	893b      	ldrh	r3, [r7, #8]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2140      	movs	r1, #64	@ 0x40
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f831 	bl	8006534 <I2C_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	80002000 	.word	0x80002000

080064ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d103      	bne.n	800650a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d007      	beq.n	8006528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	619a      	str	r2, [r3, #24]
  }
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006544:	e031      	b.n	80065aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d02d      	beq.n	80065aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654e:	f7fe fea7 	bl	80052a0 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d302      	bcc.n	8006564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d122      	bne.n	80065aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	429a      	cmp	r2, r3
 8006580:	d113      	bne.n	80065aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e00f      	b.n	80065ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d0be      	beq.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065de:	e033      	b.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f87f 	bl	80066e8 <I2C_IsErrorOccurred>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e031      	b.n	8006658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d025      	beq.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fc:	f7fe fe50 	bl	80052a0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d302      	bcc.n	8006612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d11a      	bne.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d013      	beq.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e007      	b.n	8006658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b02      	cmp	r3, #2
 8006654:	d1c4      	bne.n	80065e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666c:	e02f      	b.n	80066ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f838 	bl	80066e8 <I2C_IsErrorOccurred>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e02d      	b.n	80066de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fe fe0d 	bl	80052a0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11a      	bne.n	80066ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d013      	beq.n	80066ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d1c8      	bne.n	800666e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	@ 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	d068      	beq.n	80067e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2210      	movs	r2, #16
 800671a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800671c:	e049      	b.n	80067b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d045      	beq.n	80067b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fe fdbb 	bl	80052a0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <I2C_IsErrorOccurred+0x54>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d13a      	bne.n	80067b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800674e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800675a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675e:	d121      	bne.n	80067a4 <I2C_IsErrorOccurred+0xbc>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006766:	d01d      	beq.n	80067a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006768:	7cfb      	ldrb	r3, [r7, #19]
 800676a:	2b20      	cmp	r3, #32
 800676c:	d01a      	beq.n	80067a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800677c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800677e:	f7fe fd8f 	bl	80052a0 <HAL_GetTick>
 8006782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006784:	e00e      	b.n	80067a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006786:	f7fe fd8b 	bl	80052a0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b19      	cmp	r3, #25
 8006792:	d907      	bls.n	80067a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f043 0320 	orr.w	r3, r3, #32
 800679a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80067a2:	e006      	b.n	80067b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d1e9      	bne.n	8006786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d003      	beq.n	80067c8 <I2C_IsErrorOccurred+0xe0>
 80067c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0aa      	beq.n	800671e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80067c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2220      	movs	r2, #32
 80067d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f043 0304 	orr.w	r3, r3, #4
 80067de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	f043 0308 	orr.w	r3, r3, #8
 8006820:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800682a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f043 0302 	orr.w	r3, r3, #2
 8006842:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800684c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01c      	beq.n	8006896 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fe45 	bl	80064ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <I2C_IsErrorOccurred+0x1bc>)
 800686e:	400b      	ands	r3, r1
 8006870:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	@ 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	fe00e800 	.word	0xfe00e800

080068a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	817b      	strh	r3, [r7, #10]
 80068b6:	4613      	mov	r3, r2
 80068b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068ba:	897b      	ldrh	r3, [r7, #10]
 80068bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068c0:	7a7b      	ldrb	r3, [r7, #9]
 80068c2:	041b      	lsls	r3, r3, #16
 80068c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	0d5b      	lsrs	r3, r3, #21
 80068e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80068e6:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <I2C_TransferConfig+0x60>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	43db      	mvns	r3, r3
 80068ec:	ea02 0103 	and.w	r1, r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	03ff63ff 	.word	0x03ff63ff

0800690c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b20      	cmp	r3, #32
 8006920:	d138      	bne.n	8006994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800692c:	2302      	movs	r3, #2
 800692e:	e032      	b.n	8006996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2224      	movs	r2, #36	@ 0x24
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800695e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6819      	ldr	r1, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d139      	bne.n	8006a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e033      	b.n	8006a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2224      	movs	r2, #36	@ 0x24
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80069f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a40:	4b04      	ldr	r3, [pc, #16]	@ (8006a54 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40007000 	.word	0x40007000

08006a58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a66:	d130      	bne.n	8006aca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a68:	4b23      	ldr	r3, [pc, #140]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a74:	d038      	beq.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a76:	4b20      	ldr	r3, [pc, #128]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a86:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2232      	movs	r2, #50	@ 0x32
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0c9b      	lsrs	r3, r3, #18
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a9c:	e002      	b.n	8006aa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aa4:	4b14      	ldr	r3, [pc, #80]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab0:	d102      	bne.n	8006ab8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f2      	bne.n	8006a9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac4:	d110      	bne.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	d007      	beq.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ad8:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ae0:	4a05      	ldr	r2, [pc, #20]	@ (8006af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ae6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40007000 	.word	0x40007000
 8006afc:	20000048 	.word	0x20000048
 8006b00:	431bde83 	.word	0x431bde83

08006b04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e3ca      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b16:	4b97      	ldr	r3, [pc, #604]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
 8006b1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b20:	4b94      	ldr	r3, [pc, #592]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80e4 	beq.w	8006d00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_RCC_OscConfig+0x4a>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b0c      	cmp	r3, #12
 8006b42:	f040 808b 	bne.w	8006c5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 8087 	bne.w	8006c5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b4e:	4b89      	ldr	r3, [pc, #548]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_RCC_OscConfig+0x62>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e3a2      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	4b82      	ldr	r3, [pc, #520]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <HAL_RCC_OscConfig+0x7c>
 8006b76:	4b7f      	ldr	r3, [pc, #508]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b7e:	e005      	b.n	8006b8c <HAL_RCC_OscConfig+0x88>
 8006b80:	4b7c      	ldr	r3, [pc, #496]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d223      	bcs.n	8006bd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fd55 	bl	8007644 <RCC_SetFlashLatencyFromMSIRange>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e383      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ba4:	4b73      	ldr	r3, [pc, #460]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a72      	ldr	r2, [pc, #456]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006baa:	f043 0308 	orr.w	r3, r3, #8
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4b70      	ldr	r3, [pc, #448]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	496d      	ldr	r1, [pc, #436]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	4968      	ldr	r1, [pc, #416]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	604b      	str	r3, [r1, #4]
 8006bd6:	e025      	b.n	8006c24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bd8:	4b66      	ldr	r3, [pc, #408]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a65      	ldr	r2, [pc, #404]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bde:	f043 0308 	orr.w	r3, r3, #8
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	4b63      	ldr	r3, [pc, #396]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	4960      	ldr	r1, [pc, #384]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	495b      	ldr	r1, [pc, #364]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fd15 	bl	8007644 <RCC_SetFlashLatencyFromMSIRange>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e343      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c24:	f000 fc4a 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4b52      	ldr	r3, [pc, #328]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	091b      	lsrs	r3, r3, #4
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	4950      	ldr	r1, [pc, #320]	@ (8006d78 <HAL_RCC_OscConfig+0x274>)
 8006c36:	5ccb      	ldrb	r3, [r1, r3]
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	4a4e      	ldr	r2, [pc, #312]	@ (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c44:	4b4e      	ldr	r3, [pc, #312]	@ (8006d80 <HAL_RCC_OscConfig+0x27c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fad9 	bl	8005200 <HAL_InitTick>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d052      	beq.n	8006cfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	e327      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d032      	beq.n	8006cca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c64:	4b43      	ldr	r3, [pc, #268]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a42      	ldr	r2, [pc, #264]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c70:	f7fe fb16 	bl	80052a0 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c78:	f7fe fb12 	bl	80052a0 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e310      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c96:	4b37      	ldr	r3, [pc, #220]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a36      	ldr	r2, [pc, #216]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006c9c:	f043 0308 	orr.w	r3, r3, #8
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	4931      	ldr	r1, [pc, #196]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	492c      	ldr	r1, [pc, #176]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	e01a      	b.n	8006d00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cca:	4b2a      	ldr	r3, [pc, #168]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a29      	ldr	r2, [pc, #164]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cd6:	f7fe fae3 	bl	80052a0 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cde:	f7fe fadf 	bl	80052a0 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e2dd      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cf0:	4b20      	ldr	r3, [pc, #128]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <HAL_RCC_OscConfig+0x1da>
 8006cfc:	e000      	b.n	8006d00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d074      	beq.n	8006df6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d005      	beq.n	8006d1e <HAL_RCC_OscConfig+0x21a>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b0c      	cmp	r3, #12
 8006d16:	d10e      	bne.n	8006d36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d10b      	bne.n	8006d36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d064      	beq.n	8006df4 <HAL_RCC_OscConfig+0x2f0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d160      	bne.n	8006df4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e2ba      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCC_OscConfig+0x24a>
 8006d40:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0b      	ldr	r2, [pc, #44]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e026      	b.n	8006d9c <HAL_RCC_OscConfig+0x298>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d56:	d115      	bne.n	8006d84 <HAL_RCC_OscConfig+0x280>
 8006d58:	4b06      	ldr	r3, [pc, #24]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a05      	ldr	r2, [pc, #20]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	4b03      	ldr	r3, [pc, #12]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a02      	ldr	r2, [pc, #8]	@ (8006d74 <HAL_RCC_OscConfig+0x270>)
 8006d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	e014      	b.n	8006d9c <HAL_RCC_OscConfig+0x298>
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000
 8006d78:	0801fad0 	.word	0x0801fad0
 8006d7c:	20000048 	.word	0x20000048
 8006d80:	2000004c 	.word	0x2000004c
 8006d84:	4ba0      	ldr	r3, [pc, #640]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a9f      	ldr	r2, [pc, #636]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b9d      	ldr	r3, [pc, #628]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a9c      	ldr	r2, [pc, #624]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fe fa7c 	bl	80052a0 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dac:	f7fe fa78 	bl	80052a0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b64      	cmp	r3, #100	@ 0x64
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e276      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dbe:	4b92      	ldr	r3, [pc, #584]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x2a8>
 8006dca:	e014      	b.n	8006df6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fe fa68 	bl	80052a0 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd4:	f7fe fa64 	bl	80052a0 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	@ 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e262      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006de6:	4b88      	ldr	r3, [pc, #544]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x2d0>
 8006df2:	e000      	b.n	8006df6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d060      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_OscConfig+0x310>
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b0c      	cmp	r3, #12
 8006e0c:	d119      	bne.n	8006e42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d116      	bne.n	8006e42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e14:	4b7c      	ldr	r3, [pc, #496]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_OscConfig+0x328>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e23f      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2c:	4b76      	ldr	r3, [pc, #472]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	4973      	ldr	r1, [pc, #460]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e40:	e040      	b.n	8006ec4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d023      	beq.n	8006e92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7fe fa23 	bl	80052a0 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5e:	f7fe fa1f 	bl	80052a0 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e21d      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e70:	4b65      	ldr	r3, [pc, #404]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7c:	4b62      	ldr	r3, [pc, #392]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	061b      	lsls	r3, r3, #24
 8006e8a:	495f      	ldr	r1, [pc, #380]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	604b      	str	r3, [r1, #4]
 8006e90:	e018      	b.n	8006ec4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e92:	4b5d      	ldr	r3, [pc, #372]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a5c      	ldr	r2, [pc, #368]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fe f9ff 	bl	80052a0 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea6:	f7fe f9fb 	bl	80052a0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e1f9      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eb8:	4b53      	ldr	r3, [pc, #332]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f0      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d03c      	beq.n	8006f4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01c      	beq.n	8006f12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ede:	4a4a      	ldr	r2, [pc, #296]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee8:	f7fe f9da 	bl	80052a0 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef0:	f7fe f9d6 	bl	80052a0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e1d4      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f02:	4b41      	ldr	r3, [pc, #260]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ef      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x3ec>
 8006f10:	e01b      	b.n	8006f4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f12:	4b3d      	ldr	r3, [pc, #244]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f18:	4a3b      	ldr	r2, [pc, #236]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f22:	f7fe f9bd 	bl	80052a0 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2a:	f7fe f9b9 	bl	80052a0 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e1b7      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f3c:	4b32      	ldr	r3, [pc, #200]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ef      	bne.n	8006f2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80a6 	beq.w	80070a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10d      	bne.n	8006f84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f68:	4b27      	ldr	r3, [pc, #156]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6c:	4a26      	ldr	r2, [pc, #152]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f74:	4b24      	ldr	r3, [pc, #144]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f80:	2301      	movs	r3, #1
 8006f82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f84:	4b21      	ldr	r3, [pc, #132]	@ (800700c <HAL_RCC_OscConfig+0x508>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d118      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f90:	4b1e      	ldr	r3, [pc, #120]	@ (800700c <HAL_RCC_OscConfig+0x508>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	@ (800700c <HAL_RCC_OscConfig+0x508>)
 8006f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f9c:	f7fe f980 	bl	80052a0 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa4:	f7fe f97c 	bl	80052a0 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e17a      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb6:	4b15      	ldr	r3, [pc, #84]	@ (800700c <HAL_RCC_OscConfig+0x508>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d108      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4d8>
 8006fca:	4b0f      	ldr	r3, [pc, #60]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fda:	e029      	b.n	8007030 <HAL_RCC_OscConfig+0x52c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d115      	bne.n	8007010 <HAL_RCC_OscConfig+0x50c>
 8006fe4:	4b08      	ldr	r3, [pc, #32]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fea:	4a07      	ldr	r2, [pc, #28]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006fec:	f043 0304 	orr.w	r3, r3, #4
 8006ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ff4:	4b04      	ldr	r3, [pc, #16]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffa:	4a03      	ldr	r2, [pc, #12]	@ (8007008 <HAL_RCC_OscConfig+0x504>)
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007004:	e014      	b.n	8007030 <HAL_RCC_OscConfig+0x52c>
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000
 800700c:	40007000 	.word	0x40007000
 8007010:	4b9c      	ldr	r3, [pc, #624]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007016:	4a9b      	ldr	r2, [pc, #620]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007020:	4b98      	ldr	r3, [pc, #608]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007026:	4a97      	ldr	r2, [pc, #604]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007028:	f023 0304 	bic.w	r3, r3, #4
 800702c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d016      	beq.n	8007066 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fe f932 	bl	80052a0 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800703e:	e00a      	b.n	8007056 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007040:	f7fe f92e 	bl	80052a0 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e12a      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007056:	4b8b      	ldr	r3, [pc, #556]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0ed      	beq.n	8007040 <HAL_RCC_OscConfig+0x53c>
 8007064:	e015      	b.n	8007092 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007066:	f7fe f91b 	bl	80052a0 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800706c:	e00a      	b.n	8007084 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706e:	f7fe f917 	bl	80052a0 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707c:	4293      	cmp	r3, r2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e113      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007084:	4b7f      	ldr	r3, [pc, #508]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1ed      	bne.n	800706e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007092:	7ffb      	ldrb	r3, [r7, #31]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d105      	bne.n	80070a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007098:	4b7a      	ldr	r3, [pc, #488]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800709a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709c:	4a79      	ldr	r2, [pc, #484]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800709e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80fe 	beq.w	80072aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	f040 80d0 	bne.w	8007258 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80070b8:	4b72      	ldr	r3, [pc, #456]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 0203 	and.w	r2, r3, #3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d130      	bne.n	800712e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	3b01      	subs	r3, #1
 80070d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d127      	bne.n	800712e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d11f      	bne.n	800712e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070f8:	2a07      	cmp	r2, #7
 80070fa:	bf14      	ite	ne
 80070fc:	2201      	movne	r2, #1
 80070fe:	2200      	moveq	r2, #0
 8007100:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007102:	4293      	cmp	r3, r2
 8007104:	d113      	bne.n	800712e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	3b01      	subs	r3, #1
 8007114:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007116:	429a      	cmp	r2, r3
 8007118:	d109      	bne.n	800712e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	3b01      	subs	r3, #1
 8007128:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d06e      	beq.n	800720c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d069      	beq.n	8007208 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007134:	4b53      	ldr	r3, [pc, #332]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007140:	4b50      	ldr	r3, [pc, #320]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e0ad      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007150:	4b4c      	ldr	r3, [pc, #304]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a4b      	ldr	r2, [pc, #300]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800715a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800715c:	f7fe f8a0 	bl	80052a0 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007164:	f7fe f89c 	bl	80052a0 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e09a      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007176:	4b43      	ldr	r3, [pc, #268]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007182:	4b40      	ldr	r3, [pc, #256]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	4b40      	ldr	r3, [pc, #256]	@ (8007288 <HAL_RCC_OscConfig+0x784>)
 8007188:	4013      	ands	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007192:	3a01      	subs	r2, #1
 8007194:	0112      	lsls	r2, r2, #4
 8007196:	4311      	orrs	r1, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800719c:	0212      	lsls	r2, r2, #8
 800719e:	4311      	orrs	r1, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071a4:	0852      	lsrs	r2, r2, #1
 80071a6:	3a01      	subs	r2, #1
 80071a8:	0552      	lsls	r2, r2, #21
 80071aa:	4311      	orrs	r1, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80071b0:	0852      	lsrs	r2, r2, #1
 80071b2:	3a01      	subs	r2, #1
 80071b4:	0652      	lsls	r2, r2, #25
 80071b6:	4311      	orrs	r1, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80071bc:	0912      	lsrs	r2, r2, #4
 80071be:	0452      	lsls	r2, r2, #17
 80071c0:	430a      	orrs	r2, r1
 80071c2:	4930      	ldr	r1, [pc, #192]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80071c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071e0:	f7fe f85e 	bl	80052a0 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e8:	f7fe f85a 	bl	80052a0 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e058      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071fa:	4b22      	ldr	r3, [pc, #136]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007206:	e050      	b.n	80072aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e04f      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800720c:	4b1d      	ldr	r3, [pc, #116]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d148      	bne.n	80072aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007218:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a19      	ldr	r2, [pc, #100]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800721e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007222:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007224:	4b17      	ldr	r3, [pc, #92]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4a16      	ldr	r2, [pc, #88]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800722a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800722e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007230:	f7fe f836 	bl	80052a0 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007238:	f7fe f832 	bl	80052a0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e030      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x734>
 8007256:	e028      	b.n	80072aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b0c      	cmp	r3, #12
 800725c:	d023      	beq.n	80072a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725e:	4b09      	ldr	r3, [pc, #36]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <HAL_RCC_OscConfig+0x780>)
 8007264:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726a:	f7fe f819 	bl	80052a0 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007270:	e00c      	b.n	800728c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007272:	f7fe f815 	bl	80052a0 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d905      	bls.n	800728c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e013      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
 8007284:	40021000 	.word	0x40021000
 8007288:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800728c:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <HAL_RCC_OscConfig+0x7b0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1ec      	bne.n	8007272 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <HAL_RCC_OscConfig+0x7b0>)
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	4905      	ldr	r1, [pc, #20]	@ (80072b4 <HAL_RCC_OscConfig+0x7b0>)
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <HAL_RCC_OscConfig+0x7b4>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	60cb      	str	r3, [r1, #12]
 80072a4:	e001      	b.n	80072aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40021000 	.word	0x40021000
 80072b8:	feeefffc 	.word	0xfeeefffc

080072bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0e7      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b75      	ldr	r3, [pc, #468]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d910      	bls.n	8007300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b72      	ldr	r3, [pc, #456]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f023 0207 	bic.w	r2, r3, #7
 80072e6:	4970      	ldr	r1, [pc, #448]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ee:	4b6e      	ldr	r3, [pc, #440]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d001      	beq.n	8007300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0cf      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d010      	beq.n	800732e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	4b66      	ldr	r3, [pc, #408]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007318:	429a      	cmp	r2, r3
 800731a:	d908      	bls.n	800732e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800731c:	4b63      	ldr	r3, [pc, #396]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	4960      	ldr	r1, [pc, #384]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800732a:	4313      	orrs	r3, r2
 800732c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d04c      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d107      	bne.n	8007352 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007342:	4b5a      	ldr	r3, [pc, #360]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d121      	bne.n	8007392 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e0a6      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800735a:	4b54      	ldr	r3, [pc, #336]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d115      	bne.n	8007392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e09a      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007372:	4b4e      	ldr	r3, [pc, #312]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e08e      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007382:	4b4a      	ldr	r3, [pc, #296]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e086      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007392:	4b46      	ldr	r3, [pc, #280]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 0203 	bic.w	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4943      	ldr	r1, [pc, #268]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fd ff7c 	bl	80052a0 <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073aa:	e00a      	b.n	80073c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ac:	f7fd ff78 	bl	80052a0 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e06e      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c2:	4b3a      	ldr	r3, [pc, #232]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 020c 	and.w	r2, r3, #12
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1eb      	bne.n	80073ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	4b31      	ldr	r3, [pc, #196]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d208      	bcs.n	8007402 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073f0:	4b2e      	ldr	r3, [pc, #184]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	492b      	ldr	r1, [pc, #172]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007402:	4b29      	ldr	r3, [pc, #164]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d210      	bcs.n	8007432 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007410:	4b25      	ldr	r3, [pc, #148]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f023 0207 	bic.w	r2, r3, #7
 8007418:	4923      	ldr	r1, [pc, #140]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007420:	4b21      	ldr	r3, [pc, #132]	@ (80074a8 <HAL_RCC_ClockConfig+0x1ec>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d001      	beq.n	8007432 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e036      	b.n	80074a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800743e:	4b1b      	ldr	r3, [pc, #108]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4918      	ldr	r1, [pc, #96]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800744c:	4313      	orrs	r3, r2
 800744e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800745c:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4910      	ldr	r1, [pc, #64]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 800746c:	4313      	orrs	r3, r2
 800746e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007470:	f000 f824 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <HAL_RCC_ClockConfig+0x1f0>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	490b      	ldr	r1, [pc, #44]	@ (80074b0 <HAL_RCC_ClockConfig+0x1f4>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
 800748c:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <HAL_RCC_ClockConfig+0x1f8>)
 800748e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007490:	4b09      	ldr	r3, [pc, #36]	@ (80074b8 <HAL_RCC_ClockConfig+0x1fc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd feb3 	bl	8005200 <HAL_InitTick>
 800749a:	4603      	mov	r3, r0
 800749c:	72fb      	strb	r3, [r7, #11]

  return status;
 800749e:	7afb      	ldrb	r3, [r7, #11]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40022000 	.word	0x40022000
 80074ac:	40021000 	.word	0x40021000
 80074b0:	0801fad0 	.word	0x0801fad0
 80074b4:	20000048 	.word	0x20000048
 80074b8:	2000004c 	.word	0x2000004c

080074bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	@ 0x24
 80074c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ca:	4b3e      	ldr	r3, [pc, #248]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
 80074d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d4:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_RCC_GetSysClockFreq+0x34>
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b0c      	cmp	r3, #12
 80074e8:	d121      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d11e      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80074f0:	4b34      	ldr	r3, [pc, #208]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80074fc:	4b31      	ldr	r3, [pc, #196]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80074fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	e005      	b.n	8007518 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800750c:	4b2d      	ldr	r3, [pc, #180]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007518:	4a2b      	ldr	r2, [pc, #172]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007520:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800752c:	e00a      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d102      	bne.n	800753a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007534:	4b25      	ldr	r3, [pc, #148]	@ (80075cc <HAL_RCC_GetSysClockFreq+0x110>)
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e004      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b08      	cmp	r3, #8
 800753e:	d101      	bne.n	8007544 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007540:	4b23      	ldr	r3, [pc, #140]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007542:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b0c      	cmp	r3, #12
 8007548:	d134      	bne.n	80075b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800754a:	4b1e      	ldr	r3, [pc, #120]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d003      	beq.n	8007562 <HAL_RCC_GetSysClockFreq+0xa6>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d003      	beq.n	8007568 <HAL_RCC_GetSysClockFreq+0xac>
 8007560:	e005      	b.n	800756e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007562:	4b1a      	ldr	r3, [pc, #104]	@ (80075cc <HAL_RCC_GetSysClockFreq+0x110>)
 8007564:	617b      	str	r3, [r7, #20]
      break;
 8007566:	e005      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007568:	4b19      	ldr	r3, [pc, #100]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800756a:	617b      	str	r3, [r7, #20]
      break;
 800756c:	e002      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	617b      	str	r3, [r7, #20]
      break;
 8007572:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007574:	4b13      	ldr	r3, [pc, #76]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	3301      	adds	r3, #1
 8007580:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	fb03 f202 	mul.w	r2, r3, r2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800759a:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	0e5b      	lsrs	r3, r3, #25
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	3301      	adds	r3, #1
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075b4:	69bb      	ldr	r3, [r7, #24]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3724      	adds	r7, #36	@ 0x24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40021000 	.word	0x40021000
 80075c8:	0801fae8 	.word	0x0801fae8
 80075cc:	00f42400 	.word	0x00f42400
 80075d0:	007a1200 	.word	0x007a1200

080075d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d8:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075da:	681b      	ldr	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000048 	.word	0x20000048

080075ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80075f0:	f7ff fff0 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4904      	ldr	r1, [pc, #16]	@ (8007614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40021000 	.word	0x40021000
 8007614:	0801fae0 	.word	0x0801fae0

08007618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800761c:	f7ff ffda 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b06      	ldr	r3, [pc, #24]	@ (800763c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0adb      	lsrs	r3, r3, #11
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4904      	ldr	r1, [pc, #16]	@ (8007640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	0801fae0 	.word	0x0801fae0

08007644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007650:	4b2a      	ldr	r3, [pc, #168]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800765c:	f7ff f9ee 	bl	8006a3c <HAL_PWREx_GetVoltageRange>
 8007660:	6178      	str	r0, [r7, #20]
 8007662:	e014      	b.n	800768e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007664:	4b25      	ldr	r3, [pc, #148]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007668:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800766a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800766e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007670:	4b22      	ldr	r3, [pc, #136]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800767c:	f7ff f9de 	bl	8006a3c <HAL_PWREx_GetVoltageRange>
 8007680:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007682:	4b1e      	ldr	r3, [pc, #120]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007686:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800768c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007694:	d10b      	bne.n	80076ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b80      	cmp	r3, #128	@ 0x80
 800769a:	d919      	bls.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2ba0      	cmp	r3, #160	@ 0xa0
 80076a0:	d902      	bls.n	80076a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076a2:	2302      	movs	r3, #2
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	e013      	b.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076a8:	2301      	movs	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e010      	b.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b80      	cmp	r3, #128	@ 0x80
 80076b2:	d902      	bls.n	80076ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80076b4:	2303      	movs	r3, #3
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	e00a      	b.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b80      	cmp	r3, #128	@ 0x80
 80076be:	d102      	bne.n	80076c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076c0:	2302      	movs	r3, #2
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	e004      	b.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b70      	cmp	r3, #112	@ 0x70
 80076ca:	d101      	bne.n	80076d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076cc:	2301      	movs	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f023 0207 	bic.w	r2, r3, #7
 80076d8:	4909      	ldr	r1, [pc, #36]	@ (8007700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076e0:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d001      	beq.n	80076f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000
 8007700:	40022000 	.word	0x40022000

08007704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800770c:	2300      	movs	r3, #0
 800770e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007710:	2300      	movs	r3, #0
 8007712:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800771c:	2b00      	cmp	r3, #0
 800771e:	d041      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007724:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007728:	d02a      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800772a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800772e:	d824      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007730:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007734:	d008      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007736:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800773a:	d81e      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007744:	d010      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007746:	e018      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007748:	4b86      	ldr	r3, [pc, #536]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4a85      	ldr	r2, [pc, #532]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800774e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007752:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007754:	e015      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fabb 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007766:	e00c      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3320      	adds	r3, #32
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fba6 	bl	8007ec0 <RCCEx_PLLSAI2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	74fb      	strb	r3, [r7, #19]
      break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7cfb      	ldrb	r3, [r7, #19]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007788:	4b76      	ldr	r3, [pc, #472]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007796:	4973      	ldr	r1, [pc, #460]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007798:	4313      	orrs	r3, r2
 800779a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800779e:	e001      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	7cfb      	ldrb	r3, [r7, #19]
 80077a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d041      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077b8:	d02a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80077ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077be:	d824      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077c4:	d008      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077ca:	d81e      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80077d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077d4:	d010      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80077d6:	e018      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077d8:	4b62      	ldr	r3, [pc, #392]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4a61      	ldr	r2, [pc, #388]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077e4:	e015      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3304      	adds	r3, #4
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fa73 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077f6:	e00c      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3320      	adds	r3, #32
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fb5e 	bl	8007ec0 <RCCEx_PLLSAI2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007808:	e003      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	74fb      	strb	r3, [r7, #19]
      break;
 800780e:	e000      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007812:	7cfb      	ldrb	r3, [r7, #19]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007818:	4b52      	ldr	r3, [pc, #328]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007826:	494f      	ldr	r1, [pc, #316]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800782e:	e001      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	7cfb      	ldrb	r3, [r7, #19]
 8007832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80a0 	beq.w	8007982 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007842:	2300      	movs	r3, #0
 8007844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007846:	4b47      	ldr	r3, [pc, #284]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00d      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785c:	4b41      	ldr	r3, [pc, #260]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800785e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007860:	4a40      	ldr	r2, [pc, #256]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007866:	6593      	str	r3, [r2, #88]	@ 0x58
 8007868:	4b3e      	ldr	r3, [pc, #248]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800786a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007874:	2301      	movs	r3, #1
 8007876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007878:	4b3b      	ldr	r3, [pc, #236]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a3a      	ldr	r2, [pc, #232]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800787e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007884:	f7fd fd0c 	bl	80052a0 <HAL_GetTick>
 8007888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800788a:	e009      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800788c:	f7fd fd08 	bl	80052a0 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d902      	bls.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	74fb      	strb	r3, [r7, #19]
        break;
 800789e:	e005      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80078a0:	4b31      	ldr	r3, [pc, #196]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0ef      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80078ac:	7cfb      	ldrb	r3, [r7, #19]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d15c      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01f      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d019      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078d0:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078dc:	4b21      	ldr	r3, [pc, #132]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e2:	4a20      	ldr	r2, [pc, #128]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078fc:	4a19      	ldr	r2, [pc, #100]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790e:	f7fd fcc7 	bl	80052a0 <HAL_GetTick>
 8007912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007914:	e00b      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007916:	f7fd fcc3 	bl	80052a0 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007924:	4293      	cmp	r3, r2
 8007926:	d902      	bls.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	74fb      	strb	r3, [r7, #19]
            break;
 800792c:	e006      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0ec      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800793c:	7cfb      	ldrb	r3, [r7, #19]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10c      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007952:	4904      	ldr	r1, [pc, #16]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800795a:	e009      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	74bb      	strb	r3, [r7, #18]
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007962:	bf00      	nop
 8007964:	40021000 	.word	0x40021000
 8007968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	7cfb      	ldrb	r3, [r7, #19]
 800796e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007970:	7c7b      	ldrb	r3, [r7, #17]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007976:	4b9e      	ldr	r3, [pc, #632]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797a:	4a9d      	ldr	r2, [pc, #628]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800797c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007980:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800798e:	4b98      	ldr	r3, [pc, #608]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007994:	f023 0203 	bic.w	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	4994      	ldr	r1, [pc, #592]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079b0:	4b8f      	ldr	r3, [pc, #572]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b6:	f023 020c 	bic.w	r2, r3, #12
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079be:	498c      	ldr	r1, [pc, #560]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079d2:	4b87      	ldr	r3, [pc, #540]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	4983      	ldr	r1, [pc, #524]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079f4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a02:	497b      	ldr	r1, [pc, #492]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a16:	4b76      	ldr	r3, [pc, #472]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a24:	4972      	ldr	r1, [pc, #456]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a38:	4b6d      	ldr	r3, [pc, #436]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a46:	496a      	ldr	r1, [pc, #424]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a5a:	4b65      	ldr	r3, [pc, #404]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a68:	4961      	ldr	r1, [pc, #388]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a8a:	4959      	ldr	r1, [pc, #356]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a9e:	4b54      	ldr	r3, [pc, #336]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aac:	4950      	ldr	r1, [pc, #320]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ace:	4948      	ldr	r1, [pc, #288]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ae2:	4b43      	ldr	r3, [pc, #268]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af0:	493f      	ldr	r1, [pc, #252]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d028      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b04:	4b3a      	ldr	r3, [pc, #232]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b12:	4937      	ldr	r1, [pc, #220]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b22:	d106      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b24:	4b32      	ldr	r3, [pc, #200]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a31      	ldr	r2, [pc, #196]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b2e:	60d3      	str	r3, [r2, #12]
 8007b30:	e011      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b3a:	d10c      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f8c8 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007b4c:	7cfb      	ldrb	r3, [r7, #19]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007b52:	7cfb      	ldrb	r3, [r7, #19]
 8007b54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d028      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b62:	4b23      	ldr	r3, [pc, #140]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b70:	491f      	ldr	r1, [pc, #124]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b80:	d106      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b82:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b8c:	60d3      	str	r3, [r2, #12]
 8007b8e:	e011      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b98:	d10c      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f899 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007baa:	7cfb      	ldrb	r3, [r7, #19]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007bb0:	7cfb      	ldrb	r3, [r7, #19]
 8007bb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02b      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bce:	4908      	ldr	r1, [pc, #32]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bde:	d109      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be0:	4b03      	ldr	r3, [pc, #12]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a02      	ldr	r2, [pc, #8]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bea:	60d3      	str	r3, [r2, #12]
 8007bec:	e014      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bfc:	d10c      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3304      	adds	r3, #4
 8007c02:	2101      	movs	r1, #1
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f867 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c0e:	7cfb      	ldrb	r3, [r7, #19]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007c14:	7cfb      	ldrb	r3, [r7, #19]
 8007c16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d02f      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c24:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c32:	4928      	ldr	r1, [pc, #160]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c42:	d10d      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f844 	bl	8007cd8 <RCCEx_PLLSAI1_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c54:	7cfb      	ldrb	r3, [r7, #19]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d014      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c5a:	7cfb      	ldrb	r3, [r7, #19]
 8007c5c:	74bb      	strb	r3, [r7, #18]
 8007c5e:	e011      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c68:	d10c      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3320      	adds	r3, #32
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f925 	bl	8007ec0 <RCCEx_PLLSAI2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c7a:	7cfb      	ldrb	r3, [r7, #19]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c80:	7cfb      	ldrb	r3, [r7, #19]
 8007c82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c90:	4b10      	ldr	r3, [pc, #64]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c9e:	490d      	ldr	r1, [pc, #52]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cb2:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc2:	4904      	ldr	r1, [pc, #16]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007cca:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40021000 	.word	0x40021000

08007cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ce6:	4b75      	ldr	r3, [pc, #468]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d018      	beq.n	8007d24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007cf2:	4b72      	ldr	r3, [pc, #456]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0203 	and.w	r2, r3, #3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d10d      	bne.n	8007d1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
       ||
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
       ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d047      	beq.n	8007dae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
 8007d22:	e044      	b.n	8007dae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d018      	beq.n	8007d5e <RCCEx_PLLSAI1_Config+0x86>
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d825      	bhi.n	8007d7c <RCCEx_PLLSAI1_Config+0xa4>
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d002      	beq.n	8007d3a <RCCEx_PLLSAI1_Config+0x62>
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d009      	beq.n	8007d4c <RCCEx_PLLSAI1_Config+0x74>
 8007d38:	e020      	b.n	8007d7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d3a:	4b60      	ldr	r3, [pc, #384]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d11d      	bne.n	8007d82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d4a:	e01a      	b.n	8007d82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d116      	bne.n	8007d86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d5c:	e013      	b.n	8007d86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d5e:	4b57      	ldr	r3, [pc, #348]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10f      	bne.n	8007d8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d6a:	4b54      	ldr	r3, [pc, #336]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d7a:	e006      	b.n	8007d8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d80:	e004      	b.n	8007d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d82:	bf00      	nop
 8007d84:	e002      	b.n	8007d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d86:	bf00      	nop
 8007d88:	e000      	b.n	8007d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10d      	bne.n	8007dae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d92:	4b4a      	ldr	r3, [pc, #296]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6819      	ldr	r1, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	430b      	orrs	r3, r1
 8007da8:	4944      	ldr	r1, [pc, #272]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d17d      	bne.n	8007eb0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007db4:	4b41      	ldr	r3, [pc, #260]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a40      	ldr	r2, [pc, #256]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc0:	f7fd fa6e 	bl	80052a0 <HAL_GetTick>
 8007dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dc6:	e009      	b.n	8007ddc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dc8:	f7fd fa6a 	bl	80052a0 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d902      	bls.n	8007ddc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8007dda:	e005      	b.n	8007de8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ddc:	4b37      	ldr	r3, [pc, #220]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ef      	bne.n	8007dc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d160      	bne.n	8007eb0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d111      	bne.n	8007e18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007df4:	4b31      	ldr	r3, [pc, #196]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6892      	ldr	r2, [r2, #8]
 8007e04:	0211      	lsls	r1, r2, #8
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68d2      	ldr	r2, [r2, #12]
 8007e0a:	0912      	lsrs	r2, r2, #4
 8007e0c:	0452      	lsls	r2, r2, #17
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	492a      	ldr	r1, [pc, #168]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]
 8007e16:	e027      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d112      	bne.n	8007e44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e1e:	4b27      	ldr	r3, [pc, #156]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007e26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	0211      	lsls	r1, r2, #8
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6912      	ldr	r2, [r2, #16]
 8007e34:	0852      	lsrs	r2, r2, #1
 8007e36:	3a01      	subs	r2, #1
 8007e38:	0552      	lsls	r2, r2, #21
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	491f      	ldr	r1, [pc, #124]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	610b      	str	r3, [r1, #16]
 8007e42:	e011      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e44:	4b1d      	ldr	r3, [pc, #116]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007e4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6892      	ldr	r2, [r2, #8]
 8007e54:	0211      	lsls	r1, r2, #8
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6952      	ldr	r2, [r2, #20]
 8007e5a:	0852      	lsrs	r2, r2, #1
 8007e5c:	3a01      	subs	r2, #1
 8007e5e:	0652      	lsls	r2, r2, #25
 8007e60:	430a      	orrs	r2, r1
 8007e62:	4916      	ldr	r1, [pc, #88]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e68:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a13      	ldr	r2, [pc, #76]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e74:	f7fd fa14 	bl	80052a0 <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e7a:	e009      	b.n	8007e90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e7c:	f7fd fa10 	bl	80052a0 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d902      	bls.n	8007e90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
          break;
 8007e8e:	e005      	b.n	8007e9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0ef      	beq.n	8007e7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	4904      	ldr	r1, [pc, #16]	@ (8007ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ece:	4b6a      	ldr	r3, [pc, #424]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007eda:	4b67      	ldr	r3, [pc, #412]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f003 0203 	and.w	r2, r3, #3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d10d      	bne.n	8007f06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
       ||
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007ef2:	4b61      	ldr	r3, [pc, #388]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
       ||
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d047      	beq.n	8007f96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]
 8007f0a:	e044      	b.n	8007f96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d018      	beq.n	8007f46 <RCCEx_PLLSAI2_Config+0x86>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d825      	bhi.n	8007f64 <RCCEx_PLLSAI2_Config+0xa4>
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d002      	beq.n	8007f22 <RCCEx_PLLSAI2_Config+0x62>
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d009      	beq.n	8007f34 <RCCEx_PLLSAI2_Config+0x74>
 8007f20:	e020      	b.n	8007f64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f22:	4b55      	ldr	r3, [pc, #340]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d11d      	bne.n	8007f6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f32:	e01a      	b.n	8007f6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f34:	4b50      	ldr	r3, [pc, #320]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d116      	bne.n	8007f6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f44:	e013      	b.n	8007f6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f46:	4b4c      	ldr	r3, [pc, #304]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10f      	bne.n	8007f72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f52:	4b49      	ldr	r3, [pc, #292]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f62:	e006      	b.n	8007f72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e004      	b.n	8007f74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f6a:	bf00      	nop
 8007f6c:	e002      	b.n	8007f74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f72:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10d      	bne.n	8007f96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6819      	ldr	r1, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	4939      	ldr	r1, [pc, #228]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d167      	bne.n	800806c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f9c:	4b36      	ldr	r3, [pc, #216]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa8:	f7fd f97a 	bl	80052a0 <HAL_GetTick>
 8007fac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fae:	e009      	b.n	8007fc4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fb0:	f7fd f976 	bl	80052a0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d902      	bls.n	8007fc4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8007fc2:	e005      	b.n	8007fd0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1ef      	bne.n	8007fb0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d14a      	bne.n	800806c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d111      	bne.n	8008000 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fdc:	4b26      	ldr	r3, [pc, #152]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	0211      	lsls	r1, r2, #8
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68d2      	ldr	r2, [r2, #12]
 8007ff2:	0912      	lsrs	r2, r2, #4
 8007ff4:	0452      	lsls	r2, r2, #17
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	491f      	ldr	r1, [pc, #124]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	614b      	str	r3, [r1, #20]
 8007ffe:	e011      	b.n	8008024 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008000:	4b1d      	ldr	r3, [pc, #116]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008008:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6892      	ldr	r2, [r2, #8]
 8008010:	0211      	lsls	r1, r2, #8
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6912      	ldr	r2, [r2, #16]
 8008016:	0852      	lsrs	r2, r2, #1
 8008018:	3a01      	subs	r2, #1
 800801a:	0652      	lsls	r2, r2, #25
 800801c:	430a      	orrs	r2, r1
 800801e:	4916      	ldr	r1, [pc, #88]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008020:	4313      	orrs	r3, r2
 8008022:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008024:	4b14      	ldr	r3, [pc, #80]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a13      	ldr	r2, [pc, #76]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 800802a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800802e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008030:	f7fd f936 	bl	80052a0 <HAL_GetTick>
 8008034:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008036:	e009      	b.n	800804c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008038:	f7fd f932 	bl	80052a0 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d902      	bls.n	800804c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
          break;
 800804a:	e005      	b.n	8008058 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800804c:	4b0a      	ldr	r3, [pc, #40]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0ef      	beq.n	8008038 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800805e:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	4904      	ldr	r1, [pc, #16]	@ (8008078 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008068:	4313      	orrs	r3, r2
 800806a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40021000 	.word	0x40021000

0800807c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e040      	b.n	8008110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f83a 	bl	8008118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2224      	movs	r2, #36	@ 0x24
 80080a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fc3c 	bl	8008940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f981 	bl	80083d0 <UART_SetConfig>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e01b      	b.n	8008110 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0201 	orr.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcbb 	bl	8008a84 <UART_CheckIdleState>
 800810e:	4603      	mov	r3, r0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008140:	2b20      	cmp	r3, #32
 8008142:	d177      	bne.n	8008234 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_UART_Transmit+0x24>
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e070      	b.n	8008236 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2221      	movs	r2, #33	@ 0x21
 8008160:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008162:	f7fd f89d 	bl	80052a0 <HAL_GetTick>
 8008166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008180:	d108      	bne.n	8008194 <HAL_UART_Transmit+0x68>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	e003      	b.n	800819c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800819c:	e02f      	b.n	80081fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2200      	movs	r2, #0
 80081a6:	2180      	movs	r1, #128	@ 0x80
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fd13 	bl	8008bd4 <UART_WaitOnFlagUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e03b      	b.n	8008236 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	881a      	ldrh	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081d0:	b292      	uxth	r2, r2
 80081d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3302      	adds	r3, #2
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	e007      	b.n	80081ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	3301      	adds	r3, #1
 80081ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1c9      	bne.n	800819e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2200      	movs	r2, #0
 8008212:	2140      	movs	r1, #64	@ 0x40
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fcdd 	bl	8008bd4 <UART_WaitOnFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2220      	movs	r2, #32
 8008224:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e005      	b.n	8008236 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3720      	adds	r7, #32
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b08a      	sub	sp, #40	@ 0x28
 8008242:	af02      	add	r7, sp, #8
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008254:	2b20      	cmp	r3, #32
 8008256:	f040 80b6 	bne.w	80083c6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_UART_Receive+0x28>
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e0ae      	b.n	80083c8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2222      	movs	r2, #34	@ 0x22
 8008276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008280:	f7fd f80e 	bl	80052a0 <HAL_GetTick>
 8008284:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800829e:	d10e      	bne.n	80082be <HAL_UART_Receive+0x80>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <HAL_UART_Receive+0x76>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80082ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082b2:	e02d      	b.n	8008310 <HAL_UART_Receive+0xd2>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	22ff      	movs	r2, #255	@ 0xff
 80082b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082bc:	e028      	b.n	8008310 <HAL_UART_Receive+0xd2>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10d      	bne.n	80082e2 <HAL_UART_Receive+0xa4>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <HAL_UART_Receive+0x9a>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	22ff      	movs	r2, #255	@ 0xff
 80082d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082d6:	e01b      	b.n	8008310 <HAL_UART_Receive+0xd2>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	227f      	movs	r2, #127	@ 0x7f
 80082dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082e0:	e016      	b.n	8008310 <HAL_UART_Receive+0xd2>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ea:	d10d      	bne.n	8008308 <HAL_UART_Receive+0xca>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <HAL_UART_Receive+0xc0>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	227f      	movs	r2, #127	@ 0x7f
 80082f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082fc:	e008      	b.n	8008310 <HAL_UART_Receive+0xd2>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	223f      	movs	r2, #63	@ 0x3f
 8008302:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008306:	e003      	b.n	8008310 <HAL_UART_Receive+0xd2>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008316:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008320:	d108      	bne.n	8008334 <HAL_UART_Receive+0xf6>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	e003      	b.n	800833c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800833c:	e037      	b.n	80083ae <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2200      	movs	r2, #0
 8008346:	2120      	movs	r1, #32
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fc43 	bl	8008bd4 <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e033      	b.n	80083c8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10c      	bne.n	8008380 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800836c:	b29a      	uxth	r2, r3
 800836e:	8a7b      	ldrh	r3, [r7, #18]
 8008370:	4013      	ands	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	3302      	adds	r3, #2
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e00d      	b.n	800839c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008386:	b29b      	uxth	r3, r3
 8008388:	b2da      	uxtb	r2, r3
 800838a:	8a7b      	ldrh	r3, [r7, #18]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	4013      	ands	r3, r2
 8008390:	b2da      	uxtb	r2, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	3301      	adds	r3, #1
 800839a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1c1      	bne.n	800833e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e000      	b.n	80083c8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083d4:	b08a      	sub	sp, #40	@ 0x28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4ba4      	ldr	r3, [pc, #656]	@ (8008690 <UART_SetConfig+0x2c0>)
 8008400:	4013      	ands	r3, r2
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	6812      	ldr	r2, [r2, #0]
 8008406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008408:	430b      	orrs	r3, r1
 800840a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a99      	ldr	r2, [pc, #612]	@ (8008694 <UART_SetConfig+0x2c4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008438:	4313      	orrs	r3, r2
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844c:	430a      	orrs	r2, r1
 800844e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a90      	ldr	r2, [pc, #576]	@ (8008698 <UART_SetConfig+0x2c8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d126      	bne.n	80084a8 <UART_SetConfig+0xd8>
 800845a:	4b90      	ldr	r3, [pc, #576]	@ (800869c <UART_SetConfig+0x2cc>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	2b03      	cmp	r3, #3
 8008466:	d81b      	bhi.n	80084a0 <UART_SetConfig+0xd0>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0xa0>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008481 	.word	0x08008481
 8008474:	08008491 	.word	0x08008491
 8008478:	08008489 	.word	0x08008489
 800847c:	08008499 	.word	0x08008499
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008486:	e116      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008488:	2302      	movs	r3, #2
 800848a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800848e:	e112      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008496:	e10e      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800849e:	e10a      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084a6:	e106      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a7c      	ldr	r2, [pc, #496]	@ (80086a0 <UART_SetConfig+0x2d0>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d138      	bne.n	8008524 <UART_SetConfig+0x154>
 80084b2:	4b7a      	ldr	r3, [pc, #488]	@ (800869c <UART_SetConfig+0x2cc>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b8:	f003 030c 	and.w	r3, r3, #12
 80084bc:	2b0c      	cmp	r3, #12
 80084be:	d82d      	bhi.n	800851c <UART_SetConfig+0x14c>
 80084c0:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <UART_SetConfig+0xf8>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084fd 	.word	0x080084fd
 80084cc:	0800851d 	.word	0x0800851d
 80084d0:	0800851d 	.word	0x0800851d
 80084d4:	0800851d 	.word	0x0800851d
 80084d8:	0800850d 	.word	0x0800850d
 80084dc:	0800851d 	.word	0x0800851d
 80084e0:	0800851d 	.word	0x0800851d
 80084e4:	0800851d 	.word	0x0800851d
 80084e8:	08008505 	.word	0x08008505
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	0800851d 	.word	0x0800851d
 80084f8:	08008515 	.word	0x08008515
 80084fc:	2300      	movs	r3, #0
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008502:	e0d8      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008504:	2302      	movs	r3, #2
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800850a:	e0d4      	b.n	80086b6 <UART_SetConfig+0x2e6>
 800850c:	2304      	movs	r3, #4
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008512:	e0d0      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008514:	2308      	movs	r3, #8
 8008516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800851a:	e0cc      	b.n	80086b6 <UART_SetConfig+0x2e6>
 800851c:	2310      	movs	r3, #16
 800851e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008522:	e0c8      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a5e      	ldr	r2, [pc, #376]	@ (80086a4 <UART_SetConfig+0x2d4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d125      	bne.n	800857a <UART_SetConfig+0x1aa>
 800852e:	4b5b      	ldr	r3, [pc, #364]	@ (800869c <UART_SetConfig+0x2cc>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008534:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008538:	2b30      	cmp	r3, #48	@ 0x30
 800853a:	d016      	beq.n	800856a <UART_SetConfig+0x19a>
 800853c:	2b30      	cmp	r3, #48	@ 0x30
 800853e:	d818      	bhi.n	8008572 <UART_SetConfig+0x1a2>
 8008540:	2b20      	cmp	r3, #32
 8008542:	d00a      	beq.n	800855a <UART_SetConfig+0x18a>
 8008544:	2b20      	cmp	r3, #32
 8008546:	d814      	bhi.n	8008572 <UART_SetConfig+0x1a2>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <UART_SetConfig+0x182>
 800854c:	2b10      	cmp	r3, #16
 800854e:	d008      	beq.n	8008562 <UART_SetConfig+0x192>
 8008550:	e00f      	b.n	8008572 <UART_SetConfig+0x1a2>
 8008552:	2300      	movs	r3, #0
 8008554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008558:	e0ad      	b.n	80086b6 <UART_SetConfig+0x2e6>
 800855a:	2302      	movs	r3, #2
 800855c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008560:	e0a9      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008562:	2304      	movs	r3, #4
 8008564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008568:	e0a5      	b.n	80086b6 <UART_SetConfig+0x2e6>
 800856a:	2308      	movs	r3, #8
 800856c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008570:	e0a1      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008572:	2310      	movs	r3, #16
 8008574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008578:	e09d      	b.n	80086b6 <UART_SetConfig+0x2e6>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a4a      	ldr	r2, [pc, #296]	@ (80086a8 <UART_SetConfig+0x2d8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d125      	bne.n	80085d0 <UART_SetConfig+0x200>
 8008584:	4b45      	ldr	r3, [pc, #276]	@ (800869c <UART_SetConfig+0x2cc>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800858e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008590:	d016      	beq.n	80085c0 <UART_SetConfig+0x1f0>
 8008592:	2bc0      	cmp	r3, #192	@ 0xc0
 8008594:	d818      	bhi.n	80085c8 <UART_SetConfig+0x1f8>
 8008596:	2b80      	cmp	r3, #128	@ 0x80
 8008598:	d00a      	beq.n	80085b0 <UART_SetConfig+0x1e0>
 800859a:	2b80      	cmp	r3, #128	@ 0x80
 800859c:	d814      	bhi.n	80085c8 <UART_SetConfig+0x1f8>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <UART_SetConfig+0x1d8>
 80085a2:	2b40      	cmp	r3, #64	@ 0x40
 80085a4:	d008      	beq.n	80085b8 <UART_SetConfig+0x1e8>
 80085a6:	e00f      	b.n	80085c8 <UART_SetConfig+0x1f8>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ae:	e082      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80085b0:	2302      	movs	r3, #2
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085b6:	e07e      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085be:	e07a      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c6:	e076      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ce:	e072      	b.n	80086b6 <UART_SetConfig+0x2e6>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a35      	ldr	r2, [pc, #212]	@ (80086ac <UART_SetConfig+0x2dc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d12a      	bne.n	8008630 <UART_SetConfig+0x260>
 80085da:	4b30      	ldr	r3, [pc, #192]	@ (800869c <UART_SetConfig+0x2cc>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085e8:	d01a      	beq.n	8008620 <UART_SetConfig+0x250>
 80085ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ee:	d81b      	bhi.n	8008628 <UART_SetConfig+0x258>
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f4:	d00c      	beq.n	8008610 <UART_SetConfig+0x240>
 80085f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085fa:	d815      	bhi.n	8008628 <UART_SetConfig+0x258>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <UART_SetConfig+0x238>
 8008600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008604:	d008      	beq.n	8008618 <UART_SetConfig+0x248>
 8008606:	e00f      	b.n	8008628 <UART_SetConfig+0x258>
 8008608:	2300      	movs	r3, #0
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800860e:	e052      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008610:	2302      	movs	r3, #2
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008616:	e04e      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861e:	e04a      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008626:	e046      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862e:	e042      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a17      	ldr	r2, [pc, #92]	@ (8008694 <UART_SetConfig+0x2c4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d13a      	bne.n	80086b0 <UART_SetConfig+0x2e0>
 800863a:	4b18      	ldr	r3, [pc, #96]	@ (800869c <UART_SetConfig+0x2cc>)
 800863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008648:	d01a      	beq.n	8008680 <UART_SetConfig+0x2b0>
 800864a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800864e:	d81b      	bhi.n	8008688 <UART_SetConfig+0x2b8>
 8008650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008654:	d00c      	beq.n	8008670 <UART_SetConfig+0x2a0>
 8008656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800865a:	d815      	bhi.n	8008688 <UART_SetConfig+0x2b8>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <UART_SetConfig+0x298>
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008664:	d008      	beq.n	8008678 <UART_SetConfig+0x2a8>
 8008666:	e00f      	b.n	8008688 <UART_SetConfig+0x2b8>
 8008668:	2300      	movs	r3, #0
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800866e:	e022      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008670:	2302      	movs	r3, #2
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008676:	e01e      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867e:	e01a      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008686:	e016      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868e:	e012      	b.n	80086b6 <UART_SetConfig+0x2e6>
 8008690:	efff69f3 	.word	0xefff69f3
 8008694:	40008000 	.word	0x40008000
 8008698:	40013800 	.word	0x40013800
 800869c:	40021000 	.word	0x40021000
 80086a0:	40004400 	.word	0x40004400
 80086a4:	40004800 	.word	0x40004800
 80086a8:	40004c00 	.word	0x40004c00
 80086ac:	40005000 	.word	0x40005000
 80086b0:	2310      	movs	r3, #16
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a9f      	ldr	r2, [pc, #636]	@ (8008938 <UART_SetConfig+0x568>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d17a      	bne.n	80087b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d824      	bhi.n	8008712 <UART_SetConfig+0x342>
 80086c8:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <UART_SetConfig+0x300>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	08008713 	.word	0x08008713
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	08008713 	.word	0x08008713
 80086e0:	08008703 	.word	0x08008703
 80086e4:	08008713 	.word	0x08008713
 80086e8:	08008713 	.word	0x08008713
 80086ec:	08008713 	.word	0x08008713
 80086f0:	0800870b 	.word	0x0800870b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f4:	f7fe ff7a 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 80086f8:	61f8      	str	r0, [r7, #28]
        break;
 80086fa:	e010      	b.n	800871e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086fc:	4b8f      	ldr	r3, [pc, #572]	@ (800893c <UART_SetConfig+0x56c>)
 80086fe:	61fb      	str	r3, [r7, #28]
        break;
 8008700:	e00d      	b.n	800871e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008702:	f7fe fedb 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 8008706:	61f8      	str	r0, [r7, #28]
        break;
 8008708:	e009      	b.n	800871e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800870e:	61fb      	str	r3, [r7, #28]
        break;
 8008710:	e005      	b.n	800871e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800871c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80fb 	beq.w	800891c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	429a      	cmp	r2, r3
 8008734:	d305      	bcc.n	8008742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	429a      	cmp	r2, r3
 8008740:	d903      	bls.n	800874a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008748:	e0e8      	b.n	800891c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2200      	movs	r2, #0
 800874e:	461c      	mov	r4, r3
 8008750:	4615      	mov	r5, r2
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	022b      	lsls	r3, r5, #8
 800875c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008760:	0222      	lsls	r2, r4, #8
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	6849      	ldr	r1, [r1, #4]
 8008766:	0849      	lsrs	r1, r1, #1
 8008768:	2000      	movs	r0, #0
 800876a:	4688      	mov	r8, r1
 800876c:	4681      	mov	r9, r0
 800876e:	eb12 0a08 	adds.w	sl, r2, r8
 8008772:	eb43 0b09 	adc.w	fp, r3, r9
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008784:	4650      	mov	r0, sl
 8008786:	4659      	mov	r1, fp
 8008788:	f7f7 fd7a 	bl	8000280 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4613      	mov	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800879a:	d308      	bcc.n	80087ae <UART_SetConfig+0x3de>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a2:	d204      	bcs.n	80087ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	e0b6      	b.n	800891c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087b4:	e0b2      	b.n	800891c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087be:	d15e      	bne.n	800887e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80087c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d828      	bhi.n	800881a <UART_SetConfig+0x44a>
 80087c8:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <UART_SetConfig+0x400>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	08008805 	.word	0x08008805
 80087dc:	0800881b 	.word	0x0800881b
 80087e0:	0800880b 	.word	0x0800880b
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800881b 	.word	0x0800881b
 80087f0:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f4:	f7fe fefa 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 80087f8:	61f8      	str	r0, [r7, #28]
        break;
 80087fa:	e014      	b.n	8008826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fe ff0c 	bl	8007618 <HAL_RCC_GetPCLK2Freq>
 8008800:	61f8      	str	r0, [r7, #28]
        break;
 8008802:	e010      	b.n	8008826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b4d      	ldr	r3, [pc, #308]	@ (800893c <UART_SetConfig+0x56c>)
 8008806:	61fb      	str	r3, [r7, #28]
        break;
 8008808:	e00d      	b.n	8008826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fe fe57 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 800880e:	61f8      	str	r0, [r7, #28]
        break;
 8008810:	e009      	b.n	8008826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008816:	61fb      	str	r3, [r7, #28]
        break;
 8008818:	e005      	b.n	8008826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d077      	beq.n	800891c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	005a      	lsls	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	085b      	lsrs	r3, r3, #1
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b0f      	cmp	r3, #15
 8008846:	d916      	bls.n	8008876 <UART_SetConfig+0x4a6>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800884e:	d212      	bcs.n	8008876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f023 030f 	bic.w	r3, r3, #15
 8008858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	b29a      	uxth	r2, r3
 8008866:	8afb      	ldrh	r3, [r7, #22]
 8008868:	4313      	orrs	r3, r2
 800886a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	8afa      	ldrh	r2, [r7, #22]
 8008872:	60da      	str	r2, [r3, #12]
 8008874:	e052      	b.n	800891c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800887c:	e04e      	b.n	800891c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800887e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008882:	2b08      	cmp	r3, #8
 8008884:	d827      	bhi.n	80088d6 <UART_SetConfig+0x506>
 8008886:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <UART_SetConfig+0x4bc>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088c1 	.word	0x080088c1
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088d7 	.word	0x080088d7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b0:	f7fe fe9c 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 80088b4:	61f8      	str	r0, [r7, #28]
        break;
 80088b6:	e014      	b.n	80088e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b8:	f7fe feae 	bl	8007618 <HAL_RCC_GetPCLK2Freq>
 80088bc:	61f8      	str	r0, [r7, #28]
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b1e      	ldr	r3, [pc, #120]	@ (800893c <UART_SetConfig+0x56c>)
 80088c2:	61fb      	str	r3, [r7, #28]
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fe fdf9 	bl	80074bc <HAL_RCC_GetSysClockFreq>
 80088ca:	61f8      	str	r0, [r7, #28]
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d2:	61fb      	str	r3, [r7, #28]
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088e0:	bf00      	nop
    }

    if (pclk != 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d019      	beq.n	800891c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	085a      	lsrs	r2, r3, #1
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d909      	bls.n	8008916 <UART_SetConfig+0x546>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008908:	d205      	bcs.n	8008916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60da      	str	r2, [r3, #12]
 8008914:	e002      	b.n	800891c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008928:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800892c:	4618      	mov	r0, r3
 800892e:	3728      	adds	r7, #40	@ 0x28
 8008930:	46bd      	mov	sp, r7
 8008932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008936:	bf00      	nop
 8008938:	40008000 	.word	0x40008000
 800893c:	00f42400 	.word	0x00f42400

08008940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	f003 0308 	and.w	r3, r3, #8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00a      	beq.n	800896a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01a      	beq.n	8008a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a3e:	d10a      	bne.n	8008a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	605a      	str	r2, [r3, #4]
  }
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b098      	sub	sp, #96	@ 0x60
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a94:	f7fc fc04 	bl	80052a0 <HAL_GetTick>
 8008a98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d12e      	bne.n	8008b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f88c 	bl	8008bd4 <UART_WaitOnFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d021      	beq.n	8008b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e6      	bne.n	8008ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e062      	b.n	8008bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d149      	bne.n	8008ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f856 	bl	8008bd4 <UART_WaitOnFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d03c      	beq.n	8008ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3308      	adds	r3, #8
 8008b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0301 	bic.w	r3, r3, #1
 8008b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b80:	61fa      	str	r2, [r7, #28]
 8008b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	69b9      	ldr	r1, [r7, #24]
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e011      	b.n	8008bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3758      	adds	r7, #88	@ 0x58
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be4:	e049      	b.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bec:	d045      	beq.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bee:	f7fc fb57 	bl	80052a0 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d302      	bcc.n	8008c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e048      	b.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d031      	beq.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d110      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f838 	bl	8008ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2208      	movs	r2, #8
 8008c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e029      	b.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c54:	d111      	bne.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 f81e 	bl	8008ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e00f      	b.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4013      	ands	r3, r2
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	bf0c      	ite	eq
 8008c8a:	2301      	moveq	r3, #1
 8008c8c:	2300      	movne	r3, #0
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d0a6      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b095      	sub	sp, #84	@ 0x54
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e6      	bne.n	8008caa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e5      	bne.n	8008cdc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d118      	bne.n	8008d4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f023 0310 	bic.w	r3, r3, #16
 8008d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6979      	ldr	r1, [r7, #20]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	613b      	str	r3, [r7, #16]
   return(result);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e6      	bne.n	8008d18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008d5e:	bf00      	nop
 8008d60:	3754      	adds	r7, #84	@ 0x54
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <std>:
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	4604      	mov	r4, r0
 8008d72:	e9c0 3300 	strd	r3, r3, [r0]
 8008d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d7a:	6083      	str	r3, [r0, #8]
 8008d7c:	8181      	strh	r1, [r0, #12]
 8008d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d80:	81c2      	strh	r2, [r0, #14]
 8008d82:	6183      	str	r3, [r0, #24]
 8008d84:	4619      	mov	r1, r3
 8008d86:	2208      	movs	r2, #8
 8008d88:	305c      	adds	r0, #92	@ 0x5c
 8008d8a:	f000 fa37 	bl	80091fc <memset>
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <std+0x58>)
 8008d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d92:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc8 <std+0x5c>)
 8008d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d96:	4b0d      	ldr	r3, [pc, #52]	@ (8008dcc <std+0x60>)
 8008d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd0 <std+0x64>)
 8008d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd4 <std+0x68>)
 8008da0:	6224      	str	r4, [r4, #32]
 8008da2:	429c      	cmp	r4, r3
 8008da4:	d006      	beq.n	8008db4 <std+0x48>
 8008da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008daa:	4294      	cmp	r4, r2
 8008dac:	d002      	beq.n	8008db4 <std+0x48>
 8008dae:	33d0      	adds	r3, #208	@ 0xd0
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d105      	bne.n	8008dc0 <std+0x54>
 8008db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dbc:	f000 ba96 	b.w	80092ec <__retarget_lock_init_recursive>
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800904d 	.word	0x0800904d
 8008dc8:	0800906f 	.word	0x0800906f
 8008dcc:	080090a7 	.word	0x080090a7
 8008dd0:	080090cb 	.word	0x080090cb
 8008dd4:	20002ff0 	.word	0x20002ff0

08008dd8 <stdio_exit_handler>:
 8008dd8:	4a02      	ldr	r2, [pc, #8]	@ (8008de4 <stdio_exit_handler+0xc>)
 8008dda:	4903      	ldr	r1, [pc, #12]	@ (8008de8 <stdio_exit_handler+0x10>)
 8008ddc:	4803      	ldr	r0, [pc, #12]	@ (8008dec <stdio_exit_handler+0x14>)
 8008dde:	f000 b869 	b.w	8008eb4 <_fwalk_sglue>
 8008de2:	bf00      	nop
 8008de4:	20000054 	.word	0x20000054
 8008de8:	08009e55 	.word	0x08009e55
 8008dec:	20000064 	.word	0x20000064

08008df0 <cleanup_stdio>:
 8008df0:	6841      	ldr	r1, [r0, #4]
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <cleanup_stdio+0x34>)
 8008df4:	4299      	cmp	r1, r3
 8008df6:	b510      	push	{r4, lr}
 8008df8:	4604      	mov	r4, r0
 8008dfa:	d001      	beq.n	8008e00 <cleanup_stdio+0x10>
 8008dfc:	f001 f82a 	bl	8009e54 <_fflush_r>
 8008e00:	68a1      	ldr	r1, [r4, #8]
 8008e02:	4b09      	ldr	r3, [pc, #36]	@ (8008e28 <cleanup_stdio+0x38>)
 8008e04:	4299      	cmp	r1, r3
 8008e06:	d002      	beq.n	8008e0e <cleanup_stdio+0x1e>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f001 f823 	bl	8009e54 <_fflush_r>
 8008e0e:	68e1      	ldr	r1, [r4, #12]
 8008e10:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <cleanup_stdio+0x3c>)
 8008e12:	4299      	cmp	r1, r3
 8008e14:	d004      	beq.n	8008e20 <cleanup_stdio+0x30>
 8008e16:	4620      	mov	r0, r4
 8008e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e1c:	f001 b81a 	b.w	8009e54 <_fflush_r>
 8008e20:	bd10      	pop	{r4, pc}
 8008e22:	bf00      	nop
 8008e24:	20002ff0 	.word	0x20002ff0
 8008e28:	20003058 	.word	0x20003058
 8008e2c:	200030c0 	.word	0x200030c0

08008e30 <global_stdio_init.part.0>:
 8008e30:	b510      	push	{r4, lr}
 8008e32:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <global_stdio_init.part.0+0x30>)
 8008e34:	4c0b      	ldr	r4, [pc, #44]	@ (8008e64 <global_stdio_init.part.0+0x34>)
 8008e36:	4a0c      	ldr	r2, [pc, #48]	@ (8008e68 <global_stdio_init.part.0+0x38>)
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2104      	movs	r1, #4
 8008e40:	f7ff ff94 	bl	8008d6c <std>
 8008e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e48:	2201      	movs	r2, #1
 8008e4a:	2109      	movs	r1, #9
 8008e4c:	f7ff ff8e 	bl	8008d6c <std>
 8008e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e54:	2202      	movs	r2, #2
 8008e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5a:	2112      	movs	r1, #18
 8008e5c:	f7ff bf86 	b.w	8008d6c <std>
 8008e60:	20003128 	.word	0x20003128
 8008e64:	20002ff0 	.word	0x20002ff0
 8008e68:	08008dd9 	.word	0x08008dd9

08008e6c <__sfp_lock_acquire>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	@ (8008e74 <__sfp_lock_acquire+0x8>)
 8008e6e:	f000 ba3e 	b.w	80092ee <__retarget_lock_acquire_recursive>
 8008e72:	bf00      	nop
 8008e74:	20003131 	.word	0x20003131

08008e78 <__sfp_lock_release>:
 8008e78:	4801      	ldr	r0, [pc, #4]	@ (8008e80 <__sfp_lock_release+0x8>)
 8008e7a:	f000 ba39 	b.w	80092f0 <__retarget_lock_release_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20003131 	.word	0x20003131

08008e84 <__sinit>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	4604      	mov	r4, r0
 8008e88:	f7ff fff0 	bl	8008e6c <__sfp_lock_acquire>
 8008e8c:	6a23      	ldr	r3, [r4, #32]
 8008e8e:	b11b      	cbz	r3, 8008e98 <__sinit+0x14>
 8008e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e94:	f7ff bff0 	b.w	8008e78 <__sfp_lock_release>
 8008e98:	4b04      	ldr	r3, [pc, #16]	@ (8008eac <__sinit+0x28>)
 8008e9a:	6223      	str	r3, [r4, #32]
 8008e9c:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <__sinit+0x2c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1f5      	bne.n	8008e90 <__sinit+0xc>
 8008ea4:	f7ff ffc4 	bl	8008e30 <global_stdio_init.part.0>
 8008ea8:	e7f2      	b.n	8008e90 <__sinit+0xc>
 8008eaa:	bf00      	nop
 8008eac:	08008df1 	.word	0x08008df1
 8008eb0:	20003128 	.word	0x20003128

08008eb4 <_fwalk_sglue>:
 8008eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	4607      	mov	r7, r0
 8008eba:	4688      	mov	r8, r1
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ec8:	d505      	bpl.n	8008ed6 <_fwalk_sglue+0x22>
 8008eca:	6824      	ldr	r4, [r4, #0]
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	d1f7      	bne.n	8008ec0 <_fwalk_sglue+0xc>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d907      	bls.n	8008eec <_fwalk_sglue+0x38>
 8008edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	d003      	beq.n	8008eec <_fwalk_sglue+0x38>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	47c0      	blx	r8
 8008eea:	4306      	orrs	r6, r0
 8008eec:	3568      	adds	r5, #104	@ 0x68
 8008eee:	e7e9      	b.n	8008ec4 <_fwalk_sglue+0x10>

08008ef0 <iprintf>:
 8008ef0:	b40f      	push	{r0, r1, r2, r3}
 8008ef2:	b507      	push	{r0, r1, r2, lr}
 8008ef4:	4906      	ldr	r1, [pc, #24]	@ (8008f10 <iprintf+0x20>)
 8008ef6:	ab04      	add	r3, sp, #16
 8008ef8:	6808      	ldr	r0, [r1, #0]
 8008efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efe:	6881      	ldr	r1, [r0, #8]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	f000 fc7f 	bl	8009804 <_vfiprintf_r>
 8008f06:	b003      	add	sp, #12
 8008f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f0c:	b004      	add	sp, #16
 8008f0e:	4770      	bx	lr
 8008f10:	20000060 	.word	0x20000060

08008f14 <putchar>:
 8008f14:	4b02      	ldr	r3, [pc, #8]	@ (8008f20 <putchar+0xc>)
 8008f16:	4601      	mov	r1, r0
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	6882      	ldr	r2, [r0, #8]
 8008f1c:	f001 b824 	b.w	8009f68 <_putc_r>
 8008f20:	20000060 	.word	0x20000060

08008f24 <_puts_r>:
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	6884      	ldr	r4, [r0, #8]
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	b90b      	cbnz	r3, 8008f34 <_puts_r+0x10>
 8008f30:	f7ff ffa8 	bl	8008e84 <__sinit>
 8008f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d405      	bmi.n	8008f46 <_puts_r+0x22>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	0598      	lsls	r0, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_puts_r+0x22>
 8008f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f42:	f000 f9d4 	bl	80092ee <__retarget_lock_acquire_recursive>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	0719      	lsls	r1, r3, #28
 8008f4a:	d502      	bpl.n	8008f52 <_puts_r+0x2e>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d135      	bne.n	8008fbe <_puts_r+0x9a>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f8fb 	bl	8009150 <__swsetup_r>
 8008f5a:	b380      	cbz	r0, 8008fbe <_puts_r+0x9a>
 8008f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f62:	07da      	lsls	r2, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_puts_r+0x4e>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	059b      	lsls	r3, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_puts_r+0x4e>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6e:	f000 f9bf 	bl	80092f0 <__retarget_lock_release_recursive>
 8008f72:	4628      	mov	r0, r5
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da04      	bge.n	8008f84 <_puts_r+0x60>
 8008f7a:	69a2      	ldr	r2, [r4, #24]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	dc17      	bgt.n	8008fb0 <_puts_r+0x8c>
 8008f80:	290a      	cmp	r1, #10
 8008f82:	d015      	beq.n	8008fb0 <_puts_r+0x8c>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	6022      	str	r2, [r4, #0]
 8008f8a:	7019      	strb	r1, [r3, #0]
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f92:	3b01      	subs	r3, #1
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d1ed      	bne.n	8008f76 <_puts_r+0x52>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da11      	bge.n	8008fc2 <_puts_r+0x9e>
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	210a      	movs	r1, #10
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f895 	bl	80090d2 <__swbuf_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d0d7      	beq.n	8008f5c <_puts_r+0x38>
 8008fac:	250a      	movs	r5, #10
 8008fae:	e7d7      	b.n	8008f60 <_puts_r+0x3c>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f88d 	bl	80090d2 <__swbuf_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1e7      	bne.n	8008f8c <_puts_r+0x68>
 8008fbc:	e7ce      	b.n	8008f5c <_puts_r+0x38>
 8008fbe:	3e01      	subs	r6, #1
 8008fc0:	e7e4      	b.n	8008f8c <_puts_r+0x68>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	6022      	str	r2, [r4, #0]
 8008fc8:	220a      	movs	r2, #10
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	e7ee      	b.n	8008fac <_puts_r+0x88>
	...

08008fd0 <puts>:
 8008fd0:	4b02      	ldr	r3, [pc, #8]	@ (8008fdc <puts+0xc>)
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f7ff bfa5 	b.w	8008f24 <_puts_r>
 8008fda:	bf00      	nop
 8008fdc:	20000060 	.word	0x20000060

08008fe0 <sniprintf>:
 8008fe0:	b40c      	push	{r2, r3}
 8008fe2:	b530      	push	{r4, r5, lr}
 8008fe4:	4b18      	ldr	r3, [pc, #96]	@ (8009048 <sniprintf+0x68>)
 8008fe6:	1e0c      	subs	r4, r1, #0
 8008fe8:	681d      	ldr	r5, [r3, #0]
 8008fea:	b09d      	sub	sp, #116	@ 0x74
 8008fec:	da08      	bge.n	8009000 <sniprintf+0x20>
 8008fee:	238b      	movs	r3, #139	@ 0x8b
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	b01d      	add	sp, #116	@ 0x74
 8008ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ffc:	b002      	add	sp, #8
 8008ffe:	4770      	bx	lr
 8009000:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800900e:	bf14      	ite	ne
 8009010:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009014:	4623      	moveq	r3, r4
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	9307      	str	r3, [sp, #28]
 800901a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800901e:	9002      	str	r0, [sp, #8]
 8009020:	9006      	str	r0, [sp, #24]
 8009022:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009026:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009028:	ab21      	add	r3, sp, #132	@ 0x84
 800902a:	a902      	add	r1, sp, #8
 800902c:	4628      	mov	r0, r5
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	f000 fac2 	bl	80095b8 <_svfiprintf_r>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	bfbc      	itt	lt
 8009038:	238b      	movlt	r3, #139	@ 0x8b
 800903a:	602b      	strlt	r3, [r5, #0]
 800903c:	2c00      	cmp	r4, #0
 800903e:	d0da      	beq.n	8008ff6 <sniprintf+0x16>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e7d6      	b.n	8008ff6 <sniprintf+0x16>
 8009048:	20000060 	.word	0x20000060

0800904c <__sread>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f8fc 	bl	8009250 <_read_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	bfab      	itete	ge
 800905c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800905e:	89a3      	ldrhlt	r3, [r4, #12]
 8009060:	181b      	addge	r3, r3, r0
 8009062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009066:	bfac      	ite	ge
 8009068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800906a:	81a3      	strhlt	r3, [r4, #12]
 800906c:	bd10      	pop	{r4, pc}

0800906e <__swrite>:
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	461f      	mov	r7, r3
 8009074:	898b      	ldrh	r3, [r1, #12]
 8009076:	05db      	lsls	r3, r3, #23
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	4616      	mov	r6, r2
 800907e:	d505      	bpl.n	800908c <__swrite+0x1e>
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	2302      	movs	r3, #2
 8009086:	2200      	movs	r2, #0
 8009088:	f000 f8d0 	bl	800922c <_lseek_r>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	f000 b8e7 	b.w	8009274 <_write_r>

080090a6 <__sseek>:
 80090a6:	b510      	push	{r4, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 f8bd 	bl	800922c <_lseek_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	bf15      	itete	ne
 80090b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090c2:	81a3      	strheq	r3, [r4, #12]
 80090c4:	bf18      	it	ne
 80090c6:	81a3      	strhne	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__sclose>:
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 b89d 	b.w	800920c <_close_r>

080090d2 <__swbuf_r>:
 80090d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d4:	460e      	mov	r6, r1
 80090d6:	4614      	mov	r4, r2
 80090d8:	4605      	mov	r5, r0
 80090da:	b118      	cbz	r0, 80090e4 <__swbuf_r+0x12>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <__swbuf_r+0x12>
 80090e0:	f7ff fed0 	bl	8008e84 <__sinit>
 80090e4:	69a3      	ldr	r3, [r4, #24]
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	071a      	lsls	r2, r3, #28
 80090ec:	d501      	bpl.n	80090f2 <__swbuf_r+0x20>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	b943      	cbnz	r3, 8009104 <__swbuf_r+0x32>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f82b 	bl	8009150 <__swsetup_r>
 80090fa:	b118      	cbz	r0, 8009104 <__swbuf_r+0x32>
 80090fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009100:	4638      	mov	r0, r7
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	6922      	ldr	r2, [r4, #16]
 8009108:	1a98      	subs	r0, r3, r2
 800910a:	6963      	ldr	r3, [r4, #20]
 800910c:	b2f6      	uxtb	r6, r6
 800910e:	4283      	cmp	r3, r0
 8009110:	4637      	mov	r7, r6
 8009112:	dc05      	bgt.n	8009120 <__swbuf_r+0x4e>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fe9c 	bl	8009e54 <_fflush_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	d1ed      	bne.n	80090fc <__swbuf_r+0x2a>
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	3b01      	subs	r3, #1
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	701e      	strb	r6, [r3, #0]
 800912e:	6962      	ldr	r2, [r4, #20]
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	429a      	cmp	r2, r3
 8009134:	d004      	beq.n	8009140 <__swbuf_r+0x6e>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	07db      	lsls	r3, r3, #31
 800913a:	d5e1      	bpl.n	8009100 <__swbuf_r+0x2e>
 800913c:	2e0a      	cmp	r6, #10
 800913e:	d1df      	bne.n	8009100 <__swbuf_r+0x2e>
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f000 fe86 	bl	8009e54 <_fflush_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d0d9      	beq.n	8009100 <__swbuf_r+0x2e>
 800914c:	e7d6      	b.n	80090fc <__swbuf_r+0x2a>
	...

08009150 <__swsetup_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4b29      	ldr	r3, [pc, #164]	@ (80091f8 <__swsetup_r+0xa8>)
 8009154:	4605      	mov	r5, r0
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	460c      	mov	r4, r1
 800915a:	b118      	cbz	r0, 8009164 <__swsetup_r+0x14>
 800915c:	6a03      	ldr	r3, [r0, #32]
 800915e:	b90b      	cbnz	r3, 8009164 <__swsetup_r+0x14>
 8009160:	f7ff fe90 	bl	8008e84 <__sinit>
 8009164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d422      	bmi.n	80091b2 <__swsetup_r+0x62>
 800916c:	06da      	lsls	r2, r3, #27
 800916e:	d407      	bmi.n	8009180 <__swsetup_r+0x30>
 8009170:	2209      	movs	r2, #9
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	e033      	b.n	80091e8 <__swsetup_r+0x98>
 8009180:	0758      	lsls	r0, r3, #29
 8009182:	d512      	bpl.n	80091aa <__swsetup_r+0x5a>
 8009184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009186:	b141      	cbz	r1, 800919a <__swsetup_r+0x4a>
 8009188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800918c:	4299      	cmp	r1, r3
 800918e:	d002      	beq.n	8009196 <__swsetup_r+0x46>
 8009190:	4628      	mov	r0, r5
 8009192:	f000 f8bd 	bl	8009310 <_free_r>
 8009196:	2300      	movs	r3, #0
 8009198:	6363      	str	r3, [r4, #52]	@ 0x34
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	b94b      	cbnz	r3, 80091ca <__swsetup_r+0x7a>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c0:	d003      	beq.n	80091ca <__swsetup_r+0x7a>
 80091c2:	4621      	mov	r1, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 fe93 	bl	8009ef0 <__smakebuf_r>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	f013 0201 	ands.w	r2, r3, #1
 80091d2:	d00a      	beq.n	80091ea <__swsetup_r+0x9a>
 80091d4:	2200      	movs	r2, #0
 80091d6:	60a2      	str	r2, [r4, #8]
 80091d8:	6962      	ldr	r2, [r4, #20]
 80091da:	4252      	negs	r2, r2
 80091dc:	61a2      	str	r2, [r4, #24]
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	b942      	cbnz	r2, 80091f4 <__swsetup_r+0xa4>
 80091e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091e6:	d1c5      	bne.n	8009174 <__swsetup_r+0x24>
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	0799      	lsls	r1, r3, #30
 80091ec:	bf58      	it	pl
 80091ee:	6962      	ldrpl	r2, [r4, #20]
 80091f0:	60a2      	str	r2, [r4, #8]
 80091f2:	e7f4      	b.n	80091de <__swsetup_r+0x8e>
 80091f4:	2000      	movs	r0, #0
 80091f6:	e7f7      	b.n	80091e8 <__swsetup_r+0x98>
 80091f8:	20000060 	.word	0x20000060

080091fc <memset>:
 80091fc:	4402      	add	r2, r0
 80091fe:	4603      	mov	r3, r0
 8009200:	4293      	cmp	r3, r2
 8009202:	d100      	bne.n	8009206 <memset+0xa>
 8009204:	4770      	bx	lr
 8009206:	f803 1b01 	strb.w	r1, [r3], #1
 800920a:	e7f9      	b.n	8009200 <memset+0x4>

0800920c <_close_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	@ (8009228 <_close_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 fdcf 	bl	8001dba <_close>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_close_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_close_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	2000312c 	.word	0x2000312c

0800922c <_lseek_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	@ (800924c <_lseek_r+0x20>)
 8009230:	4604      	mov	r4, r0
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	2200      	movs	r2, #0
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f8 fde4 	bl	8001e08 <_lseek>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_lseek_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_lseek_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	2000312c 	.word	0x2000312c

08009250 <_read_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d07      	ldr	r5, [pc, #28]	@ (8009270 <_read_r+0x20>)
 8009254:	4604      	mov	r4, r0
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	2200      	movs	r2, #0
 800925c:	602a      	str	r2, [r5, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f8 fd72 	bl	8001d48 <_read>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_read_r+0x1e>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_read_r+0x1e>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	2000312c 	.word	0x2000312c

08009274 <_write_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	@ (8009294 <_write_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f8 fd7d 	bl	8001d82 <_write>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_write_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_write_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	2000312c 	.word	0x2000312c

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	@ (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000060 	.word	0x20000060

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4d0d      	ldr	r5, [pc, #52]	@ (80092dc <__libc_init_array+0x38>)
 80092a8:	4c0d      	ldr	r4, [pc, #52]	@ (80092e0 <__libc_init_array+0x3c>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	2600      	movs	r6, #0
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	4d0b      	ldr	r5, [pc, #44]	@ (80092e4 <__libc_init_array+0x40>)
 80092b6:	4c0c      	ldr	r4, [pc, #48]	@ (80092e8 <__libc_init_array+0x44>)
 80092b8:	f000 ff0c 	bl	800a0d4 <_init>
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	2600      	movs	r6, #0
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	0801fb54 	.word	0x0801fb54
 80092e0:	0801fb54 	.word	0x0801fb54
 80092e4:	0801fb54 	.word	0x0801fb54
 80092e8:	0801fb58 	.word	0x0801fb58

080092ec <__retarget_lock_init_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_acquire_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__retarget_lock_release_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <memcpy>:
 80092f2:	440a      	add	r2, r1
 80092f4:	4291      	cmp	r1, r2
 80092f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fa:	d100      	bne.n	80092fe <memcpy+0xc>
 80092fc:	4770      	bx	lr
 80092fe:	b510      	push	{r4, lr}
 8009300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009308:	4291      	cmp	r1, r2
 800930a:	d1f9      	bne.n	8009300 <memcpy+0xe>
 800930c:	bd10      	pop	{r4, pc}
	...

08009310 <_free_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	2900      	cmp	r1, #0
 8009316:	d041      	beq.n	800939c <_free_r+0x8c>
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f0c      	subs	r4, r1, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfb8      	it	lt
 8009322:	18e4      	addlt	r4, r4, r3
 8009324:	f000 f8e0 	bl	80094e8 <__malloc_lock>
 8009328:	4a1d      	ldr	r2, [pc, #116]	@ (80093a0 <_free_r+0x90>)
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	b933      	cbnz	r3, 800933c <_free_r+0x2c>
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	6014      	str	r4, [r2, #0]
 8009332:	4628      	mov	r0, r5
 8009334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009338:	f000 b8dc 	b.w	80094f4 <__malloc_unlock>
 800933c:	42a3      	cmp	r3, r4
 800933e:	d908      	bls.n	8009352 <_free_r+0x42>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	1821      	adds	r1, r4, r0
 8009344:	428b      	cmp	r3, r1
 8009346:	bf01      	itttt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	1809      	addeq	r1, r1, r0
 800934e:	6021      	streq	r1, [r4, #0]
 8009350:	e7ed      	b.n	800932e <_free_r+0x1e>
 8009352:	461a      	mov	r2, r3
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	b10b      	cbz	r3, 800935c <_free_r+0x4c>
 8009358:	42a3      	cmp	r3, r4
 800935a:	d9fa      	bls.n	8009352 <_free_r+0x42>
 800935c:	6811      	ldr	r1, [r2, #0]
 800935e:	1850      	adds	r0, r2, r1
 8009360:	42a0      	cmp	r0, r4
 8009362:	d10b      	bne.n	800937c <_free_r+0x6c>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	4401      	add	r1, r0
 8009368:	1850      	adds	r0, r2, r1
 800936a:	4283      	cmp	r3, r0
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	d1e0      	bne.n	8009332 <_free_r+0x22>
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	6053      	str	r3, [r2, #4]
 8009376:	4408      	add	r0, r1
 8009378:	6010      	str	r0, [r2, #0]
 800937a:	e7da      	b.n	8009332 <_free_r+0x22>
 800937c:	d902      	bls.n	8009384 <_free_r+0x74>
 800937e:	230c      	movs	r3, #12
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	e7d6      	b.n	8009332 <_free_r+0x22>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	1821      	adds	r1, r4, r0
 8009388:	428b      	cmp	r3, r1
 800938a:	bf04      	itt	eq
 800938c:	6819      	ldreq	r1, [r3, #0]
 800938e:	685b      	ldreq	r3, [r3, #4]
 8009390:	6063      	str	r3, [r4, #4]
 8009392:	bf04      	itt	eq
 8009394:	1809      	addeq	r1, r1, r0
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	6054      	str	r4, [r2, #4]
 800939a:	e7ca      	b.n	8009332 <_free_r+0x22>
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	bf00      	nop
 80093a0:	20003138 	.word	0x20003138

080093a4 <sbrk_aligned>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	4e0f      	ldr	r6, [pc, #60]	@ (80093e4 <sbrk_aligned+0x40>)
 80093a8:	460c      	mov	r4, r1
 80093aa:	6831      	ldr	r1, [r6, #0]
 80093ac:	4605      	mov	r5, r0
 80093ae:	b911      	cbnz	r1, 80093b6 <sbrk_aligned+0x12>
 80093b0:	f000 fe4a 	bl	800a048 <_sbrk_r>
 80093b4:	6030      	str	r0, [r6, #0]
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f000 fe45 	bl	800a048 <_sbrk_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d103      	bne.n	80093ca <sbrk_aligned+0x26>
 80093c2:	f04f 34ff 	mov.w	r4, #4294967295
 80093c6:	4620      	mov	r0, r4
 80093c8:	bd70      	pop	{r4, r5, r6, pc}
 80093ca:	1cc4      	adds	r4, r0, #3
 80093cc:	f024 0403 	bic.w	r4, r4, #3
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d0f8      	beq.n	80093c6 <sbrk_aligned+0x22>
 80093d4:	1a21      	subs	r1, r4, r0
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 fe36 	bl	800a048 <_sbrk_r>
 80093dc:	3001      	adds	r0, #1
 80093de:	d1f2      	bne.n	80093c6 <sbrk_aligned+0x22>
 80093e0:	e7ef      	b.n	80093c2 <sbrk_aligned+0x1e>
 80093e2:	bf00      	nop
 80093e4:	20003134 	.word	0x20003134

080093e8 <_malloc_r>:
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	1ccd      	adds	r5, r1, #3
 80093ee:	f025 0503 	bic.w	r5, r5, #3
 80093f2:	3508      	adds	r5, #8
 80093f4:	2d0c      	cmp	r5, #12
 80093f6:	bf38      	it	cc
 80093f8:	250c      	movcc	r5, #12
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	4606      	mov	r6, r0
 80093fe:	db01      	blt.n	8009404 <_malloc_r+0x1c>
 8009400:	42a9      	cmp	r1, r5
 8009402:	d904      	bls.n	800940e <_malloc_r+0x26>
 8009404:	230c      	movs	r3, #12
 8009406:	6033      	str	r3, [r6, #0]
 8009408:	2000      	movs	r0, #0
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094e4 <_malloc_r+0xfc>
 8009412:	f000 f869 	bl	80094e8 <__malloc_lock>
 8009416:	f8d8 3000 	ldr.w	r3, [r8]
 800941a:	461c      	mov	r4, r3
 800941c:	bb44      	cbnz	r4, 8009470 <_malloc_r+0x88>
 800941e:	4629      	mov	r1, r5
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff ffbf 	bl	80093a4 <sbrk_aligned>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	4604      	mov	r4, r0
 800942a:	d158      	bne.n	80094de <_malloc_r+0xf6>
 800942c:	f8d8 4000 	ldr.w	r4, [r8]
 8009430:	4627      	mov	r7, r4
 8009432:	2f00      	cmp	r7, #0
 8009434:	d143      	bne.n	80094be <_malloc_r+0xd6>
 8009436:	2c00      	cmp	r4, #0
 8009438:	d04b      	beq.n	80094d2 <_malloc_r+0xea>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	4639      	mov	r1, r7
 800943e:	4630      	mov	r0, r6
 8009440:	eb04 0903 	add.w	r9, r4, r3
 8009444:	f000 fe00 	bl	800a048 <_sbrk_r>
 8009448:	4581      	cmp	r9, r0
 800944a:	d142      	bne.n	80094d2 <_malloc_r+0xea>
 800944c:	6821      	ldr	r1, [r4, #0]
 800944e:	1a6d      	subs	r5, r5, r1
 8009450:	4629      	mov	r1, r5
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ffa6 	bl	80093a4 <sbrk_aligned>
 8009458:	3001      	adds	r0, #1
 800945a:	d03a      	beq.n	80094d2 <_malloc_r+0xea>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	442b      	add	r3, r5
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	f8d8 3000 	ldr.w	r3, [r8]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	bb62      	cbnz	r2, 80094c4 <_malloc_r+0xdc>
 800946a:	f8c8 7000 	str.w	r7, [r8]
 800946e:	e00f      	b.n	8009490 <_malloc_r+0xa8>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	1b52      	subs	r2, r2, r5
 8009474:	d420      	bmi.n	80094b8 <_malloc_r+0xd0>
 8009476:	2a0b      	cmp	r2, #11
 8009478:	d917      	bls.n	80094aa <_malloc_r+0xc2>
 800947a:	1961      	adds	r1, r4, r5
 800947c:	42a3      	cmp	r3, r4
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	6059      	strne	r1, [r3, #4]
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	bf08      	it	eq
 8009488:	f8c8 1000 	streq.w	r1, [r8]
 800948c:	5162      	str	r2, [r4, r5]
 800948e:	604b      	str	r3, [r1, #4]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 f82f 	bl	80094f4 <__malloc_unlock>
 8009496:	f104 000b 	add.w	r0, r4, #11
 800949a:	1d23      	adds	r3, r4, #4
 800949c:	f020 0007 	bic.w	r0, r0, #7
 80094a0:	1ac2      	subs	r2, r0, r3
 80094a2:	bf1c      	itt	ne
 80094a4:	1a1b      	subne	r3, r3, r0
 80094a6:	50a3      	strne	r3, [r4, r2]
 80094a8:	e7af      	b.n	800940a <_malloc_r+0x22>
 80094aa:	6862      	ldr	r2, [r4, #4]
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	bf0c      	ite	eq
 80094b0:	f8c8 2000 	streq.w	r2, [r8]
 80094b4:	605a      	strne	r2, [r3, #4]
 80094b6:	e7eb      	b.n	8009490 <_malloc_r+0xa8>
 80094b8:	4623      	mov	r3, r4
 80094ba:	6864      	ldr	r4, [r4, #4]
 80094bc:	e7ae      	b.n	800941c <_malloc_r+0x34>
 80094be:	463c      	mov	r4, r7
 80094c0:	687f      	ldr	r7, [r7, #4]
 80094c2:	e7b6      	b.n	8009432 <_malloc_r+0x4a>
 80094c4:	461a      	mov	r2, r3
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d1fb      	bne.n	80094c4 <_malloc_r+0xdc>
 80094cc:	2300      	movs	r3, #0
 80094ce:	6053      	str	r3, [r2, #4]
 80094d0:	e7de      	b.n	8009490 <_malloc_r+0xa8>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 f80c 	bl	80094f4 <__malloc_unlock>
 80094dc:	e794      	b.n	8009408 <_malloc_r+0x20>
 80094de:	6005      	str	r5, [r0, #0]
 80094e0:	e7d6      	b.n	8009490 <_malloc_r+0xa8>
 80094e2:	bf00      	nop
 80094e4:	20003138 	.word	0x20003138

080094e8 <__malloc_lock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	@ (80094f0 <__malloc_lock+0x8>)
 80094ea:	f7ff bf00 	b.w	80092ee <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	20003130 	.word	0x20003130

080094f4 <__malloc_unlock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	@ (80094fc <__malloc_unlock+0x8>)
 80094f6:	f7ff befb 	b.w	80092f0 <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	20003130 	.word	0x20003130

08009500 <__ssputs_r>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	688e      	ldr	r6, [r1, #8]
 8009506:	461f      	mov	r7, r3
 8009508:	42be      	cmp	r6, r7
 800950a:	680b      	ldr	r3, [r1, #0]
 800950c:	4682      	mov	sl, r0
 800950e:	460c      	mov	r4, r1
 8009510:	4690      	mov	r8, r2
 8009512:	d82d      	bhi.n	8009570 <__ssputs_r+0x70>
 8009514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009518:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800951c:	d026      	beq.n	800956c <__ssputs_r+0x6c>
 800951e:	6965      	ldr	r5, [r4, #20]
 8009520:	6909      	ldr	r1, [r1, #16]
 8009522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009526:	eba3 0901 	sub.w	r9, r3, r1
 800952a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800952e:	1c7b      	adds	r3, r7, #1
 8009530:	444b      	add	r3, r9
 8009532:	106d      	asrs	r5, r5, #1
 8009534:	429d      	cmp	r5, r3
 8009536:	bf38      	it	cc
 8009538:	461d      	movcc	r5, r3
 800953a:	0553      	lsls	r3, r2, #21
 800953c:	d527      	bpl.n	800958e <__ssputs_r+0x8e>
 800953e:	4629      	mov	r1, r5
 8009540:	f7ff ff52 	bl	80093e8 <_malloc_r>
 8009544:	4606      	mov	r6, r0
 8009546:	b360      	cbz	r0, 80095a2 <__ssputs_r+0xa2>
 8009548:	6921      	ldr	r1, [r4, #16]
 800954a:	464a      	mov	r2, r9
 800954c:	f7ff fed1 	bl	80092f2 <memcpy>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	6126      	str	r6, [r4, #16]
 800955e:	6165      	str	r5, [r4, #20]
 8009560:	444e      	add	r6, r9
 8009562:	eba5 0509 	sub.w	r5, r5, r9
 8009566:	6026      	str	r6, [r4, #0]
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	463e      	mov	r6, r7
 800956c:	42be      	cmp	r6, r7
 800956e:	d900      	bls.n	8009572 <__ssputs_r+0x72>
 8009570:	463e      	mov	r6, r7
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	4632      	mov	r2, r6
 8009576:	4641      	mov	r1, r8
 8009578:	f000 fd2a 	bl	8009fd0 <memmove>
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	1b9b      	subs	r3, r3, r6
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4433      	add	r3, r6
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958e:	462a      	mov	r2, r5
 8009590:	f000 fd6a 	bl	800a068 <_realloc_r>
 8009594:	4606      	mov	r6, r0
 8009596:	2800      	cmp	r0, #0
 8009598:	d1e0      	bne.n	800955c <__ssputs_r+0x5c>
 800959a:	6921      	ldr	r1, [r4, #16]
 800959c:	4650      	mov	r0, sl
 800959e:	f7ff feb7 	bl	8009310 <_free_r>
 80095a2:	230c      	movs	r3, #12
 80095a4:	f8ca 3000 	str.w	r3, [sl]
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e7e9      	b.n	800958a <__ssputs_r+0x8a>
	...

080095b8 <_svfiprintf_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	4698      	mov	r8, r3
 80095be:	898b      	ldrh	r3, [r1, #12]
 80095c0:	061b      	lsls	r3, r3, #24
 80095c2:	b09d      	sub	sp, #116	@ 0x74
 80095c4:	4607      	mov	r7, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	4614      	mov	r4, r2
 80095ca:	d510      	bpl.n	80095ee <_svfiprintf_r+0x36>
 80095cc:	690b      	ldr	r3, [r1, #16]
 80095ce:	b973      	cbnz	r3, 80095ee <_svfiprintf_r+0x36>
 80095d0:	2140      	movs	r1, #64	@ 0x40
 80095d2:	f7ff ff09 	bl	80093e8 <_malloc_r>
 80095d6:	6028      	str	r0, [r5, #0]
 80095d8:	6128      	str	r0, [r5, #16]
 80095da:	b930      	cbnz	r0, 80095ea <_svfiprintf_r+0x32>
 80095dc:	230c      	movs	r3, #12
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	b01d      	add	sp, #116	@ 0x74
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	2340      	movs	r3, #64	@ 0x40
 80095ec:	616b      	str	r3, [r5, #20]
 80095ee:	2300      	movs	r3, #0
 80095f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f2:	2320      	movs	r3, #32
 80095f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fc:	2330      	movs	r3, #48	@ 0x30
 80095fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800979c <_svfiprintf_r+0x1e4>
 8009602:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009606:	f04f 0901 	mov.w	r9, #1
 800960a:	4623      	mov	r3, r4
 800960c:	469a      	mov	sl, r3
 800960e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009612:	b10a      	cbz	r2, 8009618 <_svfiprintf_r+0x60>
 8009614:	2a25      	cmp	r2, #37	@ 0x25
 8009616:	d1f9      	bne.n	800960c <_svfiprintf_r+0x54>
 8009618:	ebba 0b04 	subs.w	fp, sl, r4
 800961c:	d00b      	beq.n	8009636 <_svfiprintf_r+0x7e>
 800961e:	465b      	mov	r3, fp
 8009620:	4622      	mov	r2, r4
 8009622:	4629      	mov	r1, r5
 8009624:	4638      	mov	r0, r7
 8009626:	f7ff ff6b 	bl	8009500 <__ssputs_r>
 800962a:	3001      	adds	r0, #1
 800962c:	f000 80a7 	beq.w	800977e <_svfiprintf_r+0x1c6>
 8009630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009632:	445a      	add	r2, fp
 8009634:	9209      	str	r2, [sp, #36]	@ 0x24
 8009636:	f89a 3000 	ldrb.w	r3, [sl]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 809f 	beq.w	800977e <_svfiprintf_r+0x1c6>
 8009640:	2300      	movs	r3, #0
 8009642:	f04f 32ff 	mov.w	r2, #4294967295
 8009646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800964a:	f10a 0a01 	add.w	sl, sl, #1
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009656:	931a      	str	r3, [sp, #104]	@ 0x68
 8009658:	4654      	mov	r4, sl
 800965a:	2205      	movs	r2, #5
 800965c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009660:	484e      	ldr	r0, [pc, #312]	@ (800979c <_svfiprintf_r+0x1e4>)
 8009662:	f7f6 fdbd 	bl	80001e0 <memchr>
 8009666:	9a04      	ldr	r2, [sp, #16]
 8009668:	b9d8      	cbnz	r0, 80096a2 <_svfiprintf_r+0xea>
 800966a:	06d0      	lsls	r0, r2, #27
 800966c:	bf44      	itt	mi
 800966e:	2320      	movmi	r3, #32
 8009670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009674:	0711      	lsls	r1, r2, #28
 8009676:	bf44      	itt	mi
 8009678:	232b      	movmi	r3, #43	@ 0x2b
 800967a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800967e:	f89a 3000 	ldrb.w	r3, [sl]
 8009682:	2b2a      	cmp	r3, #42	@ 0x2a
 8009684:	d015      	beq.n	80096b2 <_svfiprintf_r+0xfa>
 8009686:	9a07      	ldr	r2, [sp, #28]
 8009688:	4654      	mov	r4, sl
 800968a:	2000      	movs	r0, #0
 800968c:	f04f 0c0a 	mov.w	ip, #10
 8009690:	4621      	mov	r1, r4
 8009692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009696:	3b30      	subs	r3, #48	@ 0x30
 8009698:	2b09      	cmp	r3, #9
 800969a:	d94b      	bls.n	8009734 <_svfiprintf_r+0x17c>
 800969c:	b1b0      	cbz	r0, 80096cc <_svfiprintf_r+0x114>
 800969e:	9207      	str	r2, [sp, #28]
 80096a0:	e014      	b.n	80096cc <_svfiprintf_r+0x114>
 80096a2:	eba0 0308 	sub.w	r3, r0, r8
 80096a6:	fa09 f303 	lsl.w	r3, r9, r3
 80096aa:	4313      	orrs	r3, r2
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	46a2      	mov	sl, r4
 80096b0:	e7d2      	b.n	8009658 <_svfiprintf_r+0xa0>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	1d19      	adds	r1, r3, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	9103      	str	r1, [sp, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	bfbb      	ittet	lt
 80096be:	425b      	neglt	r3, r3
 80096c0:	f042 0202 	orrlt.w	r2, r2, #2
 80096c4:	9307      	strge	r3, [sp, #28]
 80096c6:	9307      	strlt	r3, [sp, #28]
 80096c8:	bfb8      	it	lt
 80096ca:	9204      	strlt	r2, [sp, #16]
 80096cc:	7823      	ldrb	r3, [r4, #0]
 80096ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80096d0:	d10a      	bne.n	80096e8 <_svfiprintf_r+0x130>
 80096d2:	7863      	ldrb	r3, [r4, #1]
 80096d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d6:	d132      	bne.n	800973e <_svfiprintf_r+0x186>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	9203      	str	r2, [sp, #12]
 80096e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096e4:	3402      	adds	r4, #2
 80096e6:	9305      	str	r3, [sp, #20]
 80096e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097ac <_svfiprintf_r+0x1f4>
 80096ec:	7821      	ldrb	r1, [r4, #0]
 80096ee:	2203      	movs	r2, #3
 80096f0:	4650      	mov	r0, sl
 80096f2:	f7f6 fd75 	bl	80001e0 <memchr>
 80096f6:	b138      	cbz	r0, 8009708 <_svfiprintf_r+0x150>
 80096f8:	9b04      	ldr	r3, [sp, #16]
 80096fa:	eba0 000a 	sub.w	r0, r0, sl
 80096fe:	2240      	movs	r2, #64	@ 0x40
 8009700:	4082      	lsls	r2, r0
 8009702:	4313      	orrs	r3, r2
 8009704:	3401      	adds	r4, #1
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970c:	4824      	ldr	r0, [pc, #144]	@ (80097a0 <_svfiprintf_r+0x1e8>)
 800970e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009712:	2206      	movs	r2, #6
 8009714:	f7f6 fd64 	bl	80001e0 <memchr>
 8009718:	2800      	cmp	r0, #0
 800971a:	d036      	beq.n	800978a <_svfiprintf_r+0x1d2>
 800971c:	4b21      	ldr	r3, [pc, #132]	@ (80097a4 <_svfiprintf_r+0x1ec>)
 800971e:	bb1b      	cbnz	r3, 8009768 <_svfiprintf_r+0x1b0>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	3307      	adds	r3, #7
 8009724:	f023 0307 	bic.w	r3, r3, #7
 8009728:	3308      	adds	r3, #8
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972e:	4433      	add	r3, r6
 8009730:	9309      	str	r3, [sp, #36]	@ 0x24
 8009732:	e76a      	b.n	800960a <_svfiprintf_r+0x52>
 8009734:	fb0c 3202 	mla	r2, ip, r2, r3
 8009738:	460c      	mov	r4, r1
 800973a:	2001      	movs	r0, #1
 800973c:	e7a8      	b.n	8009690 <_svfiprintf_r+0xd8>
 800973e:	2300      	movs	r3, #0
 8009740:	3401      	adds	r4, #1
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	4619      	mov	r1, r3
 8009746:	f04f 0c0a 	mov.w	ip, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009750:	3a30      	subs	r2, #48	@ 0x30
 8009752:	2a09      	cmp	r2, #9
 8009754:	d903      	bls.n	800975e <_svfiprintf_r+0x1a6>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0c6      	beq.n	80096e8 <_svfiprintf_r+0x130>
 800975a:	9105      	str	r1, [sp, #20]
 800975c:	e7c4      	b.n	80096e8 <_svfiprintf_r+0x130>
 800975e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009762:	4604      	mov	r4, r0
 8009764:	2301      	movs	r3, #1
 8009766:	e7f0      	b.n	800974a <_svfiprintf_r+0x192>
 8009768:	ab03      	add	r3, sp, #12
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	462a      	mov	r2, r5
 800976e:	4b0e      	ldr	r3, [pc, #56]	@ (80097a8 <_svfiprintf_r+0x1f0>)
 8009770:	a904      	add	r1, sp, #16
 8009772:	4638      	mov	r0, r7
 8009774:	f3af 8000 	nop.w
 8009778:	1c42      	adds	r2, r0, #1
 800977a:	4606      	mov	r6, r0
 800977c:	d1d6      	bne.n	800972c <_svfiprintf_r+0x174>
 800977e:	89ab      	ldrh	r3, [r5, #12]
 8009780:	065b      	lsls	r3, r3, #25
 8009782:	f53f af2d 	bmi.w	80095e0 <_svfiprintf_r+0x28>
 8009786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009788:	e72c      	b.n	80095e4 <_svfiprintf_r+0x2c>
 800978a:	ab03      	add	r3, sp, #12
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	462a      	mov	r2, r5
 8009790:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <_svfiprintf_r+0x1f0>)
 8009792:	a904      	add	r1, sp, #16
 8009794:	4638      	mov	r0, r7
 8009796:	f000 f9bb 	bl	8009b10 <_printf_i>
 800979a:	e7ed      	b.n	8009778 <_svfiprintf_r+0x1c0>
 800979c:	0801fb18 	.word	0x0801fb18
 80097a0:	0801fb22 	.word	0x0801fb22
 80097a4:	00000000 	.word	0x00000000
 80097a8:	08009501 	.word	0x08009501
 80097ac:	0801fb1e 	.word	0x0801fb1e

080097b0 <__sfputc_r>:
 80097b0:	6893      	ldr	r3, [r2, #8]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	b410      	push	{r4}
 80097b8:	6093      	str	r3, [r2, #8]
 80097ba:	da08      	bge.n	80097ce <__sfputc_r+0x1e>
 80097bc:	6994      	ldr	r4, [r2, #24]
 80097be:	42a3      	cmp	r3, r4
 80097c0:	db01      	blt.n	80097c6 <__sfputc_r+0x16>
 80097c2:	290a      	cmp	r1, #10
 80097c4:	d103      	bne.n	80097ce <__sfputc_r+0x1e>
 80097c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ca:	f7ff bc82 	b.w	80090d2 <__swbuf_r>
 80097ce:	6813      	ldr	r3, [r2, #0]
 80097d0:	1c58      	adds	r0, r3, #1
 80097d2:	6010      	str	r0, [r2, #0]
 80097d4:	7019      	strb	r1, [r3, #0]
 80097d6:	4608      	mov	r0, r1
 80097d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097dc:	4770      	bx	lr

080097de <__sfputs_r>:
 80097de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	4614      	mov	r4, r2
 80097e6:	18d5      	adds	r5, r2, r3
 80097e8:	42ac      	cmp	r4, r5
 80097ea:	d101      	bne.n	80097f0 <__sfputs_r+0x12>
 80097ec:	2000      	movs	r0, #0
 80097ee:	e007      	b.n	8009800 <__sfputs_r+0x22>
 80097f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f4:	463a      	mov	r2, r7
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ffda 	bl	80097b0 <__sfputc_r>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d1f3      	bne.n	80097e8 <__sfputs_r+0xa>
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009804 <_vfiprintf_r>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	460d      	mov	r5, r1
 800980a:	b09d      	sub	sp, #116	@ 0x74
 800980c:	4614      	mov	r4, r2
 800980e:	4698      	mov	r8, r3
 8009810:	4606      	mov	r6, r0
 8009812:	b118      	cbz	r0, 800981c <_vfiprintf_r+0x18>
 8009814:	6a03      	ldr	r3, [r0, #32]
 8009816:	b90b      	cbnz	r3, 800981c <_vfiprintf_r+0x18>
 8009818:	f7ff fb34 	bl	8008e84 <__sinit>
 800981c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	d405      	bmi.n	800982e <_vfiprintf_r+0x2a>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d402      	bmi.n	800982e <_vfiprintf_r+0x2a>
 8009828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800982a:	f7ff fd60 	bl	80092ee <__retarget_lock_acquire_recursive>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	071b      	lsls	r3, r3, #28
 8009832:	d501      	bpl.n	8009838 <_vfiprintf_r+0x34>
 8009834:	692b      	ldr	r3, [r5, #16]
 8009836:	b99b      	cbnz	r3, 8009860 <_vfiprintf_r+0x5c>
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff fc88 	bl	8009150 <__swsetup_r>
 8009840:	b170      	cbz	r0, 8009860 <_vfiprintf_r+0x5c>
 8009842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009844:	07dc      	lsls	r4, r3, #31
 8009846:	d504      	bpl.n	8009852 <_vfiprintf_r+0x4e>
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	b01d      	add	sp, #116	@ 0x74
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	0598      	lsls	r0, r3, #22
 8009856:	d4f7      	bmi.n	8009848 <_vfiprintf_r+0x44>
 8009858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800985a:	f7ff fd49 	bl	80092f0 <__retarget_lock_release_recursive>
 800985e:	e7f3      	b.n	8009848 <_vfiprintf_r+0x44>
 8009860:	2300      	movs	r3, #0
 8009862:	9309      	str	r3, [sp, #36]	@ 0x24
 8009864:	2320      	movs	r3, #32
 8009866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800986a:	f8cd 800c 	str.w	r8, [sp, #12]
 800986e:	2330      	movs	r3, #48	@ 0x30
 8009870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a20 <_vfiprintf_r+0x21c>
 8009874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009878:	f04f 0901 	mov.w	r9, #1
 800987c:	4623      	mov	r3, r4
 800987e:	469a      	mov	sl, r3
 8009880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009884:	b10a      	cbz	r2, 800988a <_vfiprintf_r+0x86>
 8009886:	2a25      	cmp	r2, #37	@ 0x25
 8009888:	d1f9      	bne.n	800987e <_vfiprintf_r+0x7a>
 800988a:	ebba 0b04 	subs.w	fp, sl, r4
 800988e:	d00b      	beq.n	80098a8 <_vfiprintf_r+0xa4>
 8009890:	465b      	mov	r3, fp
 8009892:	4622      	mov	r2, r4
 8009894:	4629      	mov	r1, r5
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ffa1 	bl	80097de <__sfputs_r>
 800989c:	3001      	adds	r0, #1
 800989e:	f000 80a7 	beq.w	80099f0 <_vfiprintf_r+0x1ec>
 80098a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a4:	445a      	add	r2, fp
 80098a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80098a8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 809f 	beq.w	80099f0 <_vfiprintf_r+0x1ec>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f04f 32ff 	mov.w	r2, #4294967295
 80098b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098bc:	f10a 0a01 	add.w	sl, sl, #1
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	9307      	str	r3, [sp, #28]
 80098c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80098ca:	4654      	mov	r4, sl
 80098cc:	2205      	movs	r2, #5
 80098ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d2:	4853      	ldr	r0, [pc, #332]	@ (8009a20 <_vfiprintf_r+0x21c>)
 80098d4:	f7f6 fc84 	bl	80001e0 <memchr>
 80098d8:	9a04      	ldr	r2, [sp, #16]
 80098da:	b9d8      	cbnz	r0, 8009914 <_vfiprintf_r+0x110>
 80098dc:	06d1      	lsls	r1, r2, #27
 80098de:	bf44      	itt	mi
 80098e0:	2320      	movmi	r3, #32
 80098e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098e6:	0713      	lsls	r3, r2, #28
 80098e8:	bf44      	itt	mi
 80098ea:	232b      	movmi	r3, #43	@ 0x2b
 80098ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098f0:	f89a 3000 	ldrb.w	r3, [sl]
 80098f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80098f6:	d015      	beq.n	8009924 <_vfiprintf_r+0x120>
 80098f8:	9a07      	ldr	r2, [sp, #28]
 80098fa:	4654      	mov	r4, sl
 80098fc:	2000      	movs	r0, #0
 80098fe:	f04f 0c0a 	mov.w	ip, #10
 8009902:	4621      	mov	r1, r4
 8009904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009908:	3b30      	subs	r3, #48	@ 0x30
 800990a:	2b09      	cmp	r3, #9
 800990c:	d94b      	bls.n	80099a6 <_vfiprintf_r+0x1a2>
 800990e:	b1b0      	cbz	r0, 800993e <_vfiprintf_r+0x13a>
 8009910:	9207      	str	r2, [sp, #28]
 8009912:	e014      	b.n	800993e <_vfiprintf_r+0x13a>
 8009914:	eba0 0308 	sub.w	r3, r0, r8
 8009918:	fa09 f303 	lsl.w	r3, r9, r3
 800991c:	4313      	orrs	r3, r2
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	46a2      	mov	sl, r4
 8009922:	e7d2      	b.n	80098ca <_vfiprintf_r+0xc6>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	1d19      	adds	r1, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	9103      	str	r1, [sp, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfbb      	ittet	lt
 8009930:	425b      	neglt	r3, r3
 8009932:	f042 0202 	orrlt.w	r2, r2, #2
 8009936:	9307      	strge	r3, [sp, #28]
 8009938:	9307      	strlt	r3, [sp, #28]
 800993a:	bfb8      	it	lt
 800993c:	9204      	strlt	r2, [sp, #16]
 800993e:	7823      	ldrb	r3, [r4, #0]
 8009940:	2b2e      	cmp	r3, #46	@ 0x2e
 8009942:	d10a      	bne.n	800995a <_vfiprintf_r+0x156>
 8009944:	7863      	ldrb	r3, [r4, #1]
 8009946:	2b2a      	cmp	r3, #42	@ 0x2a
 8009948:	d132      	bne.n	80099b0 <_vfiprintf_r+0x1ac>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	1d1a      	adds	r2, r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	9203      	str	r2, [sp, #12]
 8009952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009956:	3402      	adds	r4, #2
 8009958:	9305      	str	r3, [sp, #20]
 800995a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a30 <_vfiprintf_r+0x22c>
 800995e:	7821      	ldrb	r1, [r4, #0]
 8009960:	2203      	movs	r2, #3
 8009962:	4650      	mov	r0, sl
 8009964:	f7f6 fc3c 	bl	80001e0 <memchr>
 8009968:	b138      	cbz	r0, 800997a <_vfiprintf_r+0x176>
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	eba0 000a 	sub.w	r0, r0, sl
 8009970:	2240      	movs	r2, #64	@ 0x40
 8009972:	4082      	lsls	r2, r0
 8009974:	4313      	orrs	r3, r2
 8009976:	3401      	adds	r4, #1
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997e:	4829      	ldr	r0, [pc, #164]	@ (8009a24 <_vfiprintf_r+0x220>)
 8009980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009984:	2206      	movs	r2, #6
 8009986:	f7f6 fc2b 	bl	80001e0 <memchr>
 800998a:	2800      	cmp	r0, #0
 800998c:	d03f      	beq.n	8009a0e <_vfiprintf_r+0x20a>
 800998e:	4b26      	ldr	r3, [pc, #152]	@ (8009a28 <_vfiprintf_r+0x224>)
 8009990:	bb1b      	cbnz	r3, 80099da <_vfiprintf_r+0x1d6>
 8009992:	9b03      	ldr	r3, [sp, #12]
 8009994:	3307      	adds	r3, #7
 8009996:	f023 0307 	bic.w	r3, r3, #7
 800999a:	3308      	adds	r3, #8
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a0:	443b      	add	r3, r7
 80099a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a4:	e76a      	b.n	800987c <_vfiprintf_r+0x78>
 80099a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099aa:	460c      	mov	r4, r1
 80099ac:	2001      	movs	r0, #1
 80099ae:	e7a8      	b.n	8009902 <_vfiprintf_r+0xfe>
 80099b0:	2300      	movs	r3, #0
 80099b2:	3401      	adds	r4, #1
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	4619      	mov	r1, r3
 80099b8:	f04f 0c0a 	mov.w	ip, #10
 80099bc:	4620      	mov	r0, r4
 80099be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099c2:	3a30      	subs	r2, #48	@ 0x30
 80099c4:	2a09      	cmp	r2, #9
 80099c6:	d903      	bls.n	80099d0 <_vfiprintf_r+0x1cc>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0c6      	beq.n	800995a <_vfiprintf_r+0x156>
 80099cc:	9105      	str	r1, [sp, #20]
 80099ce:	e7c4      	b.n	800995a <_vfiprintf_r+0x156>
 80099d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80099d4:	4604      	mov	r4, r0
 80099d6:	2301      	movs	r3, #1
 80099d8:	e7f0      	b.n	80099bc <_vfiprintf_r+0x1b8>
 80099da:	ab03      	add	r3, sp, #12
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	462a      	mov	r2, r5
 80099e0:	4b12      	ldr	r3, [pc, #72]	@ (8009a2c <_vfiprintf_r+0x228>)
 80099e2:	a904      	add	r1, sp, #16
 80099e4:	4630      	mov	r0, r6
 80099e6:	f3af 8000 	nop.w
 80099ea:	4607      	mov	r7, r0
 80099ec:	1c78      	adds	r0, r7, #1
 80099ee:	d1d6      	bne.n	800999e <_vfiprintf_r+0x19a>
 80099f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f2:	07d9      	lsls	r1, r3, #31
 80099f4:	d405      	bmi.n	8009a02 <_vfiprintf_r+0x1fe>
 80099f6:	89ab      	ldrh	r3, [r5, #12]
 80099f8:	059a      	lsls	r2, r3, #22
 80099fa:	d402      	bmi.n	8009a02 <_vfiprintf_r+0x1fe>
 80099fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099fe:	f7ff fc77 	bl	80092f0 <__retarget_lock_release_recursive>
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	065b      	lsls	r3, r3, #25
 8009a06:	f53f af1f 	bmi.w	8009848 <_vfiprintf_r+0x44>
 8009a0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a0c:	e71e      	b.n	800984c <_vfiprintf_r+0x48>
 8009a0e:	ab03      	add	r3, sp, #12
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	462a      	mov	r2, r5
 8009a14:	4b05      	ldr	r3, [pc, #20]	@ (8009a2c <_vfiprintf_r+0x228>)
 8009a16:	a904      	add	r1, sp, #16
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 f879 	bl	8009b10 <_printf_i>
 8009a1e:	e7e4      	b.n	80099ea <_vfiprintf_r+0x1e6>
 8009a20:	0801fb18 	.word	0x0801fb18
 8009a24:	0801fb22 	.word	0x0801fb22
 8009a28:	00000000 	.word	0x00000000
 8009a2c:	080097df 	.word	0x080097df
 8009a30:	0801fb1e 	.word	0x0801fb1e

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	3b00      	subs	r3, #0
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a90:	4641      	mov	r1, r8
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c8      	blx	r9
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	f003 0306 	and.w	r3, r3, #6
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	bf02      	ittt	eq
 8009aa6:	68e5      	ldreq	r5, [r4, #12]
 8009aa8:	6833      	ldreq	r3, [r6, #0]
 8009aaa:	1aed      	subeq	r5, r5, r3
 8009aac:	68a3      	ldr	r3, [r4, #8]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4641      	mov	r1, r8
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c8      	blx	r9
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	@ 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4641      	mov	r1, r8
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c8      	blx	r9
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	7e0f      	ldrb	r7, [r1, #24]
 8009b16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b18:	2f78      	cmp	r7, #120	@ 0x78
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	469a      	mov	sl, r3
 8009b22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	@ 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d1 	beq.w	8009cd4 <_printf_i+0x1c4>
 8009b32:	2f58      	cmp	r7, #88	@ 0x58
 8009b34:	f000 80b8 	beq.w	8009ca8 <_printf_i+0x198>
 8009b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b50 <_printf_i+0x40>)
 8009b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cbb 	.word	0x08009cbb
 8009b80:	08009be7 	.word	0x08009be7
 8009b84:	08009c75 	.word	0x08009c75
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009cdd 	.word	0x08009cdd
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009be7 	.word	0x08009be7
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009c7d 	.word	0x08009c7d
 8009ba8:	6833      	ldr	r3, [r6, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6032      	str	r2, [r6, #0]
 8009bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e09c      	b.n	8009cf6 <_printf_i+0x1e6>
 8009bbc:	6833      	ldr	r3, [r6, #0]
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	1d19      	adds	r1, r3, #4
 8009bc2:	6031      	str	r1, [r6, #0]
 8009bc4:	0606      	lsls	r6, r0, #24
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0xbc>
 8009bc8:	681d      	ldr	r5, [r3, #0]
 8009bca:	e003      	b.n	8009bd4 <_printf_i+0xc4>
 8009bcc:	0645      	lsls	r5, r0, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0xb8>
 8009bd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	da03      	bge.n	8009be0 <_printf_i+0xd0>
 8009bd8:	232d      	movs	r3, #45	@ 0x2d
 8009bda:	426d      	negs	r5, r5
 8009bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be0:	4858      	ldr	r0, [pc, #352]	@ (8009d44 <_printf_i+0x234>)
 8009be2:	230a      	movs	r3, #10
 8009be4:	e011      	b.n	8009c0a <_printf_i+0xfa>
 8009be6:	6821      	ldr	r1, [r4, #0]
 8009be8:	6833      	ldr	r3, [r6, #0]
 8009bea:	0608      	lsls	r0, r1, #24
 8009bec:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bf0:	d402      	bmi.n	8009bf8 <_printf_i+0xe8>
 8009bf2:	0649      	lsls	r1, r1, #25
 8009bf4:	bf48      	it	mi
 8009bf6:	b2ad      	uxthmi	r5, r5
 8009bf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bfa:	4852      	ldr	r0, [pc, #328]	@ (8009d44 <_printf_i+0x234>)
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	bf14      	ite	ne
 8009c00:	230a      	movne	r3, #10
 8009c02:	2308      	moveq	r3, #8
 8009c04:	2100      	movs	r1, #0
 8009c06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c0a:	6866      	ldr	r6, [r4, #4]
 8009c0c:	60a6      	str	r6, [r4, #8]
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	db05      	blt.n	8009c1e <_printf_i+0x10e>
 8009c12:	6821      	ldr	r1, [r4, #0]
 8009c14:	432e      	orrs	r6, r5
 8009c16:	f021 0104 	bic.w	r1, r1, #4
 8009c1a:	6021      	str	r1, [r4, #0]
 8009c1c:	d04b      	beq.n	8009cb6 <_printf_i+0x1a6>
 8009c1e:	4616      	mov	r6, r2
 8009c20:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c24:	fb03 5711 	mls	r7, r3, r1, r5
 8009c28:	5dc7      	ldrb	r7, [r0, r7]
 8009c2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c2e:	462f      	mov	r7, r5
 8009c30:	42bb      	cmp	r3, r7
 8009c32:	460d      	mov	r5, r1
 8009c34:	d9f4      	bls.n	8009c20 <_printf_i+0x110>
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d10b      	bne.n	8009c52 <_printf_i+0x142>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	07df      	lsls	r7, r3, #31
 8009c3e:	d508      	bpl.n	8009c52 <_printf_i+0x142>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	6861      	ldr	r1, [r4, #4]
 8009c44:	4299      	cmp	r1, r3
 8009c46:	bfde      	ittt	le
 8009c48:	2330      	movle	r3, #48	@ 0x30
 8009c4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c52:	1b92      	subs	r2, r2, r6
 8009c54:	6122      	str	r2, [r4, #16]
 8009c56:	f8cd a000 	str.w	sl, [sp]
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	aa03      	add	r2, sp, #12
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4640      	mov	r0, r8
 8009c62:	f7ff fee7 	bl	8009a34 <_printf_common>
 8009c66:	3001      	adds	r0, #1
 8009c68:	d14a      	bne.n	8009d00 <_printf_i+0x1f0>
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	b004      	add	sp, #16
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	f043 0320 	orr.w	r3, r3, #32
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	4832      	ldr	r0, [pc, #200]	@ (8009d48 <_printf_i+0x238>)
 8009c7e:	2778      	movs	r7, #120	@ 0x78
 8009c80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	6831      	ldr	r1, [r6, #0]
 8009c88:	061f      	lsls	r7, r3, #24
 8009c8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c8e:	d402      	bmi.n	8009c96 <_printf_i+0x186>
 8009c90:	065f      	lsls	r7, r3, #25
 8009c92:	bf48      	it	mi
 8009c94:	b2ad      	uxthmi	r5, r5
 8009c96:	6031      	str	r1, [r6, #0]
 8009c98:	07d9      	lsls	r1, r3, #31
 8009c9a:	bf44      	itt	mi
 8009c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8009ca0:	6023      	strmi	r3, [r4, #0]
 8009ca2:	b11d      	cbz	r5, 8009cac <_printf_i+0x19c>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	e7ad      	b.n	8009c04 <_printf_i+0xf4>
 8009ca8:	4826      	ldr	r0, [pc, #152]	@ (8009d44 <_printf_i+0x234>)
 8009caa:	e7e9      	b.n	8009c80 <_printf_i+0x170>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	f023 0320 	bic.w	r3, r3, #32
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	e7f6      	b.n	8009ca4 <_printf_i+0x194>
 8009cb6:	4616      	mov	r6, r2
 8009cb8:	e7bd      	b.n	8009c36 <_printf_i+0x126>
 8009cba:	6833      	ldr	r3, [r6, #0]
 8009cbc:	6825      	ldr	r5, [r4, #0]
 8009cbe:	6961      	ldr	r1, [r4, #20]
 8009cc0:	1d18      	adds	r0, r3, #4
 8009cc2:	6030      	str	r0, [r6, #0]
 8009cc4:	062e      	lsls	r6, r5, #24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	d501      	bpl.n	8009cce <_printf_i+0x1be>
 8009cca:	6019      	str	r1, [r3, #0]
 8009ccc:	e002      	b.n	8009cd4 <_printf_i+0x1c4>
 8009cce:	0668      	lsls	r0, r5, #25
 8009cd0:	d5fb      	bpl.n	8009cca <_printf_i+0x1ba>
 8009cd2:	8019      	strh	r1, [r3, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	4616      	mov	r6, r2
 8009cda:	e7bc      	b.n	8009c56 <_printf_i+0x146>
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	1d1a      	adds	r2, r3, #4
 8009ce0:	6032      	str	r2, [r6, #0]
 8009ce2:	681e      	ldr	r6, [r3, #0]
 8009ce4:	6862      	ldr	r2, [r4, #4]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7f6 fa79 	bl	80001e0 <memchr>
 8009cee:	b108      	cbz	r0, 8009cf4 <_printf_i+0x1e4>
 8009cf0:	1b80      	subs	r0, r0, r6
 8009cf2:	6060      	str	r0, [r4, #4]
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cfe:	e7aa      	b.n	8009c56 <_printf_i+0x146>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	4632      	mov	r2, r6
 8009d04:	4649      	mov	r1, r9
 8009d06:	4640      	mov	r0, r8
 8009d08:	47d0      	blx	sl
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d0ad      	beq.n	8009c6a <_printf_i+0x15a>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	079b      	lsls	r3, r3, #30
 8009d12:	d413      	bmi.n	8009d3c <_printf_i+0x22c>
 8009d14:	68e0      	ldr	r0, [r4, #12]
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	bfb8      	it	lt
 8009d1c:	4618      	movlt	r0, r3
 8009d1e:	e7a6      	b.n	8009c6e <_printf_i+0x15e>
 8009d20:	2301      	movs	r3, #1
 8009d22:	4632      	mov	r2, r6
 8009d24:	4649      	mov	r1, r9
 8009d26:	4640      	mov	r0, r8
 8009d28:	47d0      	blx	sl
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d09d      	beq.n	8009c6a <_printf_i+0x15a>
 8009d2e:	3501      	adds	r5, #1
 8009d30:	68e3      	ldr	r3, [r4, #12]
 8009d32:	9903      	ldr	r1, [sp, #12]
 8009d34:	1a5b      	subs	r3, r3, r1
 8009d36:	42ab      	cmp	r3, r5
 8009d38:	dcf2      	bgt.n	8009d20 <_printf_i+0x210>
 8009d3a:	e7eb      	b.n	8009d14 <_printf_i+0x204>
 8009d3c:	2500      	movs	r5, #0
 8009d3e:	f104 0619 	add.w	r6, r4, #25
 8009d42:	e7f5      	b.n	8009d30 <_printf_i+0x220>
 8009d44:	0801fb29 	.word	0x0801fb29
 8009d48:	0801fb3a 	.word	0x0801fb3a

08009d4c <__sflush_r>:
 8009d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	0716      	lsls	r6, r2, #28
 8009d56:	4605      	mov	r5, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	d454      	bmi.n	8009e06 <__sflush_r+0xba>
 8009d5c:	684b      	ldr	r3, [r1, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dc02      	bgt.n	8009d68 <__sflush_r+0x1c>
 8009d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd48      	ble.n	8009dfa <__sflush_r+0xae>
 8009d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d045      	beq.n	8009dfa <__sflush_r+0xae>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d74:	682f      	ldr	r7, [r5, #0]
 8009d76:	6a21      	ldr	r1, [r4, #32]
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	d030      	beq.n	8009dde <__sflush_r+0x92>
 8009d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	0759      	lsls	r1, r3, #29
 8009d82:	d505      	bpl.n	8009d90 <__sflush_r+0x44>
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	1ad2      	subs	r2, r2, r3
 8009d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d8a:	b10b      	cbz	r3, 8009d90 <__sflush_r+0x44>
 8009d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	2300      	movs	r3, #0
 8009d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d94:	6a21      	ldr	r1, [r4, #32]
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b0      	blx	r6
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	d106      	bne.n	8009dae <__sflush_r+0x62>
 8009da0:	6829      	ldr	r1, [r5, #0]
 8009da2:	291d      	cmp	r1, #29
 8009da4:	d82b      	bhi.n	8009dfe <__sflush_r+0xb2>
 8009da6:	4a2a      	ldr	r2, [pc, #168]	@ (8009e50 <__sflush_r+0x104>)
 8009da8:	40ca      	lsrs	r2, r1
 8009daa:	07d6      	lsls	r6, r2, #31
 8009dac:	d527      	bpl.n	8009dfe <__sflush_r+0xb2>
 8009dae:	2200      	movs	r2, #0
 8009db0:	6062      	str	r2, [r4, #4]
 8009db2:	04d9      	lsls	r1, r3, #19
 8009db4:	6922      	ldr	r2, [r4, #16]
 8009db6:	6022      	str	r2, [r4, #0]
 8009db8:	d504      	bpl.n	8009dc4 <__sflush_r+0x78>
 8009dba:	1c42      	adds	r2, r0, #1
 8009dbc:	d101      	bne.n	8009dc2 <__sflush_r+0x76>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	b903      	cbnz	r3, 8009dc4 <__sflush_r+0x78>
 8009dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dc6:	602f      	str	r7, [r5, #0]
 8009dc8:	b1b9      	cbz	r1, 8009dfa <__sflush_r+0xae>
 8009dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d002      	beq.n	8009dd8 <__sflush_r+0x8c>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7ff fa9c 	bl	8009310 <_free_r>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ddc:	e00d      	b.n	8009dfa <__sflush_r+0xae>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	4602      	mov	r2, r0
 8009de6:	1c50      	adds	r0, r2, #1
 8009de8:	d1c9      	bne.n	8009d7e <__sflush_r+0x32>
 8009dea:	682b      	ldr	r3, [r5, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0c6      	beq.n	8009d7e <__sflush_r+0x32>
 8009df0:	2b1d      	cmp	r3, #29
 8009df2:	d001      	beq.n	8009df8 <__sflush_r+0xac>
 8009df4:	2b16      	cmp	r3, #22
 8009df6:	d11e      	bne.n	8009e36 <__sflush_r+0xea>
 8009df8:	602f      	str	r7, [r5, #0]
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e022      	b.n	8009e44 <__sflush_r+0xf8>
 8009dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	e01b      	b.n	8009e3e <__sflush_r+0xf2>
 8009e06:	690f      	ldr	r7, [r1, #16]
 8009e08:	2f00      	cmp	r7, #0
 8009e0a:	d0f6      	beq.n	8009dfa <__sflush_r+0xae>
 8009e0c:	0793      	lsls	r3, r2, #30
 8009e0e:	680e      	ldr	r6, [r1, #0]
 8009e10:	bf08      	it	eq
 8009e12:	694b      	ldreq	r3, [r1, #20]
 8009e14:	600f      	str	r7, [r1, #0]
 8009e16:	bf18      	it	ne
 8009e18:	2300      	movne	r3, #0
 8009e1a:	eba6 0807 	sub.w	r8, r6, r7
 8009e1e:	608b      	str	r3, [r1, #8]
 8009e20:	f1b8 0f00 	cmp.w	r8, #0
 8009e24:	dde9      	ble.n	8009dfa <__sflush_r+0xae>
 8009e26:	6a21      	ldr	r1, [r4, #32]
 8009e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e2a:	4643      	mov	r3, r8
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b0      	blx	r6
 8009e32:	2800      	cmp	r0, #0
 8009e34:	dc08      	bgt.n	8009e48 <__sflush_r+0xfc>
 8009e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	4407      	add	r7, r0
 8009e4a:	eba8 0800 	sub.w	r8, r8, r0
 8009e4e:	e7e7      	b.n	8009e20 <__sflush_r+0xd4>
 8009e50:	20400001 	.word	0x20400001

08009e54 <_fflush_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	690b      	ldr	r3, [r1, #16]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	b913      	cbnz	r3, 8009e64 <_fflush_r+0x10>
 8009e5e:	2500      	movs	r5, #0
 8009e60:	4628      	mov	r0, r5
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	b118      	cbz	r0, 8009e6e <_fflush_r+0x1a>
 8009e66:	6a03      	ldr	r3, [r0, #32]
 8009e68:	b90b      	cbnz	r3, 8009e6e <_fflush_r+0x1a>
 8009e6a:	f7ff f80b 	bl	8008e84 <__sinit>
 8009e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f3      	beq.n	8009e5e <_fflush_r+0xa>
 8009e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e78:	07d0      	lsls	r0, r2, #31
 8009e7a:	d404      	bmi.n	8009e86 <_fflush_r+0x32>
 8009e7c:	0599      	lsls	r1, r3, #22
 8009e7e:	d402      	bmi.n	8009e86 <_fflush_r+0x32>
 8009e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e82:	f7ff fa34 	bl	80092ee <__retarget_lock_acquire_recursive>
 8009e86:	4628      	mov	r0, r5
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f7ff ff5f 	bl	8009d4c <__sflush_r>
 8009e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e90:	07da      	lsls	r2, r3, #31
 8009e92:	4605      	mov	r5, r0
 8009e94:	d4e4      	bmi.n	8009e60 <_fflush_r+0xc>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	059b      	lsls	r3, r3, #22
 8009e9a:	d4e1      	bmi.n	8009e60 <_fflush_r+0xc>
 8009e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e9e:	f7ff fa27 	bl	80092f0 <__retarget_lock_release_recursive>
 8009ea2:	e7dd      	b.n	8009e60 <_fflush_r+0xc>

08009ea4 <__swhatbuf_r>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eac:	2900      	cmp	r1, #0
 8009eae:	b096      	sub	sp, #88	@ 0x58
 8009eb0:	4615      	mov	r5, r2
 8009eb2:	461e      	mov	r6, r3
 8009eb4:	da0d      	bge.n	8009ed2 <__swhatbuf_r+0x2e>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ebc:	f04f 0100 	mov.w	r1, #0
 8009ec0:	bf14      	ite	ne
 8009ec2:	2340      	movne	r3, #64	@ 0x40
 8009ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ec8:	2000      	movs	r0, #0
 8009eca:	6031      	str	r1, [r6, #0]
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	b016      	add	sp, #88	@ 0x58
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	466a      	mov	r2, sp
 8009ed4:	f000 f896 	bl	800a004 <_fstat_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	dbec      	blt.n	8009eb6 <__swhatbuf_r+0x12>
 8009edc:	9901      	ldr	r1, [sp, #4]
 8009ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ee6:	4259      	negs	r1, r3
 8009ee8:	4159      	adcs	r1, r3
 8009eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eee:	e7eb      	b.n	8009ec8 <__swhatbuf_r+0x24>

08009ef0 <__smakebuf_r>:
 8009ef0:	898b      	ldrh	r3, [r1, #12]
 8009ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ef4:	079d      	lsls	r5, r3, #30
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	d507      	bpl.n	8009f0c <__smakebuf_r+0x1c>
 8009efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	6123      	str	r3, [r4, #16]
 8009f04:	2301      	movs	r3, #1
 8009f06:	6163      	str	r3, [r4, #20]
 8009f08:	b003      	add	sp, #12
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0c:	ab01      	add	r3, sp, #4
 8009f0e:	466a      	mov	r2, sp
 8009f10:	f7ff ffc8 	bl	8009ea4 <__swhatbuf_r>
 8009f14:	9f00      	ldr	r7, [sp, #0]
 8009f16:	4605      	mov	r5, r0
 8009f18:	4639      	mov	r1, r7
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff fa64 	bl	80093e8 <_malloc_r>
 8009f20:	b948      	cbnz	r0, 8009f36 <__smakebuf_r+0x46>
 8009f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f26:	059a      	lsls	r2, r3, #22
 8009f28:	d4ee      	bmi.n	8009f08 <__smakebuf_r+0x18>
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	f043 0302 	orr.w	r3, r3, #2
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	e7e2      	b.n	8009efc <__smakebuf_r+0xc>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	6020      	str	r0, [r4, #0]
 8009f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f46:	b15b      	cbz	r3, 8009f60 <__smakebuf_r+0x70>
 8009f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f000 f86b 	bl	800a028 <_isatty_r>
 8009f52:	b128      	cbz	r0, 8009f60 <__smakebuf_r+0x70>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	f043 0301 	orr.w	r3, r3, #1
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	431d      	orrs	r5, r3
 8009f64:	81a5      	strh	r5, [r4, #12]
 8009f66:	e7cf      	b.n	8009f08 <__smakebuf_r+0x18>

08009f68 <_putc_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	460d      	mov	r5, r1
 8009f6c:	4614      	mov	r4, r2
 8009f6e:	4606      	mov	r6, r0
 8009f70:	b118      	cbz	r0, 8009f7a <_putc_r+0x12>
 8009f72:	6a03      	ldr	r3, [r0, #32]
 8009f74:	b90b      	cbnz	r3, 8009f7a <_putc_r+0x12>
 8009f76:	f7fe ff85 	bl	8008e84 <__sinit>
 8009f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f7c:	07d8      	lsls	r0, r3, #31
 8009f7e:	d405      	bmi.n	8009f8c <_putc_r+0x24>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	0599      	lsls	r1, r3, #22
 8009f84:	d402      	bmi.n	8009f8c <_putc_r+0x24>
 8009f86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f88:	f7ff f9b1 	bl	80092ee <__retarget_lock_acquire_recursive>
 8009f8c:	68a3      	ldr	r3, [r4, #8]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	60a3      	str	r3, [r4, #8]
 8009f94:	da05      	bge.n	8009fa2 <_putc_r+0x3a>
 8009f96:	69a2      	ldr	r2, [r4, #24]
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	db12      	blt.n	8009fc2 <_putc_r+0x5a>
 8009f9c:	b2eb      	uxtb	r3, r5
 8009f9e:	2b0a      	cmp	r3, #10
 8009fa0:	d00f      	beq.n	8009fc2 <_putc_r+0x5a>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	6022      	str	r2, [r4, #0]
 8009fa8:	701d      	strb	r5, [r3, #0]
 8009faa:	b2ed      	uxtb	r5, r5
 8009fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d405      	bmi.n	8009fbe <_putc_r+0x56>
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	059b      	lsls	r3, r3, #22
 8009fb6:	d402      	bmi.n	8009fbe <_putc_r+0x56>
 8009fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fba:	f7ff f999 	bl	80092f0 <__retarget_lock_release_recursive>
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff f883 	bl	80090d2 <__swbuf_r>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	e7ed      	b.n	8009fac <_putc_r+0x44>

08009fd0 <memmove>:
 8009fd0:	4288      	cmp	r0, r1
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	eb01 0402 	add.w	r4, r1, r2
 8009fd8:	d902      	bls.n	8009fe0 <memmove+0x10>
 8009fda:	4284      	cmp	r4, r0
 8009fdc:	4623      	mov	r3, r4
 8009fde:	d807      	bhi.n	8009ff0 <memmove+0x20>
 8009fe0:	1e43      	subs	r3, r0, #1
 8009fe2:	42a1      	cmp	r1, r4
 8009fe4:	d008      	beq.n	8009ff8 <memmove+0x28>
 8009fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fee:	e7f8      	b.n	8009fe2 <memmove+0x12>
 8009ff0:	4402      	add	r2, r0
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	428a      	cmp	r2, r1
 8009ff6:	d100      	bne.n	8009ffa <memmove+0x2a>
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a002:	e7f7      	b.n	8009ff4 <memmove+0x24>

0800a004 <_fstat_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_fstat_r+0x20>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f7 fede 	bl	8001dd2 <_fstat>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_fstat_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_fstat_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	2000312c 	.word	0x2000312c

0800a028 <_isatty_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	@ (800a044 <_isatty_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f7 fedd 	bl	8001df2 <_isatty>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_isatty_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_isatty_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	2000312c 	.word	0x2000312c

0800a048 <_sbrk_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d06      	ldr	r5, [pc, #24]	@ (800a064 <_sbrk_r+0x1c>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f7 fee6 	bl	8001e24 <_sbrk>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_sbrk_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_sbrk_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	2000312c 	.word	0x2000312c

0800a068 <_realloc_r>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	4607      	mov	r7, r0
 800a06e:	4614      	mov	r4, r2
 800a070:	460d      	mov	r5, r1
 800a072:	b921      	cbnz	r1, 800a07e <_realloc_r+0x16>
 800a074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	4611      	mov	r1, r2
 800a07a:	f7ff b9b5 	b.w	80093e8 <_malloc_r>
 800a07e:	b92a      	cbnz	r2, 800a08c <_realloc_r+0x24>
 800a080:	f7ff f946 	bl	8009310 <_free_r>
 800a084:	4625      	mov	r5, r4
 800a086:	4628      	mov	r0, r5
 800a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08c:	f000 f81a 	bl	800a0c4 <_malloc_usable_size_r>
 800a090:	4284      	cmp	r4, r0
 800a092:	4606      	mov	r6, r0
 800a094:	d802      	bhi.n	800a09c <_realloc_r+0x34>
 800a096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09a:	d8f4      	bhi.n	800a086 <_realloc_r+0x1e>
 800a09c:	4621      	mov	r1, r4
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f7ff f9a2 	bl	80093e8 <_malloc_r>
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	b908      	cbnz	r0, 800a0ac <_realloc_r+0x44>
 800a0a8:	4645      	mov	r5, r8
 800a0aa:	e7ec      	b.n	800a086 <_realloc_r+0x1e>
 800a0ac:	42b4      	cmp	r4, r6
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	bf28      	it	cs
 800a0b4:	4632      	movcs	r2, r6
 800a0b6:	f7ff f91c 	bl	80092f2 <memcpy>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7ff f927 	bl	8009310 <_free_r>
 800a0c2:	e7f1      	b.n	800a0a8 <_realloc_r+0x40>

0800a0c4 <_malloc_usable_size_r>:
 800a0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c8:	1f18      	subs	r0, r3, #4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfbc      	itt	lt
 800a0ce:	580b      	ldrlt	r3, [r1, r0]
 800a0d0:	18c0      	addlt	r0, r0, r3
 800a0d2:	4770      	bx	lr

0800a0d4 <_init>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr

0800a0e0 <_fini>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr
